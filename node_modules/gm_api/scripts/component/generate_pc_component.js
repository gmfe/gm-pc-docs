const _ = require('lodash')
const { getIsTable } = require('../util')

function gList(contents, name) {
  contents.push(`
export const Select_${name}: FC<SelectEnumProps<number>> = ({ ...rest }) => {
  return <SelectEnum {...rest} data={list_${name}} />
}`)
}

function gMap(contents, name) {
  contents.push(`
export const Map_${name}: FC<MapProps> = ({ value }) => {
  return <>{map_${name}[value]}</>
}`)
}

function gSelect(contents, name) {
  contents.push(`
export const Select_${name}: FC<SelectListProps<
  ${name},
  List${name}Response
>> = (props) => {
  return (
    <SelectList<${name}, List${name}Response>
      {...props}
      messageName='${name}'
      fetchList={List${name}}
    />
  )
}`)
}

function gMoreSelect(contents, name) {
  contents.push(`
export const MoreSelect_${name}: FC<MoreSelectListProps<
  ${name},
  List${name}Response
>> = (props) => {
  return (
    <MoreSelectList<${name}, List${name}Response>
      {...props}
      messageName='${name}'
      fetchList={List${name}}
    />
  )
}`)
}

function gMessageMap(contents, name, protoName) {
  contents.push(`
export const MapId_${name}: FC<MapIdProps<${name}, List${name}Response>> = (
  props,
) => {
  return (
    <MapId<${name}, List${name}Response>
      {...props}
      packageName='${protoName}'
      messageName='${name}'
      fetchList={List${name}}
    />
  )
}`)
}

function getEnum(protoNested) {
  const names = []
  _.forIn(protoNested, (v, k) => {
    if (v.nested) {
      _.forIn(v.nested, (vv, kk) => {
        if (vv.values) {
          names.push(`${k}_${kk}`)
        }
      })
    }

    if (v.values) {
      names.push(k)
    }
  })
  return names
}

function getListTable(protoNested) {
  const names = []

  let methods = []
  _.forIn(protoNested, (v, k) => {
    if (v.methods) {
      const keys = _.keys(v.methods)
      methods = methods.concat(keys)
    }
  })

  _.forIn(protoNested, (v, k) => {
    // 只扫第一层即可，第一层才可能是 Table
    if (v.fields) {
      // 是表
      // 有方法 ListXXX
      // 有接口 ListXXXResponse
      if (
        getIsTable(v) &&
        methods.includes(`List${k}`) &&
        protoNested[`List${k}Response`]
      ) {
        names.push(k)
      }
    }
  })

  return names
}

function getListIdsTable(protoNested) {
  const names = []

  let methods = []
  _.forIn(protoNested, (v, k) => {
    if (v.methods) {
      const keys = _.keys(v.methods)
      methods = methods.concat(keys)
    }
  })

  _.forIn(protoNested, (v, k) => {
    // 只扫第一层即可，第一层才可能是 Table
    if (v.fields) {
      // 是表
      // 有参数 xxx_ids
      // 有接口 ListXXXResponse
      if (
        getIsTable(v) &&
        methods.includes(`List${k}`) &&
        protoNested[`List${k}Response`] &&
        protoNested[`List${k}Request`].fields[`${_.snakeCase(k)}_ids`]
      ) {
        names.push(k)
      }
    }
  })

  return names
}

function generateComponent({ protoNested, protoName }) {
  const contents = [
    `import React, { FC } from 'react'
import { Select, SelectProps } from '@gm-pc/react'
import {
  SelectList,
  SelectEnum,
  MoreSelectList,
  MapId,
} from '../util/pc_util'
import type {
  MapProps,
  SelectListProps,
  SelectEnumProps,
  MoreSelectListProps,
  MapIdProps,
} from '../util/pc_util'
import {`,
  ]

  const names = getEnum(protoNested)
  const lists = getListTable(protoNested)
  const listIds = getListIdsTable(protoNested)

  _.each(names, (name) => {
    contents.push(`  list_${name},\n  map_${name},`)
  })
  _.each(lists, (name) => {
    contents.push(`  ${name},\n  List${name},\n  List${name}Response,`)
  })

  contents.push(`} from './index'`)

  _.each(names, (name) => {
    gList(contents, name)
    gMap(contents, name)
  })
  _.each(lists, (name) => {
    gSelect(contents, name)
    gMoreSelect(contents, name)
  })

  _.each(listIds, (name) => {
    gMessageMap(contents, name, protoName)
  })

  contents.push(`
export type {
  MapProps,
  SelectListProps,
  MoreSelectListProps,
}
`)

  return contents.join('\n')
}

module.exports = generateComponent
