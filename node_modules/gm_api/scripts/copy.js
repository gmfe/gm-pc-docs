const fs = require('fs-extra')
const { writeFile } = require('./util')
const path = require('path')
// 替换下，有些识别不了，做下处理
function replaceContent(content) {
  const validateArrReg = /\[.*\.(enum|int32)[\s\S]*?;/g
  const validateRequired = '[ (validate.rules).message = {required: true} ];'
  const importReg = /import "/g
  // 不知道为啥后台格式化会空格
  const repeatedReg = /\.repeated \./g
  // codes: [ "DUPLICATE_GROUP_NAME" ] 识别不了，转换下
  const annotationReg = /codes\s*: (\[([\s\S])*?\])/g

  return content
    .replace(validateArrReg, validateRequired)
    .replace(importReg, 'import "./')
    .replace(repeatedReg, '.repeated.')
    .replace(annotationReg, (str, $1) => {
      return `codes : "${JSON.parse($1).join(',')}"`
    })
}

const googlePath = path.resolve('./node_modules/ceres/google')
const src = path.resolve('./node_modules/ceres')
const dest = path.resolve('./src')

function getFiles(src, { filter }, files = []) {
  const list = fs.readdirSync(src)

  list.forEach((file) => {
    const dirFile = path.resolve(src, file)
    const stat = fs.statSync(dirFile)

    if (stat.isDirectory()) {
      getFiles(dirFile, { filter }, files)
    } else {
      if (filter(dirFile)) {
        files.push(dirFile)
      }
    }
  })

  return files
}

function copy(src, dest, { filter, process }) {
  const files = getFiles(src, { filter })

  files.forEach((file) => {
    const content = fs.readFileSync(file, {
      encoding: 'utf-8',
    })

    const newContent = process(content)
    // TODO 更严格的 replace
    const newPath = file.replace(src, dest)

    writeFile(newPath, newContent)
  })
}

copy(src, dest, {
  filter: (file) => {
    if (file.startsWith(googlePath)) {
      return false
    }
    return file.endsWith('.proto')
  },
  process: (content) => replaceContent(content),
})
