const {
  doProtoWithJson,
  getLngPath,
  writeFile,
  getLngIndexPath,
  logError,
} = require('../util')
const _ = require('lodash')
const { lngs } = require('../../config/config')

function generateLngIndex() {
  const imports = _.map(lngs, (lng) => {
    return `import ${lng} from './${lng}.json'`
  })

  const instances = _.map(lngs, (lng) => {
    return `  ${lng},`
  })

  return `import { getLocaleWithModuleMap } from '../../index'
${imports}

const moduleMap: { [key: string]: any } = {
${instances}
}

const getLocale = (text: string): string => {
  return getLocaleWithModuleMap(text, moduleMap)
}

export { getLocale }
`
}

function generateJson(protoNested) {
  const json = {}

  function doEnum(info, pName) {
    _.each(info.values, (v, k) => {
      if (v !== 0) {
        json[`${pName}__${k}`] = ''
      }
    })
  }

  _.forIn(protoNested, (v, k) => {
    if (v.nested) {
      _.forIn(v.nested, (vv, kk) => {
        if (vv.values) {
          doEnum(vv, `${k}_${kk}`)
        }
      })
    }

    if (v.values) {
      doEnum(v, `${k}`)
    }
  })

  return json
}

function getLngJsonMap(protoName) {
  const lngJsonMap = {}

  _.each(lngs, (lng) => {
    let json
    try {
      json = require(getLngPath(protoName, lng))
    } catch (err) {
      json = {}
    }

    lngJsonMap[lng] = json
  })

  return lngJsonMap
}

function buildLng({ protoNested, protoName }) {
  const gJson = generateJson(protoNested)

  const lngJsonMap = getLngJsonMap(protoName)

  _.forIn(lngJsonMap, (lngJson, lng) => {
    _.forIn(lngJson, (v, k) => {
      // key变更移除了
      if (gJson[k] === undefined) {
        lngJson[k] = undefined
      }
      // 权限的不用翻译
      if (k.startsWith('Permission__PERMISSION_')) {
        lngJson[k] = null
      }
    })

    // 已经翻译的不要被覆盖
    const json = _.assign({}, gJson, lngJson)

    const unTranslate = _.pickBy(json, (v) => v === '')
    if (!_.isEmpty(unTranslate)) {
      logError(`未翻译 ${protoName}`)
      logError(JSON.stringify(unTranslate, null, 2))
    }

    writeFile(getLngPath(protoName, lng), JSON.stringify(json, null, 2) + '\n')
  })

  writeFile(getLngIndexPath(protoName), generateLngIndex())
}

doProtoWithJson('lng', buildLng)
