const _ = require('lodash')
const {
  doProtoWithJson,
  writeFile,
  getIndexPath,
  getMethodsPath,
  getTypesPath,
  getDataPath,
} = require('../util')
const generateType = require('./generate_type')
const generateMethod = require('./generate_method')
const generateData = require('./generate_data')
const path = require('path')

function getCreateRequestTypes(protoNested) {
  const createRequestTypes = []
  _.each(protoNested, (info, name) => {
    if (name.startsWith('Create') && name.endsWith('Request')) {
      createRequestTypes.push(name.slice('Create'.length, -'Request'.length))
    }
  })

  return createRequestTypes
}

function buildMethods({ protoNested, protoName }) {
  const contents = [
    `import { Request } from '../util/request'
import {`,
  ]

  _.forIn(protoNested, (info) => {
    if (info.methods) {
      _.keys(info.methods)
      _.forIn(info.methods, (methodInfo, method) => {
        contents.push(`  ${method}Request, ${method}Response,`)
      })
    }
  })

  contents.push(`} from './types'`)

  _.forIn(protoNested, (info, name) => {
    // 方法
    if (info.methods) {
      _.forIn(info.methods, (methodInfo, method) => {
        contents.push(generateMethod(methodInfo, method))
      })
    }
  })

  writeFile(getMethodsPath(protoName), contents.join('\n'))
}

function buildTypes({ projectNested, protoNested, protoName }) {
  const contents = []

  _.each(_.without(_.keys(projectNested), protoName), (key) => {
    contents.push(`import * as ${key} from '../${key}'`)
  })

  const createRequestTypes = getCreateRequestTypes(protoNested)

  _.forIn(protoNested, (info, name) => {
    // 类型 和 枚举
    if (info.fields || info.values) {
      contents.push(generateType({ info, name }))

      // 需要有个 CreateXXX 类型，后台不提供。我们自己生成
      if (createRequestTypes.includes(name)) {
        contents.push(
          generateType({
            info,
            name,
            hasCreateRequestType: true,
          }),
        )
      }
    }
  })

  writeFile(getTypesPath(protoName), contents.join('\n'))
}

function buildData({ protoNested, protoName }) {
  const contents = [`import { getLocale } from './lng'`]
  contents.push(generateData(protoNested))

  writeFile(getDataPath(protoName), contents.join('\n'))
}

function buildIndex({ protoName }) {
  const contents = [
    `export * from './methods'
export * from './types'
export * from './data'
`,
  ]
  writeFile(getIndexPath(protoName), contents.join('\n'))
}

const packageMap = {}
const statusCodes = []

function buildProto({ projectNested, protoNested, protoName }) {
  buildTypes({ projectNested, protoNested, protoName })
  buildMethods({ protoNested, protoName })
  buildData({ protoNested, protoName })
  buildIndex({ protoName })

  packageMap[protoName] = []
  // 表类 message 自成一个 enum，
  _.forIn(protoNested, (info, name) => {
    if (info.fields && !_.isEmpty(info.fields) && info.fields.create_time) {
      packageMap[protoName].push(name)
    }
  })

  // 如果存在 Status.Code 才
  if (protoNested.Status && protoNested.Status.nested.Code) {
    statusCodes.push(protoName)
  }
}

function buildMessageTypes() {
  const contents = []

  contents.push(`export enum PackageName {`)
  _.forIn(packageMap, (_, packageName) => {
    contents.push(`  ${packageName} = '${packageName}',`)
  })
  contents.push(`}`)

  _.forIn(packageMap, (messageNames, packageName) => {
    contents.push([`export enum MessageName_${packageName} {`])

    _.each(messageNames, (message) => {
      contents.push(`  ${message} = '${message}',`)
    })

    contents.push(`}`)
  })

  writeFile(
    path.resolve(__dirname, `../../src/message_types.ts`),
    contents.join('\n'),
  )
}

function buildMapStatusCode() {
  const contents = []

  _.each(statusCodes, (protoName) => {
    contents.push(`import * as ${protoName} from './${protoName}'`)
  })

  contents.push(`
const MapStatus = Object.assign(
  {},`)

  _.each(statusCodes, (protoName) => {
    contents.push(`  ${protoName}.map_Status_Code,`)
  })

  contents.push(`)

export default MapStatus
`)

  writeFile(
    path.resolve(__dirname, `../../src/map_status_code.ts`),
    contents.join('\n'),
  )
}

doProtoWithJson('typescript', buildProto)

// 非单独某个
if (!process.argv[2]) {
  // 生成 message_types
  buildMessageTypes()
  // 生成 map_status_code
  buildMapStatusCode()
}
