const _ = require('lodash')
const { getIsTable, convertType } = require('../util')
const { protoNames } = require('../../config/config')

function dotToUnder(type) {
  const arr = type.split('.')

  if (protoNames.includes(arr[0])) {
    return `${arr[0]}.${arr.slice(1).join('_')}`
  } else {
    return arr.join('_')
  }
}

function getLocal(localsMap, type) {
  let local = ''
  _.forIn(localsMap, (locals, k) => {
    if (locals.includes(type)) {
      local = `${k}_`
    }
  })

  return local
}

// info { values: { DIS_TYPE_NIL: 0, ORDER: 1, DRIVER: 2 } }
// name: DispatchType
// pName: Sku 父类型
function gEnum({ contents, info, name, pName }) {
  const nName = pName ? `${pName}_${name}` : name
  contents.push([`export enum ${nName} {`])

  _.forIn(info.values, (v, k) => {
    contents.push(`  ${k} = ${v},`)
  })

  contents.push('}')
}

// field { type: 'unit64', id: 1, rule: repeated, options }
// fieldName  sku_id
// name Sku
// pName
// locals [ SkuType ]
function gField({
  field,
  fieldName,
  name,
  pName = '',
  localsMap = {},
  isTable,
  hasCreateRequestType,
}) {
  // 默认是可选的
  // 这里是基于规则 required，不能完全覆盖。最真实的还是需要 后台声明 validate
  let required = '?'

  // 在 1 ~ 9 内，xx_id 是 主键，必须
  if (isTable && fieldName.endsWith('_id') && field.id < 10) {
    required = ''
  }

  // 获取 A，这个字段的类型是 A，那么是必填
  if (
    name === `Create${field.type}Response` ||
    name === `Get${field.type}Response` ||
    name === `GetMany${field.type}Response` ||
    name === `List${field.type}Response` ||
    name === `Update${field.type}Response` ||
    name === `Delete${field.type}Response`
  ) {
    required = ''
  }

  // paging 是必填
  if (fieldName === 'paging') {
    required = ''
  }

  if (field.options) {
    // 如果有 (validate.rules)xxxx 就 required
    for (const optionsKey in field.options) {
      if (optionsKey.includes('(validate.rules)')) {
        required = ''
      }
    }
  }

  let disabled = ''
  if (hasCreateRequestType) {
    if (
      fieldName === 'group_id' ||
      fieldName === 'create_time' ||
      fieldName === 'update_time' ||
      fieldName === 'delete_time' ||
      (fieldName.endsWith('_id') && field.id < 10)
    ) {
      disabled = '// '
    }
  }

  let type = convertType(field.type)

  const repeated = field.rule === 'repeated' ? '[]' : ''

  const local = getLocal(localsMap, type)

  if (
    name.startsWith('Create') &&
    name.endsWith('Request') &&
    field.type === name.slice('Create'.length, -'Request'.length)
  ) {
    type = `ReqCreate${field.type}`
  }

  // 把 Sku.Status => Sku_Status
  const nType = dotToUnder(type)

  if (field.keyType) {
    return `  ${disabled}${fieldName}${required}: { [key: string]: ${local}${nType} }`
  } else {
    return `  ${disabled}${fieldName}${required}: ${local}${nType}${repeated}`
  }
}

// info { fields: { sku_id: {type: 'uint64', id: 1} } }
// name Sku
// localTypes = [ SkuType ]
function gType({
  contents,
  info,
  name,
  pName,
  localsMap,
  hasCreateRequestType,
}) {
  let nName = name
  if (pName) {
    nName = `${pName}_${name}`
  }
  if (hasCreateRequestType) {
    // 这样来避免命名冲突
    nName = `ReqCreate${name}`
  }

  contents.push([`export interface ${nName} {`])

  const isTable = getIsTable(info)
  _.each(info.fields, (field, fieldName) => {
    contents.push(
      gField({
        field,
        fieldName,
        name,
        pName,
        localsMap,
        isTable,
        hasCreateRequestType,
      }),
    )
  })

  contents.push('}')
}

function generateTypeNested({ contents, info, name, pName, localsMap }) {
  _.forIn(info.nested, (sInfo, sName) => {
    generateInfo({
      contents,
      info: sInfo,
      name: sName,
      pName: pName ? `${pName}_${name}` : name,
      localsMap,
    })
  })
}

// typeInfo { fields, values, nested }
// name Sku 当前类型
function generateInfo({
  contents,
  info,
  name,
  pName = '',
  // 某某某的局部类型列表
  localsMap = {},
  hasCreateRequestType,
}) {
  localsMap[pName ? `${pName}_${name}` : name] = _.keys(info.nested)

  // 有子类型，持续遍历下去。
  if (info.nested) {
    // hasCreateRequestType 的情况下不需要遍历，只需重复 interface 即可
    if (!hasCreateRequestType) {
      generateTypeNested({
        contents,
        info,
        name,
        pName,
        localsMap,
      })
    }
  }

  // 是 interface
  if (info.fields) {
    gType({
      contents,
      info,
      name,
      pName,
      localsMap,
      hasCreateRequestType,
    })
  }
  // 是  enum
  else if (info.values) {
    gEnum({ contents, info, name, pName })
  }
}

function generateType({ info, name, hasCreateRequestType }) {
  const contents = []
  generateInfo({ contents, info, name, hasCreateRequestType })
  return contents.join('\n')
}

module.exports = generateType
