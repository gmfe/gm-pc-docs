const _ = require('lodash')
const { logError, logWarn, getIsTable } = require('../util')

function checkName(name) {
  if (name[0].toUpperCase() !== name[0]) {
    logError('首字母需大写', name)
  }
}

function checkField(name) {
  if (name.toLowerCase() !== name) {
    logError('需小写', name)
  }
}

function lintEnum(info, name) {
  _.forIn(info.values, (v, k) => {
    if (v === 0) {
      if (
        !k.endsWith('UNSPECIFIED') &&
        !k.endsWith('UNKNOWN') &&
        !k.endsWith('NIL')
      ) {
        logError('0 拼写', name, k)
      }
    }

    if (k.toUpperCase() !== k) {
      logError('需大写', name, k)
    }
  })
}

function lintType(info, name) {
  const isTable = getIsTable(info)
  const isResponse = name.endsWith('Response')

  _.forIn(info.fields, (fieldInfo, field) => {
    checkField(field)

    const { id, rule, type } = fieldInfo

    if (isTable) {
      if (id === 1 && !field.endsWith('_id')) {
        logError('_id 结束', name, field)
      }
      if (field === 'status' && id >= 10) {
        logError('固定 status < 10', name, field)
      }
      if (field === 'revision' && id >= 10) {
        logError('固定 revision < 10', name, field)
      }
      if (field === 'create_time' && id >= 10) {
        logError('固定 create_time < 10', name, field)
      }
      if (field === 'update_time' && id >= 10) {
        logError('固定 update_time < 10', name, field)
      }
      if (field === 'delete_time' && id >= 10) {
        logError('固定 delete_time < 10', name, field)
      }

      if (id >= 10 && id <= 19 && !field.endsWith('_id')) {
        logError('10 ~ 19 需要以 _id 结束', name, field)
      }

      if (id >= 20 && field.endsWith('_id')) {
        logWarn('20 ~ 不建议以 _id 结束', name, field)
      }
    }

    if (rule === 'repeated' && !field.endsWith('s')) {
      logError('repeated 没有 s 结束 ', name, field)
    }

    if (
      (field.endsWith('_id') || field.endsWith('_ids')) &&
      !field.startsWith('need_') &&
      // 是自带的类型
      type[0].toLowerCase() === type[0] &&
      type !== 'uint64'
    ) {
      logError('固定 unit64 xxx_id', name, field, type)
    }

    if (isResponse && fieldInfo.type.includes('PagingParams')) {
      logError('Response 用了 PagingParams', name, field, type)
    }
  })
}

function lintInfo(info, name) {
  checkName(name)

  if (info.nested) {
    _.forIn(info.nested, (v, key) => {
      lintInfo(v, key)
    })
  }

  if (info.fields) {
    lintType(info, name)
  } else if (info.values) {
    lintEnum(info, name)
  }
}

module.exports = lintInfo
