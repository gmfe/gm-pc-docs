const fs = require('fs-extra')
const sh = require('shelljs')
const path = require('path')
const chalk = require('chalk')
const { protoNames } = require('../config/config')
const _ = require('lodash')

function doProto(actionName, buildProtoFun) {
  const inputProtoName = process.argv[2]
  const pNames = inputProtoName ? [inputProtoName] : protoNames

  console.log(`--> ${actionName} proto begin`)

  _.each(pNames, (protoName) => {
    console.log(`${actionName} proto ` + protoName)
    buildProtoFun({ protoName })
  })

  console.log(`--> ${actionName} proto done`)
}

function doProtoWithJson(actionName, buildProtoFun) {
  const projectName = 'ceres'
  doProto(actionName, ({ protoName }) => {
    const p = getProtoPath(protoName)
    const json = require(`${p}.json`)
    const projectNested = json.nested[projectName].nested
    const protoNested = projectNested[protoName].nested

    buildProtoFun({ protoName, protoNested, projectNested, json })
  })
}

// 暂且认为有 create_time 就是数据库表
function getIsTable(info) {
  // 有此代表会落表，否则 create_time 有啥意义呢
  return info.fields.create_time
}

// https://github.com/protobufjs/protobuf.js#usage
function convertType(type) {
  const typeMap = {
    sfixed32: 'number',
    fixed32: 'number',
    uint32: 'number',
    sint32: 'number',
    int32: 'number',

    sfixed64: 'string',
    fixed64: 'string',
    uint64: 'string',
    sint64: 'string',
    int64: 'string',

    float: 'number',
    double: 'number',

    string: 'string',
    bool: 'boolean',

    enum: 'number',

    // 没人用
    // bytes,
  }

  // 替换掉 ceres.
  return typeMap[type] || type.replace('ceres.', '')
}

function writeFile(path, content) {
  fs.mkdirpSync(path.split('/').slice(0, -1).join('/'))

  fs.writeFileSync(path, content, 'utf-8')
}

function shellExec(com) {
  if (sh.exec(com).code !== 0) {
    sh.exit(1)
  }
}

function getCeresCommitId(branch) {
  const hash = sh
    .exec(
      `git ls-remote --heads git@code.guanmai.cn:back_end/ceres.git ${branch}`,
      { silent: true },
    )
    .stdout.slice(0, -1)

  return hash.replace(`refs/heads/${branch}`, '').trim()
}

function getCommitId() {
  const hash = sh
    .exec('git rev-parse HEAD', { silent: true })
    .stdout.slice(0, -1)

  return hash
}

function getProtoPath(protoName) {
  return path.resolve(__dirname, `../src/${protoName}/proto/${protoName}.proto`)
}

function getCeresProtoPath(protoName) {
  return path.resolve(
    __dirname,
    `../node_modules/ceres/${protoName}/proto/${protoName}.proto`,
  )
}

function getIndexPath(protoName) {
  return path.resolve(__dirname, `../src/${protoName}/index.ts`)
}

function getTypesPath(protoName) {
  return path.resolve(__dirname, `../src/${protoName}/types.ts`)
}

function getMethodsPath(protoName) {
  return path.resolve(__dirname, `../src/${protoName}/methods.ts`)
}

function getDataPath(protoName) {
  return path.resolve(__dirname, `../src/${protoName}/data.ts`)
}

function getPcComponentPath(protoName) {
  return path.resolve(__dirname, `../src/${protoName}/pc.tsx`)
}

function getLngPath(protoName, lng) {
  return path.resolve(__dirname, `../src/${protoName}/lng/${lng}.json`)
}

function getLngIndexPath(protoName) {
  return path.resolve(__dirname, `../src/${protoName}/lng/index.ts`)
}

function logWarn(...arg) {
  console.warn(chalk.yellow(...arg))
}

function logError(...arg) {
  console.error(chalk.black.bgRed(...arg))
}

module.exports = {
  doProto,
  doProtoWithJson,
  getIsTable,
  convertType,
  logWarn,
  logError,
  writeFile,
  shellExec,
  getCeresCommitId,
  getCommitId,
  getProtoPath,
  getCeresProtoPath,
  getIndexPath,
  getTypesPath,
  getMethodsPath,
  getDataPath,
  getPcComponentPath,
  getLngPath,
  getLngIndexPath,
}
