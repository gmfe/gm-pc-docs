const argv = require('yargs').argv
const { logWarn, shellExec, getCommitId, getCeresCommitId } = require('./util')
const packageJson = require('../package.json')
const fs = require('fs-extra')
const path = require('path')
const sh = require('shelljs')
const chalk = require('chalk')

/** ceres 的分支 */
const branch = argv.b

if (!branch) {
  logWarn('请提供 -b [ceres branch]')
  process.exit()
}

// gm_api 分支
const apiBranch = branch === 'develop' ? 'master' : branch

// gm_api 的 master 对于 ceres 的 develop
const commitId = getCeresCommitId(branch)

console.log(
  `build:ci ceres branch ${chalk.blue(branch)}. ceres commitId ${chalk.blue(
    commitId,
  )}`,
)

// 更新自己，最新的master
shellExec('git checkout master; git pull;')

if (apiBranch !== 'master') {
  // 切分支，要从master最新切出来，之前有分支也需要移除
  // 如果没有忽略报错
  sh.exec(`git branch -D ${apiBranch}`)
  shellExec(`git checkout -b ${apiBranch}`)
}

// 更新 ceres
packageJson.devDependencies.ceres = `git+ssh://git@code.guanmai.cn:back_end/ceres.git#${commitId}`
fs.writeFileSync(
  path.resolve('./package.json'),
  JSON.stringify(packageJson, null, 2) + '\n',
)

// 更新依赖， ceres 和 其他
shellExec('yarn')

// build
shellExec('yarn run build')

if (apiBranch !== 'master') {
  shellExec(
    `git add --all; git commit -m "WIP: update"; git push origin -f ${apiBranch}:${apiBranch}`,
  )
} else {
  shellExec(
    `git add --all; git commit -m "WIP: update"; git push origin ${apiBranch}:${apiBranch}`,
  )
}

// 在此时获取
const apiCommitId = getCommitId()

// 回到 master
shellExec(`git checkout master;`)

console.log(`gm_api commitId ${chalk.blue(apiCommitId)}`)
