syntax = "proto3";

import "./common/proto/common.proto";

package ceres.idgenerator;
option java_multiple_files = true;
option go_package          = "code.guanmai.cn/back_end/ceres/idgenerator/proto;proto";

service IDGeneratorService {
    // unique id
    rpc GenerateId(GenerateIdRequest) returns (GenerateIdResponse);
    rpc GenerateIds(GenerateIdsRequest) returns (GenerateIdsResponse);

    // serial number
    rpc GenerateSn(GenerateSnRequest) returns (GenerateSnResponse);
    rpc GenerateSns(GenerateSnsRequest) returns (GenerateSnsResponse);

    // composite Id&Sn
    rpc GenerateIdSn(GenerateIdSnRequest) returns (GenerateIdSnResponse);

    // SerialConfig
    rpc UpdateSerialConfig(UpdateSerialConfigRequest) returns (UpdateSerialConfigResponse);
}

// 序列号配置
message SerialConfig {
    // 类型，和ModelType不是一一对应的；新增类型请到serial_config.go的GetSystemSerialConfig增加默认配置
    enum Type {
        TYPE_UNSPECIFIED = 0;

        // 订单
        TYPE_ORDER_ORDER = 100;  // 订单
        TYPE_ORDER_ESHOP = 101;  // eshop订单

        // 进销存 200~299
        // 入库
        TYPE_STOCK_SHEET_PURCHASE_IN = 201;  // 采购入库
        TYPE_STOCK_SHEET_PRODUCT_IN  = 202;  // 生产入库
        TYPE_STOCK_SHEET_MATERIAL_IN = 203;  // 退料入库
        TYPE_STOCK_SHEET_REFUND_IN   = 204;  // 销售退货入库
        TYPE_STOCK_SHEET_TRANSFER_IN = 205;  // 调拨入库 第一期不做
        TYPE_STOCK_SHEET_OTHER_IN    = 206;  // 其他入库
        // 出库
        TYPE_STOCK_SHEET_SALE_OUT     = 207;  // 销售出库
        TYPE_STOCK_SHEET_MATERIAL_OUT = 208;  // 领料出库
        TYPE_STOCK_SHEET_REFUND_OUT   = 209;  // 采购退货出库
        TYPE_STOCK_SHEET_OTHER_OUT    = 210;  // 其他出库
        // 盘点
        TYPE_STOCK_SHEET_INVENTORY = 211;  // 盘点单
        // 周转物类型
        TYPE_STOCK_SHEET_TURNOVER_LOAN   = 212;  // 借出单(客户端表现成记录)
        TYPE_STOCK_SHEET_TURNOVER_REVERT = 213;  // 归还单(客户端表现成记录)

        TYPE_ADJUST_SHEET = 299;  // 调整单

        TYPE_PURCHASE_TASK  = 300;  //采购任务
        TYPE_PURCHASE_SHEET = 301;  //采购单

        TYPE_PRODUCTION_TASK_PACK    = 320;  //包装任务
        TYPE_PRODUCTION_TASK_PRODUCT = 321;  //生产任务
        TYPE_PRODUCTION_TASK_SHEET   = 322;  //任务单据
        TYPE_PRODUCTION_TASK_WEIGHT  = 323;  //定重编码

        TYPE_FINANCE_SETTLE           = 400;  // 供应商结算单据编码
        TYPE_FINANCE_AMOUNT_DISCOUNT  = 401;  // 金额折让
        TYPE_FINANCE_TRANSACTION_FLOW = 402;  // 交易流水
        TYPE_FINANCE_ACCOUNT_BALANCE  = 403;  // 账户余额
        TYPE_FINANCE_CUSTOMER_SETTLE  = 404;
        TYPE_FINANCE_SUPPLIER_SETTLE  = 405;

        // 售后
        TYPE_AFTER_SALE_ORDER = 500;  // 售后订单
    }

    // 分段类型
    enum SegmentationType {
        SEGMENTATION_TYPE_UNSPECIFIED = 0;

        SEGMENTATION_TYPE_YYYYMMDD = 1;
        SEGMENTATION_TYPE_YYMMDD   = 2;
    }

    // @inject_tag: gorm:"PRIMARY_KEY;AUTO_INCREMENT:false"
    uint64 scope = 1;  // 作用域，一般是group_id

    // @inject_tag: gorm:"PRIMARY_KEY;AUTO_INCREMENT:false"
    Type serial_type = 2;  // 数据类型

    SegmentationType segmentation_type = 20;  // 分段类型
    string timezone                    = 21;  // 时区，形如"Asia/Shanghai"，参考https://en.wikipedia.org/wiki/List_of_tz_database_time_zones
    string prefix                      = 22;  // 前缀
    uint32 sequence_width              = 23;  // 序列号位数
    uint32 sequence_min                = 24;  // 序列号最小值
    uint32 sequence_max                = 25;  // 序列号最大值
}

// 序列号分配状态
message SerialSegmentation {
    // @inject_tag: gorm:"PRIMARY_KEY;AUTO_INCREMENT:false"
    uint64 scope = 1;  // 作用域

    // @inject_tag: gorm:"PRIMARY_KEY;AUTO_INCREMENT:false"
    SerialConfig.Type serial_type = 2;  // 数据类型

    // @inject_tag: gorm:"PRIMARY_KEY;AUTO_INCREMENT:false"
    uint32 segmentation = 3;  // 分段

    uint32 sequence = 20;  // 分段内已分配序号
}

message GenerateIdRequest {
    common.Model.Type model_type = 1;
}

message GenerateIdResponse {
    uint64 id = 1;
}

message GenerateIdsRequest {
    common.Model.Type model_type = 1;
    uint32 count                 = 2;
}

message GenerateIdsResponse {
    repeated uint64 ids = 1;
}

message GenerateSnRequest {
    uint64 scope                  = 1;
    SerialConfig.Type serial_type = 2;
    uint64 timestamp              = 3;  // 时间戳，毫秒，不传则使用当前时间
}

message GenerateSnResponse {
    string sn = 1;
}

message GenerateSnsRequest {
    uint64 scope                  = 1;
    SerialConfig.Type serial_type = 2;
    uint64 timestamp              = 3;  // 时间戳，毫秒，不传则使用当前时间
    uint32 count                  = 4;
}

message GenerateSnsResponse {
    repeated string sns = 1;
}

message GenerateIdSnRequest {
    GenerateIdRequest id_request = 1;
    GenerateSnRequest sn_request = 2;
}

message GenerateIdSnResponse {
    GenerateIdResponse id_response = 1;
    GenerateSnResponse sn_response = 2;
}

message UpdateSerialConfigRequest {
    SerialConfig config = 1;
}

message UpdateSerialConfigResponse {
}
