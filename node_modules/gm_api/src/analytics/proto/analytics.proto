syntax = "proto3";

package ceres.analytics;
option  java_multiple_files = true;
option  go_package          = "code.guanmai.cn/back_end/ceres/analytics/proto;proto";

import "./google/api/annotations.proto";
import "./include/protoc-gen-validate/validate.proto";

import "./common/proto/common.proto";
import "./enterprise/proto/enterprise.proto";
import "./order/proto/order.proto";
import "./production/proto/production.proto";

service AnalyticsService {
    // 修复数据，不会影响DataSequence
    rpc Patch(PatchRequest) returns (PatchResponse);

    // 用户查询，检查并限制group_id
    rpc Query(QueryRequest) returns (QueryResponse) {
        option (google.api.http) = {
            post : "/ceres/analytics/AnalyticsService/Query"
        };
    }

    // 系统查询
    rpc SysQuery(SysQueryRequest) returns (SysQueryResponse) {
        option (google.api.http) = {
            post : "/ceres/analytics/AnalyticsService/SysQuery"
        };
    }

    // 重置数据
    rpc SysReset(SysResetRequest) returns (SysResetResponse) {
        option (google.api.http) = {
            post : "/ceres/analytics/AnalyticsService/SysReset"
        };
    }
}

/*
数据模型从业务模块中抄过来，不支持内嵌结构
field number尽可能和原proto保持一致，故不要求连续
字段标签请参考README
*/

message DataSequence {
    // @inject_tag: gorm:"PRIMARY_KEY;AUTO_INCREMENT:false"
    common.Model.Type model_type = 1;
    // @inject_tag: gorm:"PRIMARY_KEY;AUTO_INCREMENT:false;DEFAULT:0"
    uint64 partition_id = 2;
    uint64 sequence     = 3; // 已同步的版本
    uint64 update_time  = 4; // 数据更新时间
}

message PatchRequest {
    common.Model.Type model_type = 1; // 根据ModelType取下面的数据

    repeated uint64 created_ids = 2;
    repeated uint64 updated_ids = 3;
    repeated uint64 deleted_ids = 4;
}

message PatchResponse {
}

message FieldExpr {
    string name = 1; // 字段名
    string expr = 2; // 表达式，如果为空则使用name；返回的值会被转换为字段对应类型，即使是表达式是count
}
message FieldValue {
    string name  = 1;
    string value = 2;
}

message ModelValue {
    repeated FieldValue field_values = 1;
    map<string, string> kv           = 2; // 用于快捷访问，而不一定要使用下标，k只有name(没有expr部分)，v即FieldValue.value
}

message QueryExpr {
    common.Model.Type model_type = 1;

    string             filter_string    = 10; // where语句使用?占位符；要用proto设计符合SQL规范的过滤规则器过于复杂，直接用string拉倒
    repeated FieldExpr filter_arguments = 11; // where参数用于填充占位符，须指定fieldname，看起来有点多余，但某些类型要做转换
    repeated FieldExpr query_fields     = 12;
    repeated FieldExpr group_by_fields  = 13;
    repeated FieldExpr order_by_fields  = 14;
    uint32             offset           = 15;
    uint32             limit            = 16;
}

message QueryData {
    repeated ModelValue model_values = 1;
    uint64              update_time  = 2; // 统计更新时间
    uint32              count        = 3; // 总数，offset为0才会返回
    bool                has_more     = 4; // 是否还有下一页
}

message QueryRequest {
    QueryExpr expr = 1;
}

message QueryResponse {
    QueryData data = 1;
}

message SysQueryRequest {
    QueryExpr expr = 1;
}

message SysQueryResponse {
    QueryData data = 1;
}

message SysResetRequest {
    common.Model.Type model_type = 1;
}

message SysResetResponse {
}

// 测试模型
message Example {
    // @inject_tag: order_by:"3"
    uint64 example_id = 1;
    uint64 status     = 2;
    uint64 revision   = 3;
    // @inject_tag: order_by:"1" type:"DateTime('Asia/Shanghai')"
    uint64 create_time = 4;
    // @inject_tag: type:"DateTime('Asia/Shanghai')"
    uint64 update_time = 5;
    // @inject_tag: type:"DateTime('Asia/Shanghai')"
    uint64 delete_time = 6;

    // @inject_tag: order_by:"2"
    uint64 group_id    = 10;
    uint64 customer_id = 11;

    // @inject_tag: type:"Decimal(18,8)"
    string price = 20;
    // @inject_tag: type:"Decimal(18,8)"
    string quantity = 21;
}

// 订单
message Order {
    // @inject_tag: order_by:"3"
    uint64 order_id = 1;
    uint64 status   = 2; // bitmap，一些bool状态
    uint64 revision = 3; // 版本
    // @inject_tag: type:"DateTime('Asia/Shanghai')" order_by:"2"
    uint64 create_time = 4; // 创建时间
    // @inject_tag: type:"DateTime('Asia/Shanghai')"
    uint64 update_time = 5; // 修改时间
    // @inject_tag: type:"DateTime('Asia/Shanghai')"
    uint64 delete_time = 6; // 清理数据的时间，业务状态的删除不会改变这个值

    // @inject_tag: order_by:"1"
    uint64                   group_id            = 10;
    uint64                   station_id          = 11;
    uint64                   creator_id          = 12;
    uint64                   bill_customer_id    = 13;
    uint64                   receive_customer_id = 14;
    uint64                   driver_id           = 15;
    uint64                   service_period_id   = 16;
    uint64                   quotation_id        = 17;
    enterprise.Customer.Type customer_type       = 18;

    // 订单金额相关
    // @inject_tag: type:"Decimal(18,8)"
    string order_price = 40; // 下单金额，订单详情的order_price汇总
    // @inject_tag: type:"Decimal(18,8)"
    string freight_price = 41; // 运费金额，正数:补交，非负数
    // @inject_tag: type:"Decimal(18,8)"
    string aftersale_price = 42; // 售后金额，正负数，正数:补交，负数：退钱，异常单据的汇总
    // @inject_tag: type:"Decimal(18,8)"
    string outstock_price = 43; // 出库金额，
    // @inject_tag: type:"Decimal(18,8)"
    string coupon_price = 44; // 优惠券金额，负数
    // @inject_tag: type:"Decimal(18,8)"
    string manual_adjust_price = 45; // 手动调整金额，正负数
    // @inject_tag: type:"Decimal(18,8)"
    string sale_price = 46; // 销售金额(也就是用户应付金额)（outstock_price+aftersale_price+coupon_price+freight_price+manual_adjust_price）

    // 支付相关
    // @inject_tag: type:"Decimal(18,8)"
    string paid_amount = 50; // 累计支付金额
    // @inject_tag: type:"Decimal(18,8)"
    string refund_amount = 51; // 累计退款金额
    // @inject_tag: type:"Decimal(18,8)"
    string actual_amount = 52; // 实际支付金额（paid_amount-refund_amount）

    // 时间相关
    // @inject_tag: type:"DateTime('Asia/Shanghai')"
    uint64 receive_time = 60; // 收货时间
    // @inject_tag: type:"DateTime('Asia/Shanghai')"
    uint64 outstock_time = 61; // 出库时间
    // @inject_tag: type:"DateTime('Asia/Shanghai')"
    uint64 order_time = 62; // 下单时间
    // @inject_tag: type:"DateTime('Asia/Shanghai')"
    uint64 received_time = 63; // 签收时间
    string time_zone     = 64; // 时区，比如 "Asia/Shanghai"

    string               serial_no       = 70;
    order.Order.State    state           = 71;
    order.Order.PayState pay_state       = 72;
    bool                 has_after_sale  = 73; // 是否有异常，用于快速搜索
    order.Order.Type     order_type      = 77; // 订单类型
    order.Order.UserType creator_id_type = 78; // 用户类型
    common.App.Type      app_type        = 80; // 下单客户端
    order.Order.OrderOp  order_op        = 82; // 通过什么类型的操作来下的单

    // 分拣相关
    uint32 sorting_total_count     = 85; // 总分拣任务数
    uint32 sorting_weight_count    = 86; // 已称重任务数
    uint32 sorting_out_stock_count = 87; // 缺货任务数
    uint32 sorting_unweight_count  = 88; // 未称重任务数

    uint64 city_id     = 203; // 市级行政区
    uint64 district_id = 204; // 县级行政区
    uint64 street_id   = 205; // 街道级行政区

    uint64 customer_id_l1 = 206; // 客户层级1
    uint64 customer_id_l2 = 207; // 客户层级2
    uint64 customer_id_l3 = 208; // 客户层级3
    uint64 customer_id_l4 = 209; // 客户层级4
    uint64 customer_id_l5 = 210; // 客户层级5
}

// 订单详情
message OrderDetail {
    // @inject_tag: order_by:"4"
    uint64 order_detail_id = 1; // 确定多sku的哪一个sku
    uint64 status          = 2; // bitmap，一些bool状态
    uint64 revision        = 3; // 版本
    // @inject_tag: type:"DateTime('Asia/Shanghai')" order_by:"2"
    uint64 create_time = 4; // 创建时间
    // @inject_tag: type:"DateTime('Asia/Shanghai')"
    uint64 update_time = 5; // 修改时间
    // @inject_tag: type:"DateTime('Asia/Shanghai')"
    uint64 delete_time = 6; // 清理数据的时间，业务状态的删除不会改变这个值

    // @inject_tag: order_by:"1"
    uint64 group_id = 10;
    // @inject_tag: order_by:"3"
    uint64 order_id            = 11; // Order.id
    uint64 sku_id              = 12; // 用于搜索
    uint64 bom_id              = 13; // 包装bomid
    uint64 bom_revision        = 14; // 包装bom快照
    uint64 sorting_operater_id = 15; // 分拣操作员
    uint64 sorting_mark_id     = 16; // 分拣标签

    // 价格
    // @inject_tag: type:"Decimal(18,8)"
    string order_price = 40; // 下单金额
    // @inject_tag: type:"Decimal(18,8)"
    string aftersale_price = 41; // 售后金额，正负数
    // @inject_tag: type:"Decimal(18,8)"
    string outstock_price = 42; // 出库金额
    // @inject_tag: type:"Decimal(18,8)"
    string manual_adjust_price = 43; // 手动调整金额，正负数
    // @inject_tag: type:"Decimal(18,8)"
    string sale_price = 44; // 销售金额(也就是用户应付金额)（outstock_price+aftersale+manual_adjust_price）

    string                  ssu_id           = 54; // sku_id_unit_id
    order.SortingStatus     sorting_status   = 55; // 分拣状态
    uint64                  purchase_task_id = 60; // 采购任务ID
    order.OrderDetail.State state            = 64;

    // 展开的字段，and自己加的字段
    uint64 unit_id            = 200; // 包装单位
    string ssu_customize_code = 203; // ssu的编码
    // 数量
    uint64 order_input1_unit_id = 204;
    // @inject_tag: type:"Decimal(18,8)"
    string order_input1_quantity = 205;
    // @inject_tag: type:"Decimal(18,8)"
    string order_input1_price = 206;

    uint64 order_calculate_unit_id = 207;
    // @inject_tag: type:"Decimal(18,8)"
    string order_calculate_quantity = 208;
    // @inject_tag: type:"Decimal(18,8)"
    string order_calculate_price = 209;

    uint64 outstock_input1_unit_id = 210;
    // @inject_tag: type:"Decimal(18,8)"
    string outstock_input1_quantity = 211;
    // @inject_tag: type:"Decimal(18,8)"
    string outstock_input1_price = 212;

    uint64 outstock_calculate_unit_id = 213;
    // @inject_tag: type:"Decimal(18,8)"
    string outstock_calculate_quantity = 214;
    // @inject_tag: type:"Decimal(18,8)"
    string outstock_calculate_price = 215;

    uint64 sorting_input1_unit_id = 216;
    // @inject_tag: type:"Decimal(18,8)"
    string sorting_input1_quantity = 217;
    // @inject_tag: type:"Decimal(18,8)"
    string sorting_input1_price = 218;

    uint64 sorting_calculate_unit_id = 219;
    // @inject_tag: type:"Decimal(18,8)"
    string sorting_calculate_quantity = 220;
    // @inject_tag: type:"Decimal(18,8)"
    string sorting_calculate_price = 221;
}

// 生产任务及产出，每种output一行
message Task {
    // @inject_tag: gorm:"PRIMARY_KEY;AUTO_INCREMENT:false" order_by:"3"
    uint64 task_id = 1;
    // @inject_tag: type:"DateTime('Asia/Shanghai')" order_by:"2"
    uint64 create_time = 6;
    // @inject_tag: type:"DateTime('Asia/Shanghai')"
    uint64 update_time = 7;
    // @inject_tag: type:"DateTime('Asia/Shanghai')"
    uint64 delete_time = 8;

    // @inject_tag: order_by:"1"
    uint64 group_id   = 10;
    uint64 station_id = 11;

    uint64 sku_id   = 20 [ (validate.rules).uint64 = {gt : 0} ]; // 成品ID
    string sku_name = 21;                                        // 成品名
    uint64 unit_id  = 22 [ (validate.rules).uint64 = {gt : 0} ]; // 单位ID

    uint64 bom_id       = 30;
    string bom_name     = 31;
    uint64 bom_revision = 32; // bom版本
    string serial_no    = 33; // 任务编号
    string batch        = 34; // 波次信息
    // @inject_tag: type:"DateTime('Asia/Shanghai')"
    uint64 delivery_time = 35; // 计划交期
    // @inject_tag: type:"DateTime('Asia/Shanghai')"
    uint64 release_time = 36; // 下达时间
    // @inject_tag: type:"DateTime('Asia/Shanghai')"
    uint64                finish_time = 37; // 完成时间
    production.Task.State state       = 38; // 计划状态（未下达，进行中，已完成）
    production.Task.Type  type        = 39; // 计划类型（1：生产任务；2：包装任务）
    // @inject_tag: gorm:"type:Decimal(18,8)" type:"Decimal(18,8)"
    string order_amount = 40 [ (validate.rules).string = {pattern : "^\\d+\\.?\\d*$"} ]; // 需求数
    // @inject_tag: gorm:"type:Decimal(18,8)" type:"Decimal(18,8)"
    string plan_amount = 41 [ (validate.rules).string = {pattern : "^\\d*\\.?\\d*$"} ]; // 计划数
    // @inject_tag: gorm:"type:Decimal(18,8)" type:"Decimal(18,8)"
    string output_amount = 42 [ (validate.rules).string = {pattern : "^\\d*\\.?\\d*$"} ]; // 产出数
    uint64 base_unit_id  = 43;                                                            // 基本单位(包装bom里记录sku的基本单位)
    // @inject_tag: gorm:"type:Decimal(18,8)" type:"Decimal(18,8)"
    string                 base_unit_output_amount = 44 [ (validate.rules).string = {pattern : "^\\d*\\.?\\d*$"} ]; // 基本单位产出数
    production.Task.Source source                  = 45;                                                            // 来源（订单、预加工单）
    uint64                 target_customer_id      = 47;                                                            // 任务对象
    uint64                 last_process_id         = 48;                                                            // 最后一道工序的ID，最后一道工序的产出就是成品
    // @inject_tag: gorm:"type:Decimal(18,8);DEFAULT:0" type:"Decimal(18,8)"
    string input_receive_total_price = 49; // 领料总金额
    // @inject_tag: gorm:"type:Decimal(18,8);DEFAULT:0" type:"Decimal(18,8)"
    string input_return_total_price = 50; // 退料总金额
    // @inject_tag: gorm:"type:Decimal(18,8);DEFAULT:0" type:"Decimal(18,8)"
    string input_actual_usage_total_price = 51; // 实际用料总金额
}

// 任务原料信息
message TaskInput {
    // @inject_tag: gorm:"PRIMARY_KEY" order_by:"3"
    uint64 task_input_id = 1;
    // @inject_tag: type:"DateTime('Asia/Shanghai')" order_by:"2"
    uint64 create_time = 6;
    // @inject_tag: type:"DateTime('Asia/Shanghai')"
    uint64 update_time = 7;
    // @inject_tag: type:"DateTime('Asia/Shanghai')"
    uint64 delete_time = 8;

    // @inject_tag: order_by:"1"
    uint64 group_id   = 10;
    uint64 station_id = 11;
    uint64 task_id    = 12;

    uint64 sku_id   = 20; // 原料ID
    string sku_name = 21;
    uint64 unit_id  = 22;

    // @inject_tag: gorm:"type:Decimal(18,8)" type:"Decimal(18,8)"
    string plan_usage_amount = 30 [ (validate.rules).string = {pattern : "^\\d*\\.?\\d*$"} ]; // 计划用料数
    // @inject_tag: gorm:"type:Decimal(18,8)" type:"Decimal(18,8)"
    string actual_usage_amount = 31 [ (validate.rules).string = {pattern : "^\\d*\\.?\\d*$"} ]; // 实际用料数
    // @inject_tag: gorm:"type:Decimal(18,8)" type:"Decimal(18,8)"
    string receive_amount = 32 [ (validate.rules).string = {pattern : "^\\d*\\.?\\d*$"} ]; // 领料数
    // @inject_tag: gorm:"type:Decimal(18,8)" type:"Decimal(18,8)"
    string                       return_amount = 33 [ (validate.rules).string = {pattern : "^\\d*\\.?\\d*$"} ]; // 退料数
    production.TaskInput.Towards towards       = 34;
    // @inject_tag: gorm:"type:Decimal(18,8);DEFAULT:0" type:"Decimal(18,8)"
    string receive_total_price = 35; // 收货总金额
    // @inject_tag: gorm:"type:Decimal(18,8);DEFAULT:0" type:"Decimal(18,8)"
    string return_total_price = 36; // 退货总金额
    // @inject_tag: gorm:"type:Decimal(18,8);DEFAULT:0" type:"Decimal(18,8)"
    string actual_usage_total_price = 37; // 实际用料总金额

    uint64 bom_id = 10000; // 包装bomid
}

// 任务产出
message TaskOutput {
    // @inject_tag: gorm:"PRIMARY_KEY" order_by:"3"
    uint64 task_output_id = 1;
    // @inject_tag: type:"DateTime('Asia/Shanghai')" order_by:"2"
    uint64 create_time = 6;
    uint64 update_time = 7;
    uint64 delete_time = 8;

    // @inject_tag: order_by:"1"
    uint64 group_id   = 10;
    uint64 station_id = 11;

    // @inject_tag: order_by:"4"
    uint64                      sku_id   = 20 [ (validate.rules).uint64 = {gt : 0} ]; // 成品ID
    string                      sku_name = 21;                                        // 成品名
    production.OutputType       type     = 22;
    production.TaskOutput.State state    = 23;

    uint64 unit_id = 25 [ (validate.rules).uint64 = {gt : 0} ]; // 单位ID
    // @inject_tag: gorm:"type:Decimal(18,8)" type:"Decimal(18,8)"
    string output_amount = 26 [ (validate.rules).string = {pattern : "^\\d*\\.?\\d*$"} ];
    uint64 base_unit_id  = 27 [ (validate.rules).uint64 = {gt : 0} ]; // 基本单位(包装bom里记录sku的基本单位)
    // @inject_tag: gorm:"type:Decimal(18,8)" type:"Decimal(18,8)"
    string base_unit_output_amount = 28 [ (validate.rules).string = {pattern : "^\\d*\\.?\\d*$"} ]; // 基本单位产出数

    uint64               task_id        = 30;
    string               task_serial_no = 31;
    production.Task.Type task_type      = 32;
    // @inject_tag: type:"DateTime('Asia/Shanghai')"
    uint64 delivery_time = 33; // 计划交期
    // @inject_tag: type:"DateTime('Asia/Shanghai')"
    uint64 release_time = 34; // 下达时间

    uint64 bom_id = 10000; // 包装bomid
}
