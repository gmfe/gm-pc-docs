
syntax = "proto3";

package ceres.wechatwork;

import "./google/api/annotations.proto";

option go_package = "code.guanmai.cn/back_end/ceres/wechatwork/proto;proto";

service WechatWorkService {
    rpc GetLoginQR(GetLoginQRRequest) returns (GetLoginQRResponse) {
        option (google.api.http) = {
            post : "/ceres/wechatwork/WechatWorkService/GetLoginQR"
        };
    }

    rpc GetJwtToken(GetJwtTokenRequest) returns (GetJwtTokenResponse) {
        option (google.api.http) = {
            post : "/ceres/wechatwork/WechatWorkService/GetJwtToken"
        };
    }

    rpc RefreshJwtToken(RefreshJwtTokenRequest) returns (RefreshJwtTokenResponse) {
        option (google.api.http) = {
            post : "/ceres/wechatwork/WechatWorkService/RefreshJwtToken"
        };
    }
}

enum WechatWorkApp {
    WECHAT_WORK_APP_UNSPECIFIED = 0;
    WECHAT_WORK_APP_BOSS        = 1;
}

message WechatWorkUser {
    string name  = 1; // 企业微信用户姓名
    string phone = 2; // 企业微信用户手机
}

message JwtPlayload {
    WechatWorkUser user         = 1;
    uint64         expired_time = 2; // 这个 jwt token 在哪个时间点会过期
}

message GetLoginQRRequest {
    WechatWorkApp app          = 1;
    string        redirect_url = 2; // 用户扫码登录后重定向到这个 URL
}
message GetLoginQRResponse {
    string url = 1; // 用于扫码登录的 URL
}

message GetJwtTokenRequest {
    string callback_code = 1; // 当用户完成扫码登录后，企业微信会重定向到 GetLoginQRRequest.redirect_url 中，并在 query 中包含一个 code 字段。callback_code 就对应企业微信返回的 code 字段的值。
}
message GetJwtTokenResponse {
    string      jwt_token = 1;
    JwtPlayload playload  = 2; // jwt_token 中包含的 playload 信息。也可以按照 jwt 规范从 jwt_token 中解码出来，但是在这里直接返回的话方便使用 protobuf 去描述这个结构。
}

message RefreshJwtTokenRequest {
    string jwt_token = 1;
}
message RefreshJwtTokenResponse {
    string      jwt_token = 1;
    JwtPlayload playload  = 2;
}
