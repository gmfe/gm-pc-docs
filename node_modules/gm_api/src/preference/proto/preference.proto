syntax = "proto3";

package ceres.preference;
option  java_multiple_files = true;
option  go_package          = "code.guanmai.cn/back_end/ceres/preference/proto;proto";

import "./include/protoc-gen-validate/validate.proto";
import "./google/api/annotations.proto";
import "./cmd/protoc-gen-dao/proto/dao.proto";
import "./common/proto/common.proto";
import "./common/proto/options.proto";
import "./merchandise/proto/merchandise.proto";
import "./enterprise/proto/enterprise.proto";

service PreferenceService {
    rpc CreateInventorySettings(CreateInventorySettingsRequest) returns (CreateInventorySettingsResponse) {
        option (google.api.http) = {
            post : "/ceres/preference/PreferenceService/CreateInventorySettings"
        };
    }
    rpc UpdateInventorySettings(UpdateInventorySettingsRequest) returns (UpdateInventorySettingsResponse) {
        option (google.api.http) = {
            post : "/ceres/preference/PreferenceService/UpdateInventorySettings"
        };
    }
    rpc GetInventorySettings(GetInventorySettingsRequest) returns (GetInventorySettingsResponse) {
        option (google.api.http) = {
            post : "/ceres/preference/PreferenceService/GetInventorySettings"
        };
    }

    rpc ListPrintingTemplate(ListPrintingTemplateRequest) returns (ListPrintingTemplateResponse) {
        option (google.api.http) = {
            post : "/ceres/preference/PreferenceService/ListPrintingTemplate"
        };
    }
    rpc GetPrintingTemplate(GetPrintingTemplateRequest) returns (GetPrintingTemplateResponse) {
        option (google.api.http) = {
            post : "/ceres/preference/PreferenceService/GetPrintingTemplate"
        };
    }
    rpc GetDefaultPrintingTemplate(GetDefaultPrintingTemplateRequest) returns (GetDefaultPrintingTemplateResponse) {
        option (google.api.http) = {
            post : "/ceres/preference/PreferenceService/GetDefaultPrintingTemplate"
        };
    }
    rpc CreatePrintingTemplate(CreatePrintingTemplateRequest) returns (CreatePrintingTemplateResponse) {
        option (google.api.http) = {
            post : "/ceres/preference/PreferenceService/CreatePrintingTemplate"
        };
        option (common.options.annotation) = {
            codes : "DUPLICATE_PRINTING_TEMPLATE_NAME"
        };
    }
    rpc UpdatePrintingTemplate(UpdatePrintingTemplateRequest) returns (UpdatePrintingTemplateResponse) {
        option (google.api.http) = {
            post : "/ceres/preference/PreferenceService/UpdatePrintingTemplate"
        };
        option (common.options.annotation) = {
            codes : "DUPLICATE_PRINTING_TEMPLATE_NAME"
        };
    }
    rpc DeletePrintingTemplate(DeletePrintingTemplateRequest) returns (DeletePrintingTemplateResponse) {
        option (google.api.http) = {
            post : "/ceres/preference/PreferenceService/DeletePrintingTemplate"
        };
    }
    rpc SelectPrintingTemplate(SelectPrintingTemplateRequest) returns (SelectPrintingTemplateResponse) {
        option (google.api.http) = {
            post : "/ceres/preference/PreferenceService/SelectPrintingTemplate"
        };
    }
    rpc GetPrintingTemplateRelation(GetPrintingTemplateRelationRequest) returns (GetPrintingTemplateRelationResponse) {
        option (google.api.http) = {
            post : "/ceres/preference/PreferenceService/GetPrintingTemplateRelation"
        };
    }
    rpc UpdatePrintingTemplateRelation(UpdatePrintingTemplateRelationRequest) returns (UpdatePrintingTemplateRelationResponse) {
        option (google.api.http) = {
            post : "/ceres/preference/PreferenceService/UpdatePrintingTemplateRelation"
        };
        option (common.options.annotation) = {
            codes : "PRINT_TEMPLATE_RELATION_DUPLICATE"
        };
    }

    rpc UpdatePurchaseSettings(UpdatePurchaseSettingsRequest) returns (UpdatePurchaseSettingsResponse) {
        option (google.api.http) = {
            post : "/ceres/preference/PreferenceService/UpdatePurchaseSettings"
        };
    }
    rpc GetPurchaseSettings(GetPurchaseSettingsRequest) returns (GetPurchaseSettingsResponse) {
        option (google.api.http) = {
            post : "/ceres/preference/PreferenceService/GetPurchaseSettings"
        };
    }

    rpc UpdateAppointTimeSettings(UpdateAppointTimeSettingsRequest) returns (UpdateAppointTimeSettingsResponse) {
        option (google.api.http) = {
            post : "/ceres/preference/PreferenceService/UpdateAppointTimeSettings"
        };
    }

    rpc GetAppointTimeSettings(GetAppointTimeSettingsRequest) returns (GetAppointTimeSettingsResponse) {
        option (google.api.http) = {
            post : "/ceres/preference/PreferenceService/GetAppointTimeSettings"
        };
    }

    rpc UpdateSortingSettings(UpdateSortingSettingsRequest) returns (UpdateSortingSettingsResponse) {
        option (google.api.http) = {
            post : "/ceres/preference/PreferenceService/UpdateSortingSettings"
        };
    }
    rpc GetSortingSettings(GetSortingSettingsRequest) returns (GetSortingSettingsResponse) {
        option (google.api.http) = {
            post : "/ceres/preference/PreferenceService/GetSortingSettings"
        };
    }

    rpc UpdateProductionSettings(UpdateProductionSettingsRequest) returns (UpdateProductionSettingsResponse) {
        option (google.api.http) = {
            post : "/ceres/preference/PreferenceService/UpdateProductionSettings"
        };
    }
    rpc GetProductionSettings(GetProductionSettingsRequest) returns (GetProductionSettingsResponse) {
        option (google.api.http) = {
            post : "/ceres/preference/PreferenceService/GetProductionSettings"
        };
    }

    // 获取转换时间配对
    rpc GetManyAppointTimePair(GetManyAppointTimePairRequest) returns (GetManyAppointTimePairResponse) {
        option (google.api.http) = {
            post : "/ceres/preference/PreferenceService/GetManyAppointTimePair"
        };
    }

    rpc GetPrecisionSettings(GetPrecisionSettingsRequest) returns (GetPrecisionSettingsResponse) {
        option (google.api.http) = {
            post : "/ceres/preference/PreferenceService/GetPrecisionSettings"
        };
    }

    // 商城
    rpc GetShop(GetShopRequest) returns (GetShopResponse) {
        option (google.api.http) = {
            post : "/ceres/preference/PreferenceService/GetShop"
        };
    }
    rpc ListShop(ListShopRequest) returns (ListShopResponse) {
        option (google.api.http) = {
            post : "/ceres/preference/PreferenceService/ListShop"
        };
    }
    rpc CreateShop(CreateShopRequest) returns (CreateShopResponse) {
        option (google.api.http) = {
            post : "/ceres/preference/PreferenceService/CreateShop"
        };
    }
    rpc UpdateShop(UpdateShopRequest) returns (UpdateShopResponse) {
        option (google.api.http) = {
            post : "/ceres/preference/PreferenceService/UpdateShop"
        };
    }
    rpc ListShopBanner(ListShopBannerRequest) returns (ListShopBannerResponse) {
        option (google.api.http) = {
            post : "/ceres/preference/PreferenceService/ListShopBanner"
        };
    }
    rpc CreateShopBanner(CreateShopBannerRequest) returns (CreateShopBannerResponse) {
        option (google.api.http) = {
            post : "/ceres/preference/PreferenceService/CreateShopBanner"
        };
    }
    rpc DeleteShopBanner(DeleteShopBannerRequest) returns (DeleteShopBannerResponse) {
        option (google.api.http) = {
            post : "/ceres/preference/PreferenceService/DeleteShopBanner"
        };
    }

    // 根据当前的第三方应用信息获取一些基本的关联关系（group_id 等）。这个接口不校验登录态。
    rpc GetApplicationRelation(GetApplicationRelationRequest) returns (GetApplicationRelationResponse) {
        option (google.api.http) = {
            post : "/ceres/preference/PreferenceService/GetApplicationRelation"
        };
    }
    rpc ListApplication(ListApplicationRequest) returns (ListApplicationResponse);
}

// gRPC status code
message Status {
    enum Code {
        CODE_UNSPECIFIED                      = 0;
        INVENTORY_SETTINGS_DUPLICATE_SETTINGS = 20190001; // 站点重复创建配置
        DUPLICATE_PRINTING_TEMPLATE_NAME      = 20190002; // PrintingTemplate.name 重复
        PRINTING_TEMPLATE_RELATION_DUPLICATE  = 20190003; // 打印模板绑定关系重复
    }

    message DuplicatePrintingTemplateNameDetail {
        // 和哪一个打印模版的名字相同
        uint64 printing_template_id = 1;
    }

    message PrintingTemplateRelationDuplicateDetail {
        message Detail {
            string template_name = 1;
            string customer_name = 2;
            string sku_name      = 3;
        }
        repeated Detail details = 1;
    }
}

// 打印模版
message PrintingTemplate {
    option (dao.partition_count) = 100;
    option (dao.model_type)      = TYPE_PREFERENCE_PRINTING_TEMPLATE;

    message Attrs {
        string layout = 1; // 具体的模版排版设置，由前端维护
        // repeated uint64 customer_ids = 2; // Customer Id （这里还没定，暂时不要用这个字段）
    }

    enum Direction {
        DIRECTION_UNSPECIFIED = 0;
        DIRECTION_HORIZONTAL  = 1; // 横向
        DIRECTION_VERTICAL    = 2; // 纵向
    }

    enum Type {
        TYPE_UNSPECIFIED    = 0;
        TYPE_PURCHASE_TASK  = 1; // 采购计划
        TYPE_INNER_LABEL    = 2; // 内标
        TYPE_OUT_STOCK      = 3; // 出库
        TYPE_IN_STOCK       = 4; // 入库
        TYPE_SORTING        = 5; // 分拣
        TYPE_SETTLEMENT     = 6; // 结款
        TYPE_DELIVERY       = 7; // 配送
        TYPE_PURCHASE_SHEET = 8; // 采购单据
        TYPE_BOX            = 9; // 箱签
    }

    // @inject_tag: gorm:"PRIMARY_KEY"
    uint64 printing_template_id = 1; // 主键
    uint64 status               = 2; // 状态bitmap
    uint64 revision             = 3; // 版本
    uint64 create_time          = 4; // 创建时间
    uint64 update_time          = 5; // 修改时间
    uint64 delete_time          = 6; // 删除时间，非0表示已删除

    uint64 group_id              = 10;
    uint64 station_id            = 11;
    uint64 creator_group_user_id = 12; // 创建人 ID

    Attrs attrs = 20;
    Type  type  = 21 [ (validate.rules).message = {required: true} ]; // 类型

    // 注意：对于不同类型的模版，下面的部分字段可能用不到。
    string    name       = 31; // 模版名称
    string    paper_size = 32; // 打印规格，例子: "A4", "50x50"
    Direction direction  = 33; // 打印方向
    bool      is_batch   = 34; // 是否批量打印
    bool      is_default = 35; // 是否是默认模版
}

message PrintingTemplateRelation {
    option (dao.partition_count) = 100;

    // @inject_tag: gorm:"PRIMARY_KEY;"
    uint64 printing_template_relation_id = 1;

    uint64 create_time = 4; // 创建时间
    uint64 update_time = 5; // 修改时间
    uint64 delete_time = 6; // 删除时间，非0表示已删除

    uint64 group_id             = 10;
    uint64 station_id           = 11;
    uint64 printing_template_id = 12; // 主键
    uint64 customer_id          = 13; // 商户ID
    uint64 sku_id               = 14;

    PrintingTemplate.Type template_type = 20;
}

// ShopLayout 用来承载商城店铺装修配置。我们使用 proto 结构化地描述店铺装修的数据，方便不同平台的客户端解析同一份数据（JS / Java / Swift）。
message ShopLayout {
    message Banner {
        common.Image image = 1 [ (validate.rules).message = {required : true} ];
        string       link  = 2; // 可选。
    }

    repeated Banner banners = 1;
}

// 用户或者系统准备的 Banner 图库。
message ShopBanner {

    option (dao.partition_count) = 1;
    option (dao.model_type)      = TYPE_PREFERENCE_SHOP_BANNER;

    message Banner {
        common.Image image = 1;
    }

    // @inject_tag: gorm:"PRIMARY_KEY;"
    uint64 shop_banner_id = 1; // 主键
    uint64 status         = 2; // 状态bitmap
    uint64 revision       = 3; // 版本
    uint64 create_time    = 4; // 创建时间
    uint64 update_time    = 5; // 修改时间
    uint64 delete_time    = 6; // 删除时间，非0表示已删除

    uint64 group_id = 10; // 如果 group_id 为空，则表示是系统预设的。

    Banner banner = 20;
}

// Shop 表示商城的配置
message Shop {
    option (dao.partition_count) = 1;
    option (dao.model_type)      = TYPE_PREFERENCE_SHOP;

    enum Type {
        TYPE_UNSPECIFIED = 0;
        TYPE_SOCIAL      = 1; // 社会餐饮
        TYPE_EDUCATION   = 2; // 学生餐
    }

    // 请假规则
    message AbsenceRule {
        // 当天前 <days> 天 <times> 时间前
        //
        // 如果 days 为 2，times 为 8*3600*1000（也就是早上 08:00），
        // 那么请 9 月 10 日的假，需要在 9 月 8 日 08:00 前进行请假申请。
        //
        int32  days  = 1;
        uint64 times = 2 [ (validate.rules).uint64 = {gte : 0, lt : 86400000} ];
    }

    message Attrs {
        repeated common.Image reference_images = 1; // 资料手册
    }

    // @inject_tag: gorm:"PRIMARY_KEY;"
    uint64 shop_id     = 1; // 主键
    uint64 status      = 2; // 状态bitmap
    uint64 revision    = 3; // 版本
    uint64 create_time = 4; // 创建时间
    uint64 update_time = 5; // 修改时间
    uint64 delete_time = 6; // 删除时间，非0表示已删除

    uint64 group_id   = 10;
    uint64 station_id = 11;

    ShopLayout   layout                    = 20;
    Type         type                      = 21 [ (validate.rules).message = {required: true} ];
    string       name                      = 22; // 店铺名称
    string       customer_service_phone    = 23; // 客服电话
    common.Image logo                      = 24; // 店铺 logo
    bool         enable_shop_announcement  = 25; // 是否开启商城公告
    string       shop_announcement         = 26; // 公告内容
    bool         need_invitation_code      = 27; // 注册时是否需要邀请码
    uint64       default_quotation_id      = 28; // 默认报价单
    uint64       default_service_period_id = 29; // 默认运营时间

    AbsenceRule absence_rule = 31; // 请假规则

    Attrs attrs = 40;

    reserved 30;
}

// Application 表示一个第三方服务应用，比如微信公众号、微信小程序、支付宝小程序。
// Application 和 Shop 是多对一关系。
message Application {
    option (dao.partition_count) = 1;

    enum Type {
        TYPE_UNSPECIFIED             = 0;
        TYPE_WECHAT_MINI_PROGRAM     = 1;
        TYPE_WECHAT_OFFICIAL_ACCOUNT = 2;
    }
    message Attrs {
        WechatMiniProgram     wechat_mini_program     = 1; // 当且仅当 application.type == 1 时存在
        WechatOfficialAccount wechat_official_account = 2; // 当且仅当 application.type == 2 时存在
    }
    message WechatMiniProgram {
        string app_id     = 1;
        string app_secret = 2;
        string mch_id     = 3;
    }
    message WechatOfficialAccount {
        string app_id     = 1;
        string app_secret = 2;
        string mch_id     = 3;
    }

    // @inject_tag: gorm:"PRIMARY_KEY;"
    uint64 application_id = 1;
    uint64 status         = 2; // 状态bitmap
    uint64 revision       = 3; // 版本
    uint64 create_time    = 4; // 创建时间
    uint64 update_time    = 5; // 修改时间
    uint64 delete_time    = 6; // 删除时间，非0表示已删除

    uint64 group_id   = 10;
    uint64 station_id = 11;
    uint64 shop_id    = 19;

    // @inject_tag: gorm:"UNIQUE_INDEX:idx_type_key"
    Type type = 20;

    // key 是第三方平台的 id 的镜像，用于数据库检索。根据 Application.Type 的不同，这个值等价于
    // WechatMiniProgram.app_id 或者 WechatOfficialAccount.app_id。
    //
    // @inject_tag: gorm:"UNIQUE_INDEX:idx_type_key"
    string key = 21;

    Attrs attrs = 30;
}

message PurchaseSettings {
    option (dao.partition_count) = 1;
    option (dao.model_type)      = TYPE_PURCHASE_SETTINGS;

    // @inject_tag: gorm:"PRIMARY_KEY"
    uint64 purchase_settings_id = 1; // 主键
    uint64 revision             = 3; // 版本(这个要版本？？？)
    uint64 create_time          = 4; // 创建时间
    uint64 update_time          = 5; // 修改时间
    uint64 delete_time          = 6; // 删除时间，非0表示已删除

    uint64 group_id   = 10 [ (validate.rules).uint64.gt = 0 ];
    uint64 station_id = 11 [ (validate.rules).uint64.gt = 0 ];

    // 计划采购数计算方式
    enum PurchaseTaskPlanValueCalulateMethod {
        UNSPECIFIED   = 0;
        SUGGEST_VALUE = 1; // 等于建议数
        REQUEST_VALUE = 2; // 等于需求数
    }
    PurchaseTaskPlanValueCalulateMethod purchase_task_plan_value_calculate_method = 20 [ (validate.rules).message = {required: true} ];
}

message AppointTimePair {
    AppointTimeSettings.Type type     = 1;
    uint64                   req_time = 2;
    uint64                   rsp_time = 3;
}

message AppointTimeSettings {
    option (dao.partition_count) = 1;
    option (dao.model_type)      = TYPE_APPOINT_TIME_SETTINGS;

    // 时间配置类型
    enum Type {
        UNSPECIFIED                                          = 0;
        NONPROCESSED_PURCHASE_TIME_BEFORE_ORDER_RECV         = 1; // 非加工品采购计划比收货时间早的时长
        PROCESSED_INGREDIENT_PURCHASE_TIME_BEFORE_ORDER_RECV = 2; // 加工品原料采购计划比收货时间早的时长
        PROCESSED_PRODUCE_TIME_BEFORE_ORDER_RECV             = 3; // 生产计划交期比收货时间早的时长
        PROCESSED_PACK_TIME_BEFORE_ORDER_RECV                = 4; // 包装计划交期比收货时间早的时长
        PURCHASE_TIME_BEFORE_PRODUCE                         = 5; // 采购计划交期比生产计划交期早的时长
        PRODUCE_TIME_BEFORE_PACK                             = 6; // 生产计划交期比包装计划交期早的时长
    }

    message Settings {
        message SingleSetting {
            Type  type          = 1 [ (validate.rules).message = {required: true} ];
            int64 before_days   = 2 [ (validate.rules).int64 = {gte : 0, lte : 60} ];      // 早的天数
            int64 absolute_time = 3 [ (validate.rules).int64 = {gte : 0, lt : 86400000} ]; // 当天的时间点，单位毫秒
        }
        repeated SingleSetting settings = 1;
    }

    // @inject_tag: gorm:"PRIMARY_KEY"
    uint64 appoint_time_settings_id = 1; // 主键
    uint64 revision                 = 3; // 版本(这个要版本？？？)
    uint64 create_time              = 4; // 创建时间
    uint64 update_time              = 5; // 修改时间
    uint64 delete_time              = 6; // 删除时间，非0表示已删除

    uint64   group_id   = 10 [ (validate.rules).uint64.gt = 0 ];
    uint64   station_id = 11 [ (validate.rules).uint64.gt = 0 ];
    Settings settings   = 20;
}

message PrecisionSettings {
    option (dao.partition_count) = 1;
    option (dao.model_type)      = TYPE_PRECISION_SETTINGS;

    // 精度配置类型，例如模块，数据模型，字段等
    enum Type {
        UNSPECIFIED = 0;
        PURCHASE    = 1; // 采购模块
    }

    message Settings {
        message SingleSetting {
            Type   type      = 1 [ (validate.rules).message = {required: true} ];
            uint32 precision = 2;
        }
        repeated SingleSetting settings = 1;
    }

    // @inject_tag: gorm:"PRIMARY_KEY"
    uint64 precision_settings_id = 1; // 主键
    uint64 revision              = 3; // 版本(这个要版本？？？)
    uint64 create_time           = 4; // 创建时间
    uint64 update_time           = 5; // 修改时间
    uint64 delete_time           = 6; // 删除时间，非0表示已删除

    uint64   group_id   = 10 [ (validate.rules).uint64.gt = 0 ];
    uint64   station_id = 11 [ (validate.rules).uint64.gt = 0 ];
    Settings settings   = 20;
}

// 分拣设置
message SortingSettings {
    option (dao.partition_count) = 1;
    option (dao.model_type)      = TYPE_SORTING_SETTINGS;

    enum SortingNumMethod {
        SORTINGNUM_METHOD_UNSPECIFIED = 0;
        SORTINGNUM_METHOD_ORDER       = 1; // 按订单生成分拣序号
        SORTINGNUM_METHOD_ROUTE       = 2; // 按线路生成分拣序号
    }
    enum SortingLockType {
        SORTINGLOCKTYPE_UNSPECIFIED = 0;
        SORTINGLOCKTYPE_DELIVERYING = 1; // 配送中
        SORTINGLOCKTYPE_RECEIVABLE  = 2; // 已签售
    }

    // @inject_tag: gorm:"PRIMARY_KEY"
    uint64 sorting_settings_id = 1; // 主键
    uint64 revision            = 3; // 版本(这个要版本？？？)
    uint64 create_time         = 4; // 创建时间
    uint64 update_time         = 5; // 修改时间
    uint64 delete_time         = 6; // 删除时间，非0表示已删除

    uint64 group_id   = 10 [ (validate.rules).uint64.gt = 0 ];
    uint64 station_id = 11 [ (validate.rules).uint64.gt = 0 ];

    SortingLockType  sorting_lock       = 20; // 分拣锁定
    SortingNumMethod sorting_num_method = 21; // 分拣序号生成方式
}

// 进销存设置
message InventorySettings {
    // @inject_tag: gorm:"PRIMARY_KEY"
    uint64 inventory_settings_id = 1; // 主键
    uint64 status                = 2; // 状态bitmap
    uint64 revision              = 3; // 版本(这个要版本？？？)
    uint64 create_time           = 4; // 创建时间
    uint64 update_time           = 5; // 修改时间
    uint64 delete_time           = 6; // 删除时间，非0表示已删除

    uint64 group_id   = 10 [ (validate.rules).uint64.gt = 0 ];
    uint64 station_id = 11 [ (validate.rules).uint64.gt = 0 ];

    // 进销存计算方式
    enum InventoryMethod {
        INVENTORY_METHOD_UNSPECIFIED      = 0;
        INVENTORY_METHOD_FIFO             = 1; // 先进先出
        INVENTORY_METHOD_WEIGHTED_AVERAGE = 2; // 加权平均 第一期没做
    }
    // 进销存审核设置
    message AutoApproveSettings {
        message InStockSheetAutoApprove {
            bool purchase_in = 1; // 采购入库
            bool product_in  = 2; // 加工入库
            bool material_in = 3; // 退料入库
            // bool refund_in   = 4; // 销售退货入库
            bool other_in = 5; // 其他入库
        }
        message OutStockSheetAutoApprove {
            bool sale_out     = 1; // 销售出库
            bool material_out = 2; // 领料出库
            bool refund_out   = 3; // 采购退货出库
            bool other_out    = 4; // 其他出库
        }
        message InventoryStockSheetAutoApprove {
            bool check = 1; // 盘点审核
        }

        InStockSheetAutoApprove        in_stock    = 1;
        OutStockSheetAutoApprove       out_stock   = 2;
        InventoryStockSheetAutoApprove check_stock = 3;
    }
    // 可用库存设置
    message AvailableStockSettings {
        bool plan_in_stock    = 1; // 计划生产库存
        bool in_transit_stock = 2; // 在途库存
        bool frozen_stock     = 3; //冻结库存
    }
    InventoryMethod        inventory_method         = 20 [ (validate.rules).message = {required: true} ];
    AutoApproveSettings    auto_approve_settings    = 21;
    AvailableStockSettings available_stock_settings = 22;

    bool allow_negative_stock = 23; // 负库存允许出库
}

// 生产设置
message ProductionSettings {
    option (dao.partition_count) = 1;
    option (dao.model_type)      = TYPE_PRODUCTION_SETTINGS;

    enum TaskOutputSource {
        TASKOUTPUT_SOURCE_UNSPECIFIED  = 0;
        TASKOUTPUT_SOURCE_TYPE_IN      = 1; // 录入产出
        TASKOUTPUT_SOURCE_LAST_PROCESS = 2; // 最后一道工序
    }

    // @inject_tag: gorm:"PRIMARY_KEY"
    uint64 production_settings_id = 1; // 主键

    uint64 create_time = 4; // 创建时间
    uint64 update_time = 5; // 修改时间
    uint64 delete_time = 6; // 删除时间，非0表示已删除

    uint64 group_id   = 10;
    uint64 station_id = 11;

    TaskOutputSource task_output_source = 20;
}

////////////////////// 以下是接口 Message定义 /////////////////////////

message ListPrintingTemplateRequest {
    PrintingTemplate.Type type             = 1; // 打印模版类型
    bool                  need_group_users = 2;
    common.PagingParams   paging           = 10 [ (validate.rules).message.required = true ];
}
message ListPrintingTemplateResponse {
    repeated PrintingTemplate         printing_templates = 1;
    map<uint64, enterprise.GroupUser> group_users        = 2; // key 是 group_user_id
    common.PagingResult               paging             = 10 [ (validate.rules).message.required = true ];
}
message GetPrintingTemplateRequest {
    uint64 printing_template_id = 1 [ (validate.rules).uint64.gt = 0 ]; // 模板ID
    uint64 group_id             = 2;                                    // 如果没有带登录态，那么要显式地传 group id 过来
}
message GetPrintingTemplateResponse {
    PrintingTemplate printing_template = 1 [ (validate.rules).message.required = true ];
}
message GetDefaultPrintingTemplateRequest {
    PrintingTemplate.Type printing_template_type = 1 [ (validate.rules).message = {required: true} ];
    uint64                station_id             = 2 [ (validate.rules).uint64.gt = 0 ];
}
message GetDefaultPrintingTemplateResponse {
    PrintingTemplate printing_template = 1 [ (validate.rules).message.required = true ];
}
message CreatePrintingTemplateRequest {
    PrintingTemplate printing_template = 1 [ (validate.rules).message.required = true ];
}
message CreatePrintingTemplateResponse {
    PrintingTemplate printing_template = 1 [ (validate.rules).message.required = true ];
}
message UpdatePrintingTemplateRequest {
    PrintingTemplate printing_template = 1 [ (validate.rules).message.required = true ];
}
message UpdatePrintingTemplateResponse {
    PrintingTemplate printing_template = 1 [ (validate.rules).message.required = true ];
}
message DeletePrintingTemplateRequest {
    uint64 printing_template_id = 1 [ (validate.rules).uint64.gt = 0 ];
}
message DeletePrintingTemplateResponse {
    PrintingTemplate printing_template = 1 [ (validate.rules).message.required = true ];
}
message SelectPrintingTemplateRequest {
    uint64                customer_id   = 1; // 商户ID
    uint64                sku_id        = 2; // 商品ID
    PrintingTemplate.Type template_type = 3 [ (validate.rules).message = {required: true} ];
}
message SelectPrintingTemplateResponse {
    PrintingTemplate printing_template = 1 [ (validate.rules).message.required = true ];
}
message UpdatePrintingTemplateRelationRequest {
    uint64          printing_template_id = 1 [ (validate.rules).uint64.gt = 0 ]; // 模板ID
    repeated uint64 customer_ids         = 2;
    repeated uint64 sku_ids              = 3;
}
message UpdatePrintingTemplateRelationResponse {
}
message GetPrintingTemplateRelationRequest {
    uint64 printing_template_id = 1 [ (validate.rules).uint64.gt = 0 ]; // 模板ID
}
message GetPrintingTemplateRelationResponse {
    repeated uint64                                     customer_ids = 1;
    repeated uint64                                     sku_ids      = 2;
    map<uint64, enterprise.Customer>                    customers    = 3;
    map<uint64, merchandise.GetManySkuResponse.SkuInfo> skus         = 4; // key是skuID，value是sku数据
}

message CreateInventorySettingsRequest {
    InventorySettings inventory_settings = 1 [ (validate.rules).message.required = true ];
}

message CreateInventorySettingsResponse {
    InventorySettings inventory_settings = 1;
}

message UpdateInventorySettingsRequest {
    uint64            inventory_settings_id = 1 [ (validate.rules).uint64.gt = 0 ];
    InventorySettings inventory_settings    = 2 [ (validate.rules).message.required = true ];
}

message UpdateInventorySettingsResponse {

    InventorySettings inventory_settings = 1;
}

message GetInventorySettingsRequest {
    uint64 station_id = 1;
}
message GetInventorySettingsResponse {
    InventorySettings inventory_settings = 1 [ (validate.rules).message.required = true ];
}

message CreatePurchaseSettingsRequest {
    PurchaseSettings purchase_settings = 1 [ (validate.rules).message.required = true ];
}

message CreatePurchaseSettingsResponse {
    PurchaseSettings purchase_settings = 1;
}

message UpdatePurchaseSettingsRequest {
    PurchaseSettings purchase_settings = 1 [ (validate.rules).message.required = true ];
}

message UpdatePurchaseSettingsResponse {
    PurchaseSettings purchase_settings = 1 [ (validate.rules).message.required = true ];
}

message GetPurchaseSettingsRequest {}

message GetPurchaseSettingsResponse {
    PurchaseSettings purchase_settings = 1 [ (validate.rules).message.required = true ];
}

message UpdateAppointTimeSettingsRequest {
    AppointTimeSettings appoint_settings = 1 [ (validate.rules).message.required = true ];
}

message UpdateAppointTimeSettingsResponse {
    AppointTimeSettings appoint_settings = 1 [ (validate.rules).message.required = true ];
}

message GetAppointTimeSettingsRequest {}

message GetAppointTimeSettingsResponse {
    AppointTimeSettings purchase_settings = 1 [ (validate.rules).message.required = true ];
}

message UpdateSortingSettingsRequest {
    SortingSettings sorting_settings = 1 [ (validate.rules).message.required = true ];
}

message UpdateSortingSettingsResponse {
    SortingSettings sorting_settings = 1 [ (validate.rules).message.required = true ];
}

message GetSortingSettingsRequest {}

message GetSortingSettingsResponse {
    SortingSettings sorting_settings = 1 [ (validate.rules).message.required = true ];
}

message UpdateProductionSettingsRequest {
    ProductionSettings production_settings = 1;
}
message UpdateProductionSettingsResponse {
    ProductionSettings production_settings = 1;
}
message GetProductionSettingsRequest {
}
message GetProductionSettingsResponse {
    ProductionSettings production_settings = 1;
}

message GetPrecisionSettingsRequest {}

message GetPrecisionSettingsResponse {
    PrecisionSettings precision_settings = 1 [ (validate.rules).message.required = true ];
}

message GetManyAppointTimePairRequest {
    repeated AppointTimePair pairs = 1;
}

message GetManyAppointTimePairResponse {
    repeated AppointTimePair pairs = 1;
}

message GetShopRequest {
    uint64 shop_id = 1 [ (validate.rules).uint64.gt = 0 ];
}
message GetShopResponse {
    Shop shop = 1 [ (validate.rules).message.required = true ];
}
message ListShopRequest {
    common.PagingParams paging = 1 [ (validate.rules).message.required = true ];
    Shop.Type           type   = 2 [ (validate.rules).message = {required: true} ];
}
message ListShopResponse {
    common.PagingResult paging = 1 [ (validate.rules).message.required = true ];
    repeated Shop       shops  = 2;
}
message CreateShopRequest {
    Shop shop = 1 [ (validate.rules).message.required = true ];
}
message CreateShopResponse {
    Shop shop = 1 [ (validate.rules).message.required = true ];
}
message UpdateShopRequest {
    Shop shop = 1 [ (validate.rules).message.required = true ];
}
message UpdateShopResponse {
    Shop shop = 1 [ (validate.rules).message.required = true ];
}
message ListShopBannerRequest {
    common.PagingParams paging = 1 [ (validate.rules).message.required = true ];
    Shop.Type           type   = 2 [ (validate.rules).message = {required: true} ];
}
message ListShopBannerResponse {
    common.PagingResult paging       = 1 [ (validate.rules).message.required = true ];
    repeated ShopBanner shop_banners = 2;
}
message CreateShopBannerRequest {
    ShopBanner shop_banner = 1 [ (validate.rules).message.required = true ];
}
message CreateShopBannerResponse {
    ShopBanner shop_banner = 1 [ (validate.rules).message.required = true ];
}
message UpdateShopBannerRequest {
    ShopBanner shop_banner = 1 [ (validate.rules).message.required = true ];
}
message UpdateShopBannerResponse {
    ShopBanner shop_banner = 1 [ (validate.rules).message.required = true ];
}
message DeleteShopBannerRequest {
    uint64 shop_banner_id = 1 [ (validate.rules).uint64.gt = 0 ];
}
message DeleteShopBannerResponse {
    ShopBanner shop_banner = 1 [ (validate.rules).message.required = true ];
}

message GetApplicationRelationRequest {
    string           application_key  = 1 [ (validate.rules).string.min_len = 1 ]; // 匹配 Application.key。详细解释见 Application.key 的注释。
    Application.Type application_type = 2 [ (validate.rules).message = {required: true} ];
}
message GetApplicationRelationResponse {
    uint64 group_id   = 1;
    uint64 station_id = 2;
    uint64 shop_id    = 3;
}
message ListApplicationRequest {
    // 空请求，不需要分页
}
message ListApplicationResponse {
    repeated Application applications = 1;
}