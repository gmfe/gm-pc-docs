syntax = "proto3";

package ceres.purchase;
option  java_multiple_files = true;
import "./asynctask/proto/asynctask.proto";
import "./merchandise/proto/merchandise.proto";
import "./common/proto/common.proto";
import "./inventory/proto/inventory.proto";
import "./enterprise/proto/enterprise.proto";
import "./order/proto/order.proto";
import "./google/api/annotations.proto";
import "./include/protoc-gen-validate/validate.proto";
import "./include/protoc-gen-setter/setter.proto";
import "./cmd/protoc-gen-dao/proto/dao.proto";
import "./idgenerator/proto/idgenerator.proto";
option go_package = "code.guanmai.cn/back_end/ceres/purchase/proto;proto";

// 接口
service PurchaseService {
    // 采购任务
    rpc CreatePurchaseTask(CreatePurchaseTaskRequest) returns (CreatePurchaseTaskResponse) {
        option (google.api.http) = {
            post : "/ceres/purchase/PurchaseService/CreatePurchaseTask"
        };
    };

    rpc SyncPurchaseTask(SyncPurchaseTaskRequest) returns (SyncPurchaseTaskResponse) {
        option (google.api.http) = {
            post : "/ceres/purchase/PurchaseService/SyncPurchaseTask"
        };
    };

    rpc UpdatePurchaseTask(UpdatePurchaseTaskRequest) returns (UpdatePurchaseTaskResponse) {
        option (google.api.http) = {
            post : "/ceres/purchase/PurchaseService/UpdatePurchaseTask"
        };
    };

    rpc AsyncReleasePurchaseTask(AsyncReleasePurchaseTaskRequest) returns (AsyncReleasePurchaseTaskResponse) {
        option (google.api.http) = {
            post : "/ceres/purchase/PurchaseService/AsyncReleasePurchaseTask"
        };
    };

    rpc AsyncFinishPurchaseTask(AsyncFinishPurchaseTaskRequest) returns (AsyncFinishPurchaseTaskResponse) {
        option (google.api.http) = {
            post : "/ceres/purchase/PurchaseService/AsyncFinishPurchaseTask"
        };
    };

    rpc AsyncSwitchPurchaseTaskPurchaser(AsyncSwitchPurchaseTaskPurchaserRequest) returns (AsyncSwitchPurchaseTaskPurchaserResponse) {
        option (google.api.http) = {
            post : "/ceres/purchase/PurchaseService/AsyncSwitchPurchaseTaskPurchaser"
        };
    };

    rpc AsyncSwitchPurchaseTaskSupplier(AsyncSwitchPurchaseTaskSupplierRequest) returns (AsyncSwitchPurchaseTaskSupplierResponse) {
        option (google.api.http) = {
            post : "/ceres/purchase/PurchaseService/AsyncSwitchPurchaseTaskSupplier"
        };
    };

    rpc DeletePurchaseTask(DeletePurchaseTaskRequest) returns (DeletePurchaseTaskResponse) {
        option (google.api.http) = {
            post : "/ceres/purchase/PurchaseService/DeletePurchaseTask"
        };
    };

    rpc GetPurchaseTask(GetPurchaseTaskRequest) returns (GetPurchaseTaskResponse) {
        option (google.api.http) = {
            post : "/ceres/purchase/PurchaseService/GetPurchaseTask"
        };
    };

    rpc ListPurchaseTask(ListPurchaseTaskRequest) returns (ListPurchaseTaskResponse) {
        option (google.api.http) = {
            post : "/ceres/purchase/PurchaseService/ListPurchaseTask"
        };
    };

    rpc ExportPurchaseTask(ExportPurchaseTaskRequest) returns (ExportPurchaseTaskResponse) {
        option (google.api.http) = {
            post : "/ceres/purchase/PurchaseService/ExportPurchaseTask"
        };
    };

    rpc CreateSheetFromTask(CreateSheetFromTaskRequest) returns (CreateSheetFromTaskResponse) {
        option (google.api.http) = {
            post : "/ceres/purchase/PurchaseService/CreateSheetFromTask"
        };
    };

    rpc AsyncCreateSheetFromTask(AsyncCreateSheetFromTaskRequest) returns (AsyncCreateSheetFromTaskResponse) {
        option (google.api.http) = {
            post : "/ceres/purchase/PurchaseService/AsyncCreateSheetFromTask"
        };
    };

    rpc GetPurchaseTaskSummary(GetPurchaseTaskSummaryRequest) returns (GetPurchaseTaskSummaryResponse) {
        option (google.api.http) = {
            post : "/ceres/purchase/PurchaseService/GetPurchaseTaskSummary"
        };
    };

    // 波次
    rpc ListBatch(ListBatchRequest) returns (ListBatchResponse) {
        option (google.api.http) = {
            post : "/ceres/purchase/PurchaseService/ListBatch"
        };
    };

    // 采购单
    rpc CreatePurchaseSheet(CreatePurchaseSheetRequest) returns (CreatePurchaseSheetResponse) {
        option (google.api.http) = {
            post : "/ceres/purchase/PurchaseService/CreatePurchaseSheet"
        };
    };

    rpc UpdatePurchaseSheet(UpdatePurchaseSheetRequest) returns (UpdatePurchaseSheetResponse) {
        option (google.api.http) = {
            post : "/ceres/purchase/PurchaseService/UpdatePurchaseSheet"
        };
    };
    rpc DeletePurchaseSheet(DeletePurchaseSheetRequest) returns (DeletePurchaseSheetResponse) {
        option (google.api.http) = {
            post : "/ceres/purchase/PurchaseService/DeletePurchaseSheet"
        };
    };
    rpc GetPurchaseSheet(GetPurchaseSheetRequest) returns (GetPurchaseSheetResponse) {
        option (google.api.http) = {
            post : "/ceres/purchase/PurchaseService/GetPurchaseSheet"
        };
    };
    rpc ListPurchaseSheet(ListPurchaseSheetRequest) returns (ListPurchaseSheetResponse) {
        option (google.api.http) = {
            post : "/ceres/purchase/PurchaseService/ListPurchaseSheet"
        };
    };

    // 询价
    rpc CreateInquiryPrice(CreateInquiryPriceRequest) returns (CreateInquiryPriceResponse) {
        option (google.api.http) = {
            post : "/ceres/purchase/PurchaseService/CreateInquiryPrice"
        };
    };
    rpc ListInquiryPrice(ListInquiryPriceRequest) returns (ListInquiryPriceResponse) {
        option (google.api.http) = {
            post : "/ceres/purchase/PurchaseService/ListInquiryPrice"
        };
    };
    rpc ImportInquiryPrice(ImportInquiryPriceRequest) returns (ImportInquiryPriceResponse) {
        option (google.api.http) = {
            post : "/ceres/purchase/PurchaseService/ImportInquiryPrice"
        };
    };
    rpc ImportInquiryPriceTmpl(ImportInquiryPriceTmplRequest) returns (ImportInquiryPriceTmplResponse) {
        option (google.api.http) = {
            post : "/ceres/purchase/PurchaseService/ImportInquiryPriceTmpl"
        };
    };
}

message CreatePurchaseTaskRequest {
    repeated PurchaseTask purchase_tasks = 1 [ (validate.rules).repeated = {min_items : 1} ];
    Batch                 batch          = 2 [ (validate.rules).message.required = true ];
}

message CreatePurchaseTaskResponse {
    repeated PurchaseTask purchase_tasks = 1 [ (validate.rules).repeated = {min_items : 1} ];
    //     考虑到性能原因，有可能做成异步，这里暂时不返回对象列表
}

message SyncPurchaseTaskRequest {
    repeated PurchaseTask purchase_tasks = 1 [ (validate.rules).repeated = {min_items : 1} ];
    Batch                 batch          = 2 [ (validate.rules).message.required = true ];
}

message SyncPurchaseTaskResponse {
    repeated PurchaseTask purchase_tasks = 1 [ (validate.rules).repeated = {min_items : 1} ];
}

message AsyncCreatePurchaseTaskRequest {
    repeated PurchaseTask purchase_tasks = 1 [ (validate.rules).repeated = {min_items : 1} ];
    Batch                 batch          = 2 [ (validate.rules).message.required = true ];
}

message AsyncCreatePurchaseTaskResponse {
    //    repeated PurchaseTask purchase_tasks = 1;
    // 考虑到性能原因，有可能做成异步，这里暂时不返回对象列表
}

message UpdatePurchaseTaskRequest {
    repeated PurchaseTask purchase_tasks = 1 [ (validate.rules).repeated = {min_items : 1} ];
}

message UpdatePurchaseTaskResponse {
    repeated PurchaseTask purchase_tasks = 1;
}

message GetPurchaseTaskSummaryRequest {
    string            q                 = 1;                                               // 搜索
    int32             status            = 2;                                               // 状态(看PurchaseTask.Status定义)
    uint64            sku_id            = 3;                                               // skuid
    repeated uint64   category_ids      = 4 [ (validate.rules).repeated.unique = true ];  // 分类ID
    repeated uint64   spu_ids           = 5 [ (validate.rules).repeated.unique = true ];  // spuID
    repeated uint64   supplier_ids      = 6 [ (validate.rules).repeated.unique = true ];  // 供应商
    repeated uint64   purchaser_ids     = 7 [ (validate.rules).repeated.unique = true ];  // 采购员
    uint64            service_period_id = 8;                                               // 时间配置id
    PurchaseTask.Type type              = 10 [ (validate.rules).message = {required: true} ]; // 采购类型（临采/非临采）
    uint64            batch_id          = 11;                                              // 波次
    int32             request_source    = 12 [ deprecated = true ];                        // 计划来源(看PurchaseTask.RequestSource定义，为了支持多选，改用int32定义)
    uint64            begin_time        = 13;                                              // 开始
    uint64            end_time          = 14;                                              // 结束
    TimeType          filter_time_type  = 15;                                              // 时间类型
    string            serial_no         = 16;                                              //自定义编码
    repeated uint64   purchase_task_ids = 17;                                              //用ID过滤
}

message GetPurchaseTaskSummaryResponse {
    message GroupResult {
        map<uint64, uint32> sku_count = 1;
    }
    map<uint64, GroupResult> supplier_map  = 1;
    map<uint64, GroupResult> purchaser_map = 2;
}

message AsyncReleasePurchaseTaskRequest {
    string            q                 = 1;                                               // 搜索
    int32             status            = 2;                                               // 状态(看PurchaseTask.Status定义)
    uint64            sku_id            = 3;                                               // skuid
    repeated uint64   category_ids      = 4 [ (validate.rules).repeated.unique = true ];  // 分类ID
    repeated uint64   spu_ids           = 5 [ (validate.rules).repeated.unique = true ];  // spuID
    repeated uint64   supplier_ids      = 6 [ (validate.rules).repeated.unique = true ];  // 供应商
    repeated uint64   purchaser_ids     = 7 [ (validate.rules).repeated.unique = true ];  // 采购员
    uint64            service_period_id = 8;                                               // 时间配置id
    PurchaseTask.Type type              = 10 [ (validate.rules).message = {required: true} ]; // 采购类型（临采/非临采）
    uint64            batch_id          = 11;                                              // 波次
    int32             request_source    = 12 [ deprecated = true ];                        // 计划来源(看PurchaseTask.RequestSource定义，为了支持多选，改用int32定义)
    uint64            begin_time        = 13;                                              // 开始
    uint64            end_time          = 14;                                              // 结束
    TimeType          filter_time_type  = 15;                                              // 时间类型
    string            serial_no         = 16;                                              //自定义编码
    repeated uint64   purchase_task_ids = 17;                                              //用ID过滤
}

message AsyncReleasePurchaseTaskResponse {
    ceres.asynctask.Task task = 1;
}

message AsyncFinishPurchaseTaskRequest {
    string            q                 = 1;                                               // 搜索
    int32             status            = 2;                                               // 状态(看PurchaseTask.Status定义)
    uint64            sku_id            = 3;                                               // skuid
    repeated uint64   category_ids      = 4 [ (validate.rules).repeated.unique = true ];  // 分类ID
    repeated uint64   spu_ids           = 5 [ (validate.rules).repeated.unique = true ];  // spuID
    repeated uint64   supplier_ids      = 6 [ (validate.rules).repeated.unique = true ];  // 供应商
    repeated uint64   purchaser_ids     = 7 [ (validate.rules).repeated.unique = true ];  // 采购员
    uint64            service_period_id = 8;                                               // 时间配置id
    PurchaseTask.Type type              = 10 [ (validate.rules).message = {required: true} ]; // 采购类型（临采/非临采）
    uint64            batch_id          = 11;                                              // 波次
    int32             request_source    = 12 [ deprecated = true ];                        // 计划来源(看PurchaseTask.RequestSource定义，为了支持多选，改用int32定义)
    uint64            begin_time        = 13;                                              // 开始
    uint64            end_time          = 14;                                              // 结束
    TimeType          filter_time_type  = 15;                                              // 时间类型
    string            serial_no         = 16;                                              //自定义编码
    repeated uint64   purchase_task_ids = 17;                                              //用ID过滤
}

message AsyncSwitchPurchaseTaskPurchaserRequest {
    string            q                 = 1;                                               // 搜索
    int32             status            = 2;                                               // 状态(看PurchaseTask.Status定义)
    uint64            sku_id            = 3;                                               // skuid
    repeated uint64   category_ids      = 4 [ (validate.rules).repeated.unique = true ];  // 分类ID
    repeated uint64   spu_ids           = 5 [ (validate.rules).repeated.unique = true ];  // spuID
    repeated uint64   supplier_ids      = 6 [ (validate.rules).repeated.unique = true ];  // 供应商
    repeated uint64   purchaser_ids     = 7 [ (validate.rules).repeated.unique = true ];  // 采购员
    uint64            service_period_id = 8;                                               // 时间配置id
    PurchaseTask.Type type              = 10 [ (validate.rules).message = {required: true} ]; // 采购类型（临采/非临采）
    uint64            batch_id          = 11;                                              // 波次
    int32             request_source    = 12 [ deprecated = true ];                        // 计划来源(看PurchaseTask.RequestSource定义，为了支持多选，改用int32定义)
    uint64            begin_time        = 13;                                              // 开始
    uint64            end_time          = 14;                                              // 结束
    TimeType          filter_time_type  = 15;                                              // 时间类型
    string            serial_no         = 16;                                              //自定义编码
    repeated uint64   purchase_task_ids = 17;                                              //用ID过滤

    uint64 new_purchaser_id = 20;
}

message AsyncSwitchPurchaseTaskPurchaserResponse {
    ceres.asynctask.Task task = 1;
}

message AsyncSwitchPurchaseTaskSupplierRequest {
    string            q                 = 1;                                               // 搜索
    int32             status            = 2;                                               // 状态(看PurchaseTask.Status定义)
    uint64            sku_id            = 3;                                               // skuid
    repeated uint64   category_ids      = 4 [ (validate.rules).repeated.unique = true ];  // 分类ID
    repeated uint64   spu_ids           = 5 [ (validate.rules).repeated.unique = true ];  // spuID
    repeated uint64   supplier_ids      = 6 [ (validate.rules).repeated.unique = true ];  // 供应商
    repeated uint64   purchaser_ids     = 7 [ (validate.rules).repeated.unique = true ];  // 采购员
    uint64            service_period_id = 8;                                               // 时间配置id
    PurchaseTask.Type type              = 10 [ (validate.rules).message = {required: true} ]; // 采购类型（临采/非临采）
    uint64            batch_id          = 11;                                              // 波次
    int32             request_source    = 12 [ deprecated = true ];                        // 计划来源(看PurchaseTask.RequestSource定义，为了支持多选，改用int32定义)
    uint64            begin_time        = 13;                                              // 开始
    uint64            end_time          = 14;                                              // 结束
    TimeType          filter_time_type  = 15;                                              // 时间类型
    string            serial_no         = 16;                                              //自定义编码
    repeated uint64   purchase_task_ids = 17;                                              //用ID过滤

    uint64 new_supplier_id = 20;
}

message AsyncSwitchPurchaseTaskSupplierResponse {
    ceres.asynctask.Task task = 1;
}

message AsyncFinishPurchaseTaskResponse {
    ceres.asynctask.Task task = 1;
}

message DeletePurchaseTaskRequest {
    repeated uint64 purchase_task_ids = 1 [ (validate.rules).repeated = {min_items : 1} ];
}

message DeletePurchaseTaskResponse {
    repeated PurchaseTask purchase_tasks = 1 [ (validate.rules).repeated = {min_items : 1} ];
}

message GetPurchaseTaskRequest {
    uint64 purchase_task_id = 1 [ (validate.rules).uint64.gt = 0 ];
}

message GetPurchaseTaskResponse {
    PurchaseTask purchase_task = 1 [ (validate.rules).message.required = true ];
}

message CreateSheetFromTaskRequest {
    repeated PurchaseTask purchase_tasks = 1 [ (validate.rules).repeated = {min_items : 1} ];
}

message CreateSheetFromTaskResponse {
    repeated PurchaseSheet purchase_sheets = 1;
}

message AsyncCreateSheetFromTaskRequest {
    string            q                 = 1;                                               // 搜索
    int32             status            = 2;                                               // 状态(看PurchaseTask.Status定义)
    uint64            sku_id            = 3;                                               // skuid
    repeated uint64   category_ids      = 4 [ (validate.rules).repeated.unique = true ];  // 分类ID
    repeated uint64   spu_ids           = 5 [ (validate.rules).repeated.unique = true ];  // spuID
    repeated uint64   supplier_ids      = 6 [ (validate.rules).repeated.unique = true ];  // 供应商
    repeated uint64   purchaser_ids     = 7 [ (validate.rules).repeated.unique = true ];  // 采购员
    uint64            service_period_id = 8;                                               // 时间配置id
    PurchaseTask.Type type              = 10 [ (validate.rules).message = {required: true} ]; // 采购类型（临采/非临采）
    uint64            batch_id          = 11;                                              // 波次
    int32             request_source    = 12 [ deprecated = true ];                        // 计划来源(看PurchaseTask.RequestSource定义，为了支持多选，改用int32定义)
    uint64            begin_time        = 13;                                              // 开始
    uint64            end_time          = 14;                                              // 结束
    TimeType          filter_time_type  = 15;                                              // 时间类型
    string            serial_no         = 16;                                              //自定义编码
    repeated uint64   purchase_task_ids = 17;                                              //用ID过滤
}

message AsyncCreateSheetFromTaskResponse {
    ceres.asynctask.Task task = 1;
}

message Status {
    enum Code {
        CODE_UNSPECIFIED                         = 0;
        SSU_SNAP_NOT_FOUND                       = 23450002; // ssu 快照找不到
        PURCHASE_UNIT_NOT_FOUND                  = 23450003; // ssu 对应的采购规格找不到
        SKU_NOT_FOUND                            = 23450004; // sku 找不到
        UNIT_NOT_FOUND                           = 23450005; // sku 找不到
        PURCHASE_SHEET_SUBMIT_WITH_TASK_FINISHED = 23450006; //采购计划完成不能提交采购单
        ASYNC_PARAMS_MISMATCH                    = 23450007; //异步任务参数不匹配
        SYNC_LACK_PURCHASE_TIME                  = 23450008; // 同步采购计划缺少采购交期
        SYNC_LACK_SHEET_ID                       = 23450009; // 同步采购计划缺少关联单据
        PURCHASE_TASK_DATA_ERROR                 = 23450010; // 采购计划数据错误
        SYNC_LACK_SHEET_VALUE                    = 23450011; // 同步采购计划缺少单据需求数
        PURCHASE_TASK_FAILURE_VERSION            = 23450012; // 采购任务版本不对
    }

    message SsuSnapNotFoundDetail {
        uint64 sku_id   = 1;
        uint64 unit_id  = 2;
        uint64 revision = 3;
    }

    message PurchaseUnitNotFoundDetail {
        uint64 sku_id  = 1;
        uint64 unit_id = 2;
    }

    message SkuNotFoundDetail {
        uint64 sku_id = 1;
    }

    message UnitNotFoundDetail {
        uint64 unit_id = 1;
    }

    message PurchaseSheetSubmitWithTaskFinishedDetail {
        uint64 purchase_sheet_id = 1;
        uint64 purchase_task_id  = 2;
    }
}

enum TimeType {
    UNSPECIFIED   = 0;
    CREATE_TIME   = 256;  // 发布时间
    PURCHASE_TIME = 512;  // 交期
    RELEASE_TIME  = 1024; // 下达时间
}

message ListPurchaseTaskRequest {
    enum PagingField {
        UNSPECIFIED = 0;
        CATEGORY    = 1; // 按照分类排序
        SUPPLIER    = 2; // 按照供应商排序
        PURCHASER   = 3; // 按照采购员排序
        SKU         = 4; // 按照SKU排序
    }

    string                    q                 = 1;                                               // 搜索（暂时没有实现）
    int32                     status            = 2;                                               // 状态(看PurchaseTask.Status定义)
    uint64                    sku_id            = 3;                                               // skuid
    repeated uint64           category_ids      = 4 [ (validate.rules).repeated.unique = true ];  // 分类ID
    repeated uint64           spu_ids           = 5 [ (validate.rules).repeated.unique = true ];  // spuID
    repeated uint64           supplier_ids      = 6 [ (validate.rules).repeated.unique = true ];  // 供应商
    repeated uint64           purchaser_ids     = 7 [ (validate.rules).repeated.unique = true ];  // 采购员
    uint64                    service_period_id = 8;                                               // 时间配置id
    PurchaseTask.Type         type              = 10 [ (validate.rules).message = {required: true} ]; // 采购类型（临采/非临采）
    uint64                    batch_id          = 11;                                              // 波次
    int32                     request_source    = 12 [ deprecated = true ];                        // 计划来源(看PurchaseTask.RequestSource定义)
    uint64                    begin_time        = 13;                                              // 开始
    uint64                    end_time          = 14;                                              // 结束
    TimeType                  filter_time_type  = 15;                                              // 时间类型
    string                    serial_no         = 16;                                              //自定义编码
    repeated uint64           purchase_task_ids = 17;                                              //用ID过滤
    ceres.common.PagingParams paging            = 18 [ (validate.rules).message.required = true ];
    repeated ceres.common.SortBy sort_by        = 19;
}

message ListPurchaseTaskResponse {
    repeated PurchaseTask purchase_tasks = 1;

    map<uint64, ceres.merchandise.GetManySkuResponse.SkuInfo> skus        = 2 [ (validate.rules).map = {no_sparse : true} ]; //sku信息map
    map<uint64, ceres.inventory.SkuStock>                     sku_stocks  = 3 [ (validate.rules).map = {no_sparse : true} ]; // 库存信息map
    map<uint64, ceres.enterprise.Customer>                    customers   = 4 [ (validate.rules).map = {no_sparse : true} ]; // 商户信息map
    map<uint64, ceres.enterprise.Supplier>                    suppliers   = 5 [ (validate.rules).map = {no_sparse : true} ]; // 供应商信息map
    map<uint64, ceres.enterprise.GroupUser>                   group_users = 6 [ (validate.rules).map = {no_sparse : true} ]; // 采购员和操作人
    map<string, ceres.merchandise.Ssu>                        ssu_snaps   = 7 [ (validate.rules).map = {no_sparse : true} ]; // ssu快照map
    ceres.common.PagingResult                                 paging      = 9 [ (validate.rules).message = {required : true} ];
}

message ExportPurchaseTaskRequest {
    string            q                 = 1;                                               // 搜索（暂时没有实现）
    int32             status            = 2;                                               // 状态(看PurchaseTask.Status定义)
    uint64            sku_id            = 3;                                               // skuid
    repeated uint64   category_ids      = 4 [ (validate.rules).repeated.unique = true ];  // 分类ID
    repeated uint64   spu_ids           = 5 [ (validate.rules).repeated.unique = true ];  // spuID
    repeated uint64   supplier_ids      = 6 [ (validate.rules).repeated.unique = true ];  // 供应商
    repeated uint64   purchaser_ids     = 7 [ (validate.rules).repeated.unique = true ];  // 采购员
    uint64            service_period_id = 8;                                               // 时间配置id
    PurchaseTask.Type type              = 10 [ (validate.rules).message = {required: true} ]; // 采购类型（临采/非临采）
    uint64            batch_id          = 11;                                              // 波次
    int32             request_source    = 12 [ deprecated = true ];                        // 计划来源(看PurchaseTask.RequestSource定义)
    uint64            begin_time        = 13;                                              // 开始
    uint64            end_time          = 14;                                              // 结束
    TimeType          filter_time_type  = 15;                                              // 时间类型
    string            serial_no         = 16;                                              //自定义编码
    repeated uint64   purchase_task_ids = 17;                                              //用ID过滤
}

message ExportPurchaseTaskResponse {
    ceres.asynctask.Task task = 1;
}

message SyncTaskFromOrderRequest {
    repeated ceres.order.OrderDetail order_details     = 1 [ (validate.rules).repeated = {min_items : 1} ];
    string                           batch_name        = 2;
    uint64                           service_period_id = 3 [ (validate.rules).uint64.gt = 0 ];
    uint64                           purchase_time     = 4 [ (validate.rules).uint64.gt = 0 ];
}

message SyncTaskFromOrderResponse {
    // 要改异步，不返回
}

message ListBatchRequest {
    uint64   service_period_id = 8;                                               // 时间配置id
    uint64   begin_time        = 13 [ (validate.rules).uint64.gt = 0 ];           // 开始
    uint64   end_time          = 14 [ (validate.rules).uint64.gt = 0 ];           // 结束
    TimeType filter_time_type  = 15 [ (validate.rules).message = {required: true} ]; // 时间类型
}

message ListBatchResponse {
    repeated Batch batches = 1;
}

message CreatePurchaseSheetRequest {
    PurchaseSheet purchase_sheet = 1 [ (validate.rules).message.required = true ];
}

message CreatePurchaseSheetResponse {
    PurchaseSheet purchase_sheet = 1 [ (validate.rules).message.required = true ];
}

message UpdatePurchaseSheetRequest {
    repeated PurchaseSheet purchase_sheets = 1 [ (validate.rules).repeated = {min_items : 1} ];
}

message UpdatePurchaseSheetResponse {
    repeated PurchaseSheet purchase_sheets = 1 [ (validate.rules).repeated = {min_items : 1} ];
}

message DeletePurchaseSheetRequest {
    repeated uint64 purchase_sheet_ids = 1 [ (validate.rules).repeated = {min_items : 1} ];
}

message DeletePurchaseSheetResponse {
    repeated PurchaseSheet purchase_sheets = 1 [ (validate.rules).repeated = {min_items : 1} ];
}

message GetPurchaseSheetRequest {
    uint64 purchase_sheet_id = 1 [ (validate.rules).uint64.gt = 0 ];
}

message GetPurchaseSheetResponse {
    PurchaseSheet                                             purchase_sheet = 1 [ (validate.rules).message.required = true ];
    map<uint64, ceres.merchandise.GetManySkuResponse.SkuInfo> skus           = 2 [ (validate.rules).map = {no_sparse : true} ]; //sku信息map
    map<uint64, ceres.enterprise.Supplier>                    suppliers      = 5 [ (validate.rules).map = {no_sparse : true} ]; // 供应商信息map
    map<uint64, ceres.enterprise.GroupUser>                   group_users    = 6 [ (validate.rules).map = {no_sparse : true} ]; // 采购员和操作人
    map<string, ceres.merchandise.Ssu>                        ssu_snaps      = 7 [ (validate.rules).map = {no_sparse : true} ]; // ssu快照map
}

message ListPurchaseSheetRequest {
    string                    q             = 1;
    uint64                    begin_time    = 2 [ (validate.rules).uint64.gt = 0 ];
    uint64                    end_time      = 3 [ (validate.rules).uint64.gt = 0 ];
    int32                     status        = 4;                                              //状态（看PurchaseSheet.Status定义）
    repeated uint64           supplier_ids  = 6 [ (validate.rules).repeated.unique = true ]; // 供应商
    repeated uint64           purchaser_ids = 7 [ (validate.rules).repeated.unique = true ]; // 采购员
    string                    serial_no     = 8;                                              //自定义编码
    ceres.common.PagingParams paging        = 16 [ (validate.rules).message.required = true ];
    repeated ceres.common.SortBy sort_by    = 17;
}

message ListPurchaseSheetResponse {
    repeated PurchaseSheet                  purchase_sheets = 1;
    map<uint64, ceres.enterprise.Supplier>  suppliers       = 2 [ (validate.rules).map = {no_sparse : true} ]; // 供应商信息map
    map<uint64, ceres.enterprise.GroupUser> group_users     = 3 [ (validate.rules).map = {no_sparse : true} ]; // 采购员和操作人
    ceres.common.PagingResult               paging          = 4 [ (validate.rules).message = {required : true} ];
}

message CreateInquiryPriceRequest {
    InquiryPrice inquiry_price = 1 [ (validate.rules).message.required = true ];
}

message CreateInquiryPriceResponse {
    InquiryPrice inquiry_price = 1 [ (validate.rules).message.required = true ];
}

message ListInquiryPriceRequest {
    string          q            = 1;                                              // 搜索（暂时没有实现）
    repeated uint64 category_ids = 2 [ (validate.rules).repeated.unique = true ]; // 分类ID
    repeated uint64 supplier_ids = 3 [ (validate.rules).repeated.unique = true ]; // 供应商
    repeated uint64 spu_ids      = 4 [ (validate.rules).repeated.unique = true ]; // spuID
    uint64          begin_time   = 5 [ (validate.rules).uint64.gt = 0 ];           // 开始
    uint64          end_time     = 6 [ (validate.rules).uint64.gt = 0 ];           // 结束
    int32           source_type  = 7;                                              // 询价来源

    ceres.common.PagingParams paging     = 8 [ (validate.rules).message.required = true ];
    repeated ceres.common.SortBy sort_by = 9;
}

message ListInquiryPriceResponse {
    repeated InquiryPrice                                     inquiry_prices = 1;
    map<uint64, ceres.merchandise.GetManySkuResponse.SkuInfo> skus           = 2 [ (validate.rules).map = {no_sparse : true} ]; //sku信息map
    map<string, ceres.merchandise.Ssu>                        ssu_snaps      = 3 [ (validate.rules).map = {no_sparse : true} ]; // ssu快照map
    map<uint64, ceres.enterprise.Supplier>                    suppliers      = 5 [ (validate.rules).map = {no_sparse : true} ]; // 供应商信息map
    map<uint64, ceres.enterprise.GroupUser>                   group_users    = 6 [ (validate.rules).map = {no_sparse : true} ]; // 采购员和操作人
    ceres.common.PagingResult                                 paging         = 7 [ (validate.rules).message = {required : true} ];
}

message ImportInquiryPriceRequest {
    string excel_url = 1; // 导入表格url
}

message ImportInquiryPriceResponse {
    ceres.asynctask.Task task = 1;
}

message ImportInquiryPriceTmplRequest {
    uint64 supplier_id = 1 [ (validate.rules).uint64.gt = 0 ];
}

message ImportInquiryPriceTmplResponse {
    ceres.asynctask.Task task = 1 [ (validate.rules).message = {required : true} ];
}

/*-------------------------------------------------------------------------------------------*/
// 数据结构
message PurchaseTaskSrcRelation {
    option (dao.partition_count) = 100;
    option (dao.model_type)      = TYPE_PURCHASE_SRC_RELATION;

    message Details {
        message Detail {
            uint64 sku_id           = 1 [ (validate.rules).uint64.gt = 0 ];
            uint64 detail_id        = 2;
            uint64 purchase_task_id = 3 [ (validate.rules).uint64.gt = 0 ];
        }
        repeated Detail details = 1 [ (validate.rules).repeated = {min_items : 1} ];
    }

    // @inject_tag: gorm:"PRIMARY_KEY"
    uint64 purchase_task_src_relation_id = 1;
    uint64 create_time                   = 4 [ (setter.include) = true ]; // 创建时间
    uint64 update_time                   = 5 [ (setter.include) = true ]; // 修改时间
    uint64 delete_time                   = 6 [ (setter.include) = true ]; // 删除时间，非0表示已删除

    uint64 group_id         = 10 [ (setter.include) = true ];
    uint64 station_id       = 11 [ (setter.include) = true ]; //[ (validate.rules).uint64.gt = 0 ]
    uint64 request_sheet_id = 12 [ (validate.rules).uint64.gt = 0 ];

    Details details = 20 [ (validate.rules).message.required = true ];
}

// 采购任务
message PurchaseTask {
    option (dao.partition_count) = 100;
    option (dao.model_type)      = TYPE_PURCHASE_TASK;
    option (dao.sn_type)         = TYPE_PURCHASE_TASK;

    message RequestDetails {
        message RequestDetail {
            uint64                         request_sheet_id        = 1; // 订单号，库存变动记录id，手动创建为空
            uint64                         detail_id               = 2; // 明细id
            uint64                         creator_id              = 3; // 创建者
            uint64                         ssu_revision            = 4;
            uint64                         customer_id             = 5; // 商户
            uint64                         unit_id                 = 6;
            ceres.merchandise.UnitValueSet value                   = 7; // 需求数量价格
            string                         request_sheet_serial_no = 8; // 单据编码（订单编码，生产计划编码等）
            string                         remark                  = 9; //  备注
            uint64                         sheet_unit_id           = 10;
            uint64                         sheet_ssu_revision      = 11;
            ceres.merchandise.UnitValueSet sheet_value             = 12; // 需求数量价格
            uint64                         product_sku_id          = 13; // 生产关联采购计划专用，成品sku的id
            RequestSource                  request_source          = 14 [ (validate.rules).message = {required: true} ]; // 来源类型
        }
        repeated RequestDetail request_details = 1 [ (validate.rules).repeated = {min_items : 1} ];
    }
    message PurchaseDetails {
        message PurchaseDetail {
            ceres.merchandise.UnitValueSet value             = 1 [ (validate.rules).message.required = true ]; // 实际采购数量价格
            uint64                         purchase_sheet_id = 2 [ (validate.rules).uint64.gt = 0 ];
            uint32                         detail_id         = 3;
            uint64                         ssu_revision      = 4 [ (validate.rules).uint64.gt = 0 ];
            uint64                         unit_id           = 6 [ (validate.rules).uint64.gt = 0 ];
            string                         remark            = 7; // 备注
        }
        repeated PurchaseDetail purchase_details = 1;
    }

    message PurchaseSheetIds {
        repeated uint64 purchase_sheet_ids = 1;
    }

    // message SrcPurchaseTasks {
    //     message SrcPurchaseTask {
    //         uint64 purchase_task_ids = 1;
    //         string request_quantity  = 2;
    //         string plan_quantity     = 3;
    //     }
    //     repeated SrcPurchaseTask src_purchase_tasks = 1;
    // }

    enum Status {
        STATUS_UNSPECIFIED = 0;
        PREPARE            = 256;  // 未下达
        RELEASED           = 512;  // 已下达
        FINISHED           = 1024; // 已完成
    }

    enum RequestSource {
        UNSPECIFIED = 0;
        ORDER       = 256;  // 订单
        PROCESS     = 512;  //生产计划
        STOCK       = 1024; // 库存
        MANUAL      = 2048; //手工新建
        DIFF        = 4096; //差异采购
        PACK        = 8192; //包装计划
    }

    enum Type {
        TYPE_UNSPECIFIED = 0;
        TMP              = 256; // 临采
        COMMON           = 512; // 非临采
    }

    // @inject_tag: gorm:"PRIMARY_KEY"
    uint64 purchase_task_id = 1;                                              // 主键
    Status status           = 2 [ (validate.rules).message = {required: true} ]; // 状态bitmap
    uint64 create_time      = 4 [ (setter.include) = true ];                  // 创建时间
    uint64 update_time      = 5 [ (setter.include) = true ];                  // 修改时间
    uint64 delete_time      = 6 [ (setter.include) = true ];                  // 删除时间，非0表示已删除

    uint64 group_id          = 10 [ (setter.include) = true ];
    uint64 station_id        = 11 [ (setter.include) = true ];
    uint64 sku_id            = 13 [ (validate.rules).uint64.gt = 0 ];
    uint64 supplier_id       = 16;
    uint64 purchaser_id      = 17;
    uint64 service_period_id = 18;

    RequestDetails  request_details  = 20 [ (validate.rules).message.required = true ];
    PurchaseDetails purchase_details = 21;
    RequestSource   request_source   = 22 [ (validate.rules).message = {required: true} ];  // 原用于标记该任务的来源，现用来表示最新一个任务的来源，基于：新增/新同步的任务中只有一条详情
    // SrcPurchaseTasks src_purchase_tasks = 22;
    uint64                         purchase_time      = 23;
    string                         serial_no          = 24;                                              // 编号
    ceres.merchandise.UnitValueSet request_value      = 25;                                              // 需求数量价格
    ceres.merchandise.UnitValueSet plan_value         = 26;                                              // 计划数量价格
    ceres.merchandise.UnitValueSet purchase_value     = 27;                                              // 采购数量价格
    uint64                         batch_id           = 28;                                              // 波次
    Type                           type               = 29 [ (validate.rules).message = {required: true} ]; // 采购类型
    uint64                         release_time       = 30;                                              // 下达时间，非0表示已删除
    PurchaseSheetIds               purchase_sheet_ids = 31;                                              // 关联的采购单id
}

// 波次（采购任务过滤项需要使用，单独存储提高性能）
message Batch {
    option (dao.partition_count) = 100;
    option (dao.model_type)      = TYPE_PURCHASE_BATCH;

    // @inject_tag: gorm:"PRIMARY_KEY"
    uint64 batch_id    = 1;                             // 主键
    uint64 create_time = 4 [ (setter.include) = true ]; // 创建时间
    uint64 update_time = 5 [ (setter.include) = true ]; // 修改时间
    uint64 delete_time = 6 [ (setter.include) = true ]; // 删除时间，非0表示已删除

    uint64 group_id          = 10 [ (setter.include) = true ];
    uint64 station_id        = 11 [ (setter.include) = true ]; //[ (validate.rules).uint64.gt = 0 ]
    uint64 service_period_id = 18;

    string name               = 20;
    uint64 last_release_time  = 21; // 最近下达时间
    uint64 last_submit_time   = 22; // 最近发布时间
    uint64 last_purchase_time = 23; // 最近交期时间 ， 订单发布采购计划如果用的自动算交期可以不传，其他时候都要传
}

// 差异任务
//message DiffTask {
//    enum Status {
//        NIL = 0;
//        INIT = 256; // 未发布
//        DISPATCHED = 512; //已发布
//    }
//
//    uint64 purchase_task_id = 1; // 主键
//    Status status = 2; // 状态bitmap
//    uint64 create_time = 4; // 创建时间
//    uint64 update_time = 5; // 修改时间
//    uint64 delete_time = 6; // 删除时间，非0表示已删除
//
//    uint64 group_id = 10;
//    uint64 station_id = 11;
//    uint64 creator_id = 12; // 创建者
//    uint64 sku_id = 13;
//    uint64 supplier_id = 16;
//    uint64 purchaser_id = 17;
//    uint64 time_config_id = 18;
//
//    RequestDetails request_details = 20;
//    uint64 purchase_time = 23;
//    uint64 type = 27; // 采购类型
//}

// 询价
message InquiryPrice {
    option (dao.partition_count) = 100;
    option (dao.model_type)      = TYPE_PURCHASE_INQUIRY_PRICE;

    enum SourceType {
        UNSPECIFIED  = 0;
        STATION      = 256;  // 业务平台
        PURCHASE_APP = 512;  // 采购app
        SUPPLIER_APP = 1024; // 供应商app
    }

    // @inject_tag: gorm:"PRIMARY_KEY"
    uint64 inquiry_price_id = 1;                             // 主键
    uint64 create_time      = 4 [ (setter.include) = true ]; // 创建时间
    uint64 update_time      = 5 [ (setter.include) = true ]; // 修改时间
    uint64 delete_time      = 6 [ (setter.include) = true ]; // 删除时间，非0表示已删除

    uint64 group_id     = 10 [ (setter.include) = true ];
    uint64 station_id   = 11 [ (setter.include) = true ];                               //[ (validate.rules).uint64.gt = 0 ]
    uint64 creator_id   = 12 [ (setter.include) = true, (dao.user_type) = GROUP_USER ]; // 创建者
    uint64 sku_id       = 13 [ (validate.rules).uint64.gt = 0 ];
    uint64 unit_id      = 14 [ (validate.rules).uint64.gt = 0 ]; // 单位ID
    uint64 ssu_revision = 15 [ (validate.rules).uint64.gt = 0 ]; // 版本
    uint64 supplier_id  = 16;

    //    ceres.merchandise.UnitValueSet price_value  = 20;
    string                      origin_place = 21;
    string                      desc         = 22;
    SourceType                  source_type  = 23; //询价来源
    ceres.merchandise.UnitValue std_price    = 24;
    ceres.merchandise.UnitValue pack_price   = 25;
}

// 采购单
message PurchaseSheet {
    option (dao.partition_count) = 100;
    option (dao.model_type)      = TYPE_PURCHASE_SHEET;
    option (dao.sn_type)         = TYPE_PURCHASE_SHEET;

    enum Status {
        UNSPECIFIED = 0;
        DRAFT       = 256; // 草稿
        COMMIT      = 512; //已提交
    }
    message SheetDetails {
        message SheetDetail {
            uint64                         sku_id                  = 1 [ (validate.rules).uint64.gt = 0 ];
            uint64                         ssu_revision            = 2 [ (validate.rules).uint64.gt = 0 ];
            uint64                         unit_id                 = 3 [ (validate.rules).uint64.gt = 0 ];
            ceres.merchandise.UnitValueSet purchase_value          = 4 [ (validate.rules).message.required = true ]; // 采购数量价格
            uint64                         purchase_task_id        = 5;
            string                         purchase_task_serial_no = 6;
            string                         remark                  = 7;
        }
        repeated SheetDetail details = 1 [ (validate.rules).repeated = {min_items : 1} ];
    }

    // @inject_tag: gorm:"PRIMARY_KEY"
    uint64 purchase_sheet_id = 1;                                              // 主键
    Status status            = 2 [ (validate.rules).message = {required: true} ]; // 状态bitmap
    uint64 create_time       = 4 [ (setter.include) = true ];                  // 创建时间
    uint64 update_time       = 5 [ (setter.include) = true ];                  // 修改时间
    uint64 delete_time       = 6 [ (setter.include) = true ];                  // 删除时间，非0表示已删除

    uint64 group_id   = 10 [ (setter.include) = true ];
    uint64 station_id = 11 [ (setter.include) = true ];                               // [ (validate.rules).uint64.gt = 0 ]
    uint64 creator_id = 12 [ (setter.include) = true, (dao.user_type) = GROUP_USER ]; // 创建者
    //    uint64 operator_id = 13; // 操作者
    uint64 supplier_id  = 16;
    uint64 purchaser_id = 17;
    string serial_no    = 19;

    SheetDetails details = 20 [ (validate.rules).message.required = true ];
    string       remark  = 21;
    string       amount  = 22;
}

// 同步规则
message PurchaseCreateRule {
    uint64 purchase_sync_rule_id = 1;                             // 主键
    uint64 create_time           = 4 [ (setter.include) = true ]; // 创建时间
    uint64 update_time           = 5 [ (setter.include) = true ]; // 修改时间
    uint64 delete_time           = 6 [ (setter.include) = true ]; // 删除时间，非0表示已删除

    uint64 group_id   = 10 [ (setter.include) = true ];
    uint64 station_id = 11 [ (setter.include) = true ]; // [ (validate.rules).uint64.gt = 0 ]
    uint64 creator_id = 12;                             // 创建者

    uint64 request_source = 21;
    string stock_limit    = 22;
    // AB单，商品分类？是否同步已发布的任务？...
}

message AsyncPurchaseTaskPayload {
    repeated PurchaseTask tasks = 1;
}

message ExportInquiryTmpl {
    enterprise.Supplier supplier                         = 1;
    repeated merchandise.GetManySkuResponse.SkuInfo skus = 2;
}

message Categories {
    repeated uint64 category_ids = 1;
}

message ImportPayload {
    uint32          rows       = 1;
    uint32          cols       = 2;
    repeated string boxes      = 3;
    repeated string fail_boxes = 4;
}
