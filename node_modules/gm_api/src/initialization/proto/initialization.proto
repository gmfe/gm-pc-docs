syntax = "proto3";

package ceres.initialization;
option  java_multiple_files = true;
option  go_package          = "code.guanmai.cn/back_end/ceres/initialization/proto;proto";
import "./google/api/annotations.proto";

service InitializationService {

    // 初始化整个系统的基础数据，包括单位、国家、省份等。这个接口要做到幂等。
    rpc InitializeSystem(InitializeSystemRequest) returns (InitializeSystemResponse) {
        option (google.api.http) = {
            post : "/ceres/initialization/InitializationService/InitializeSystem"
        };
    }

    // 创建一个用于测试/演示的 Group 以及相关的用户、商户等数据。
    // 这里的数据应该保持短小精干，尽量用较少的数据覆盖较多的情况。
    rpc InitializeTestingGroup(InitializeTestingGroupRequest) returns (InitializeTestingGroupResponse) {
        option (google.api.http) = {
            post : "/ceres/initialization/InitializationService/InitializeTestingGroup"
        };
    }

    // 创建一个异步任务，用于清除某一个 Group 所有的单据（如订单、采购单、出库单）
    rpc CleanGroupTicket(CleanGroupTicketRequest) returns (CleanGroupTicketResponse) {
        option (google.api.http) = {
            post : "/ceres/initialization/InitializationService/CleanGroupTicket"
        };
    }

    // 创建一个异步任务，用于清除某一个 Group 所有的数据（如订单、采购单、出库单、商户、商品、生产BOM）
    rpc CleanGroupData(CleanGroupDataRequest) returns (CleanGroupDataResponse) {
        option (google.api.http) = {
            post : "/ceres/initialization/InitializationService/CleanGroupData"
        };
    }
}

message InitializeSystemRequest {
    bool testing = 1; // 是否是测试阶段。测试阶段会插入较少的数据，从而加快速度。
}
message InitializeSystemResponse {
}

message InitializeTestingGroupRequest {

    // 在初始化到哪一个模块后就停止初始化
    enum StopAfter {
        STOP_AFTER_UNSPECIFIED       = 0;
        STOP_AFTER_SYSTEM            = 1;
        STOP_AFTER_ENTERPRISE        = 2;
        STOP_AFTER_MERCHANDISE       = 3;
        STOP_AFTER_PRODUCTION        = 4;
        STOP_AFTER_BOM               = 5;
        STOP_AFTER_MENU              = 6;
        STOP_AFTER_ORDER             = 7;
        STOP_AFTER_LEAVE_APPLICATION = 8;
    }

    bool      more             = 1; // 是否插入更多的数据，用于人工测试或者压力测试等场景。
    uint32    eshop_order_size = 2; // 每个学生/教职工用户初始化多少个 eshop 订单？只在 more 为 true 时生效。默认为 0。
    StopAfter stop_after       = 3; //
}
message InitializeTestingGroupResponse {
    // 注意下面的密码都是原始密码，还需要在客户端进行加密后再传过来

    uint64 group_id = 1;

    string admin_group_user_username = 10;
    string admin_group_user_phone    = 11;
    string admin_group_user_password = 12;

    string driver_group_user_username = 20;
    string driver_group_user_password = 21;

    string purchase1_group_user_username = 30;
    string purchase1_group_user_password = 31;
    string purchase2_group_user_username = 32;
    string purchase2_group_user_password = 33;

    string customer_user_username = 40;
    string customer_user_phone    = 41;
    string customer_user_password = 42;
}

message CleanGroupTicketRequest {
    uint64 group_id = 1;
}
message CleanGroupTicketResponse {
    uint64 task_id = 1;
}

message CleanGroupDataRequest {
    uint64 group_id = 1;
}
message CleanGroupDataResponse {
    uint64 task_id = 1;
}
