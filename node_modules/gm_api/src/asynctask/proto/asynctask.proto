syntax = "proto3";

package ceres.asynctask;
option  java_multiple_files = true;
option  go_package          = "code.guanmai.cn/back_end/ceres/asynctask/proto;proto";

import "./common/proto/common.proto";
import "./oauth/proto/oauth.proto";
import "./google/api/annotations.proto";
import "./include/protoc-gen-validate/validate.proto";

service AsyncTaskService {
    rpc CreateTask(CreateTaskRequest) returns (CreateTaskResponse);
    rpc DeleteTask(DeleteTaskRequest) returns (DeleteTaskResponse);
    rpc GetTask(GetTaskRequest) returns (GetTaskResponse);
    rpc ListTask(ListTaskRequest) returns (ListTaskResponse) {
        option (google.api.http) = {
            post : "/ceres/asynctask/AsyncTaskService/ListTask"
        };
    }

    //    rpc RegisterTaskDelegate(RegisterTaskDelegateRequest) returns (RegisterTaskDelegateResponse);
}

/*
异步任务系统分为两个组件asynctask和taskdelegate
asynctask 异步任务中心
	定义任何和任务数据的数据模型，并负责任务调度和状态维护，不负责任务的执行
	提供创建任务/取消任务/读取任务的接口
	内置调度器，负责调度全部任务

taskdelegate 任务委托
	负责任务的业务逻辑实现，由定义任务类型的模块自行实现
	通过RPC方式被调用，即代码是允许在业务模块的，实现时请注意异步任务对普通请求的性能影响
	约束参考api/asynctask.proto
		PrepareTask-预处理
			1. 只会调用一次
			2. 默认超时5m

		ExecuteTask-执行任务
			1. 重复调用直到任务标记为结束状态
			2. 默认超时2m
			3. 要求实现是幂等的

业务模块怎么开发？
1. 引入asynctask/api实现taskdelegate要求的接口；参考asynctask/server/task_delegate_server.go
2. 注册taskdelegate实现到业务模块的grpc.Server；参考asynctask/server/impl.go中的asynctaskapi.RegisterAsyncTaskDelegateServiceServer
3. 注册Task类型及其TaskDelegate到asynctask异步任务中心；参考asynctask/proto/asynctask.proto的RegisterTaskDelegate

TODO
	分布式锁
	更加精细的调度器
*/

// 任务委托
message TaskDelegate {
    Task.Type type                   = 1;
    string    endpoint               = 2; // 代理节点
    uint32    max_concurrent_task    = 3; // 任务并发数
    uint32    task_max_schdule_count = 4; // 任务最大调度次数
    uint32    task_max_failure_count = 5; // 任务最大失败次数
}

// 任务
message Task {
    // 任务分类
    enum Category {
        CATEGORY_UNSPECIFIED = 0;

        CATEGORY_EXPORT = 1;   // 导入导出
        CATEGORY_OTHER  = 999; // 未分类/其他分类
    }

    // 任务类型，形如TYPE_模块_数据模型_操作
    // 前端展示的任务名称为“任务类型名称-时间”，任务类型名称请填写在枚举的注释中。请认真填写任务类型名称，以“数据类型名称操作名称”的格式定义
    enum Type {
        TYPE_UNSPECIFIED = 0;

        TYPE_ASYNCTASK_FOO_TEST_NORMAL      = 1; // 正常测试
        TYPE_ASYNCTASK_FOO_TEST_MAX_FAILURE = 2; // 失败测试

        TYPE_ORDER_ORDER_IMPORT               = 1000; // 订单导入
        TYPE_ORDER_ORDERSTATE_UPDATE          = 1001; // 订单状态修改
        TYPE_ORDER_ORDEROUTSTOCK_UPDATE       = 1002; // 订单缺货修改
        TYPE_ORDER_ORDERSSUPRICE_UPDATE       = 1003; // 订单ssu价格修改
        TYPE_ORDER_SSUPRICE_SYNC              = 1004; // 报价单最新单价同步到订单
        TYPE_ORDER_ORDER_CREATE               = 1005; // 订单创建
        TYPE_ORDER_ORDER_EXPORT               = 1006; // 订单导出
        TYPE_ORDER_ORDERDRIVER_UPDATE         = 1007; // 订单司机修改
        TYPE_ORDER_ORDERDRIVER_AUTOUPDATE     = 1008; // 订单司机自动修改
        TYPE_ORDER_ORDER_SUBMIT_PURCHASE_TASK = 1009; // 订单发布采购计划
        TYPE_ORDER_SCAN_RECEIPT               = 1010; // 扫码回单

        TYPE_PRODUCTION_TASK_CREATE             = 1100; // 生产计划创建
        TYPE_PRODUCTION_PURCHASE_SKU_EXPORT     = 1101; // 物料需求汇总
        TYPE_PRODUCTION_TASK_EXPORT             = 1102; // 生产计划导出
        TYPE_PRODUCTION_BOM_EXPORT              = 1103; // bom导出
        TYPE_PRODUCTION_TASK_DATA_EXPORT        = 1104; // 生产计划报表导出
        TYPE_PRODUCTION_BOM_IMPORT              = 1105; // bom导入
        TYPE_PRODUCTION_PROCESS_TEMPLATE_EXPORT = 1106; // 工序导出

        TYPE_MERCHANDISE_SKU_EXPORT     = 1200; // 商品导出（task_data.parameters.values[0] 是 excel 文件的下载链接）
        TYPE_MERCHANDISE_SSU_EXPORT     = 1201; // 商品规格导出
        TYPE_MERCHANDISE_SKU_SSU_UPDATE = 1202; // sku和ssu批量修改
        TYPE_MERCHANDISE_CREATE_ALL     = 1203; // 分类,spu,sku新建
        TYPE_MERCHANDISE_CREATE_SSU     = 1204; // ssu新建

        TYPE_ENTERPRISE_CUSTOMER_EXPORT = 1300; // 商户导出
        TYPE_ENTERPRISE_CUSTOMER_IMPORT = 1301; // 商户导入
        TYPE_ENTERPRISE_SUPPLIER_EXPORT = 1302; // 供应商导入

        TYPE_INVENTORY_STOCK_SHEET_LIST_EXPORT      = 1400; // 库存单据导出
        TYPE_INVENTORY_BATCH_LOG_EXPORT             = 1402; // 批次流水导出
        TYPE_INVENTORY_COMMIT_ADJUST_SHEET          = 1403; // 库存调整单提交
        TYPE_INVENTORY_BATCH_SYNC_STOCK_SHEET       = 1404; // 批量同步单据
        TYPE_INVENTORY_CHANGE_LOG_EXPORT            = 1410; // 商品台账导出
        TYPE_INVENTORY_PURCHASE_IN_LOG_EXPORT       = 1411; // 采购入库明细导出
        TYPE_INVENTORY_SALE_OUT_LOG_EXPORT          = 1412; // 销售出库明细导出
        TYPE_INVENTORY_MATERIAL_OUT_LOG_EXPORT      = 1413; // 领料出库明细导出
        TYPE_INVENTORY_MATERIAL_IN_LOG_EXPORT       = 1414; // 退料入库明细导出
        TYPE_INVENTORY_PRODUCT_IN_LOG_EXPORT        = 1415; // 生产入库明细导出
        TYPE_INVENTORY_REFOUND_OUT_LOG_EXPORT       = 1416; // 采购退货出库明细导出
        TYPE_INVENTORY_OTHER_OUT_LOG_EXPORT         = 1417; // 其他出库明细导出
        TYPE_INVENTORY_OTHER_IN_LOG_EXPORT          = 1418; // 其他入库明细导出
        TYPE_INVENTORY_INCREASE_IN_LOG_EXPORT       = 1419; // 盘盈入库明细导出
        TYPE_INVENTORY_LOSS_OUT_LOG_EXPORT          = 1420; // 盘亏出库明细导出
        TYPE_INVENTORY_CUSTOMER_TURNOVER_EXPORT     = 1421; // 周转物商户借出汇总导出
        TYPE_INVENTORY_LOAN_EXPORT                  = 1422; // 周转物借出记录导出
        TYPE_INVENTORY_REVERT_EXPORT                = 1423; // 周转物归还记录导出
        TYPE_INVENTORY_CUSTOMER_TURNOVER_LOG_EXPORT = 1424; // 商户周转物借出归还记录

        TYPE_INVENTORY_SHEET_EXPORT = 1450; // 单据导出
        //        TYPE_INVENTORY_SHEET_TYPE_REFUND_OUT_EXPORT   = 1451; // 采购退货出库单据导出
        //        TYPE_INVENTORY_SHEET_TYPE_SALE_OUT_EXPORT     = 1452; // 销售出库单据导出
        //        TYPE_INVENTORY_SHEET_TYPE_PRODUCT_IN_EXPORT   = 1453; // 生产入库单据导出
        //        TYPE_INVENTORY_SHEET_TYPE_MATERIAL_IN_EXPORT  = 1454; // 生退料入库明单据导出
        //        TYPE_INVENTORY_SHEET_TYPE_MATERIAL_OUT_EXPORT = 1455; // 领料出库单据导出
        //        TYPE_INVENTORY_SHEET_TYPE_OTHER_IN_EXPORT     = 1456; // 其他入库单据导出
        //        TYPE_INVENTORY_SHEET_TYPE_OTHER_OUT_EXPORT    = 1457; // 其他出库单据导出
        //        TYPE_INVENTORY_SHEET_TYPE_INVENTORY_EXPORT    = 1458; // 盘点单单据导出

        TYPE_INVENTORY_BATCH_UPDATE_STOCK_SHEET = 1498; // 批量修改单据
        TYPE_INVENTORY_SKU_STOCK_EXPORT         = 1499; // 库存总览导出

        TYPE_SORTING_SORTING_PERFORMANCE_EXPORT = 1500; // 分拣绩效导出

        TYPE_PURCHASE_PURCHASE_SHEET_EXPORT               = 1601; //采购单导出
        TYPE_PURCHASE_INQUIRY_PRICE_IMPORT                = 1602; //询价导入
        TYPE_PURCHASE_PURCHASE_TASK_RELEASE               = 1603; //下达采购计划
        TYPE_PURCHASE_PURCHASE_TASK_SWITCH_SUPPLIER       = 1604; //批量修改供应商
        TYPE_PURCHASE_PURCHASE_TASK_SWITCH_PURCHASER      = 1605; //批量修改采购员
        TYPE_PURCHASE_PURCHASE_TASK_CREATE_PURCHASE_SHEET = 1606; //批量生成采购单
        TYPE_PURCHASE_PURCHASE_TASK_EXPORT                = 1607; //采购计划导出
        TYPE_PURCHASE_INQUIRY_PRICE_IMPORT_TMPL           = 1608; //询价导入模版

        TYPE_ESHOP_ESHOP_ORDER_EXPORT      = 1706; // eshop订单导出
        TYPE_ESHOP_ESHOP_ORDER_UPDATE      = 1707; // eshop订单批量修改
        TYPE_ESHOP_LEAVEAPPLICATION_EXPORT = 1801; // eshop请假导出

        // 售后

        TYPE_AFTER_SALE_EXPORT_ORDER        = 1900; // 导出售后订单
        TYPE_AFTER_SALE_EXPORT_TASK         = 1901; // 导出取货任务
        TYPE_AFTER_SALE_EXPORT_ORDER_SHEET  = 1902; // 导出售后分析报表
        TYPE_AFTER_SALE_EXPORT_ORDER_DETAIL = 1903; // 导出订单售后明细报表

        // INITIALIZATION
        TYPE_INITIALIZATION_CLEAN_GROUP_TICKET = 2000; // 清空 Group 单据
        TYPE_INITIALIZATION_CLEAN_GROUP_DATA   = 2001; // 清空 Group 数据

        TYPE_FINANCE_SETTLE_EXPORT             = 2100; // 商户结算信息导出
        TYPE_FINANCE_BATCH_PAY_SETTLE          = 2101; // 结款单批量结算
        TYPE_FINANCE_FLOW_EXPORT               = 2102; // 流水导出
        TYPE_FINANCE_ACCOUNT_BALANCE_EXPORT    = 2103; // 商户余额导出
        TYPE_FINANCE_BATCH_SUBMIT_SETTLE_SHEET = 2104; // 结款单批量提交
    }

    enum State {
        STATE_UNSPECIFIED = 0;

        STATE_CREATED   = 1; // 已创建，开始状态
        STATE_READY     = 2; // 已就绪，等待被第一次调度Execute
        STATE_RUNNING   = 3; // 执行中，循环调用Execute
        STATE_CANCELED  = 4; // 已取消，结束状态
        STATE_FAULTED   = 5; // 已失败，结束状态
        STATE_COMPLETED = 6; // 已完成，结束状态
    }

    // @inject_tag: gorm:"PRIMARY_KEY"
    uint64 task_id     = 1;
    uint64 status      = 2;
    uint64 revision    = 3;
    uint64 create_time = 4;
    uint64 update_time = 5;
    uint64 delete_time = 6;

    // @inject_tag: gorm:"INDEX:group_id"
    uint64   group_id   = 10;
    uint64   creator_id = 11; // 任务创建者
    Category category   = 12; // 任务类型

    // @inject_tag: gorm:"INDEX:type_state"
    Type   type     = 20; // 任务类型
    uint32 priority = 21; // 优先级，高的优先
    /*
	单例模式，非0时，此Type下具有相同singleton_id的任务只能并发调度一个
	譬如设置singleton_id为group_id可实现group唯一；搭配max_concurrent_task=1，并指定singleton_id为固定值，可以实现全局唯一
	*/
    uint64 singleton_id = 22;

    // @inject_tag: gorm:"type:mediumblob"
    bytes          data      = 23; // 任务创建参数
    oauth.UserInfo user_info = 24; // 任务创建时的用户信息，asynctask.从ctx中获取并存储，暂无清除逻辑
    string         name      = 25; // 任务名字，覆盖默认类型名字；业务自行处理i18n问题

    // 调度数据，调度器负责维护
    // @inject_tag: gorm:"INDEX:type_state"
    State  state              = 40; // 任务状态
    bool   is_busy            = 41; // 是否正在被调度
    uint64 schedule_time      = 42; // 上次被调度时间，同优先级默认调度上次调度早的任务
    uint32 schedule_count     = 43; // 调度次数，task.schdule_count >= taskdelegate.task_max_schdule_count则调度器将任务标记为“已失败”
    uint32 failure_count      = 44; // 失败次数，task.failure_count >= taskdelegate.task_max_failure_count则调度器将任务标记为“已失败”
    uint64 next_schedule_time = 45; // 下次可调度时间，调度失败的任务会内置一个调度间隔
}

// 任务数据，Delegate自行维护
message TaskData {
    // 任务计数
    message Count {
        uint32 total   = 1; // 总数
        uint32 created = 2; // 新增操作的
        uint32 updated = 3; // 更新操作的
        uint32 deleted = 4; // 删除操作的

        uint32 reserve1 = 10; // 任务自定义的计数1
        uint32 reserve2 = 11; // 任务自定义的计数2
    }

    // @inject_tag: gorm:"PRIMARY_KEY"
    uint64 task_data_id = 1; // task_id

    uint32 total         = 20; // 进度最大值，Prepare填写
    uint32 progress      = 21; // 当前进度，取值[0, total]，Execute增加
    Count  success_count = 22; // 成功计数
    Count  failure_count = 23; // 失败计数

    // @inject_tag: gorm:"type:mediumblob"
    bytes            data               = 100; // 任务负载数据，一般是proto序列化的二进制
    common.StringSet parameters         = 101; // 任务结果参数，查看任务结果时无法解析data，可把关键结果存储到这里
    string           success_attach_url = 102; // 任务成功下载附件url
    string           failure_attach_url = 103; // 任务失败下载附件url；不排除和success_attach_url同时存在的可能性，都定义上
}

message CreateTaskRequest {
    Task task = 1 [ (validate.rules).message.required = true ];
}

message CreateTaskResponse {
    Task task = 1;
}

message DeleteTaskRequest {
    uint64 task_id = 1;
}

message DeleteTaskResponse {
    Task task = 1;
}

message GetTaskRequest {
    uint64 task_id = 1;
}

message GetTaskResponse {
    Task     task      = 1;
    TaskData task_data = 2;
}

message ListTaskRequest {
    Task.Category category           = 1;
    Task.Type     type               = 2;
    repeated Task.State states       = 3;
    uint64              singleton_id = 4;
}

message ListTaskResponse {
    repeated Task         tasks      = 1;
    map<uint64, TaskData> task_datas = 2;
}

message RegisterTaskDelegateRequest {
    TaskDelegate task_delegate = 1;
}

message RegisterTaskDelegateResponse {
}

message Foo {
    uint64 foo_id   = 1;
    string foo_name = 2;
}

message FooPrintTaskData {
    repeated Foo print_foos = 1;
}
