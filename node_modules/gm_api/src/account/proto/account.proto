syntax = "proto3";

package ceres.account;
option java_multiple_files = true;
option go_package = "code.guanmai.cn/back_end/ceres/account/proto;proto";

import "./google/api/annotations.proto";
import "./include/protoc-gen-validate/validate.proto";

service AccountService {
    rpc CreateAccount(CreateAccountRequest) returns (CreateAccountResponse) {
        option (google.api.http) = {
            post : "/ceres/account/AccountService/CreateAccount"
        };
    }
    rpc UpdateAccount(UpdateAccountRequest) returns (UpdateAccountResponse) {
        option (google.api.http) = {
            post : "/ceres/account/AccountService/UpdateAccount"
        };
    }
    rpc DeleteAccount(DeleteAccountRequest) returns (DeleteAccountResponse) {
        option (google.api.http) = {
            post : "/ceres/account/AccountService/DeleteAccount"
        };
    }
    rpc GetAccount(GetAccountRequest) returns (GetAccountResponse) {
        option (google.api.http) = {
            post : "/ceres/account/AccountService/GetAccount"
        };
    }

    rpc CreateProfile(CreateProfileRequest) returns (CreateProfileResponse) {
        option (google.api.http) = {
            post : "/ceres/account/AccountService/CreateProfile"
        };
    }
    rpc UpdateProfile(UpdateProfileRequest) returns (UpdateProfileResponse) {
        option (google.api.http) = {
            post : "/ceres/account/AccountService/UpdateProfile"
        };
    }
    rpc GetProfile(GetProfileRequest) returns (GetProfileResponse) {
        option (google.api.http) = {
            post : "/ceres/account/AccountService/GetProfile"
        };
    }
    rpc ListProfile(ListProfileRequest) returns (ListProfileResponse) {
        option (google.api.http) = {
            post : "/ceres/account/AccountService/ListProfile"
        };
    }
}

// 账号
message Account {
    enum Type {
        TYPE_UNSPECIFIED = 0;
        TYPE_PUBLIC      = 1; // 全局账号，scope必为0，全局账号必须是使用验证过的凭证创建的，譬如验证过的手机号、微信unionid
        TYPE_PRIVATE     = 2; // 私有账号，scope不为0，可在scope内随意创建，不同scope间账号验证凭证可以重复
    }

    enum Status {
        STATUS_UNSPECIFIED = 0;
        STATUS_DISABLED    = 256; // 2^08，禁用账号
    }

    // @inject_tag: gorm:"PRIMARY_KEY;AUTO_INCREMENT:false"
    uint64 account_id  = 1;
    uint64 status      = 2;
    uint64 revision    = 3;
    uint64 create_time = 4;
    uint64 update_time = 5;
    uint64 delete_time = 6;

    Type type = 10 [ (validate.rules).message = {required: true} ];
    // @inject_tag: gorm:"INDEX:scope_subtype_username,scope_subtype_phone,scope_subtype_wechat_unionid"
    uint64 scope = 11; // 作用域，目前scope只有group_id
    // @inject_tag: gorm:"INDEX:scope_subtype_username,scope_subtype_phone,scope_subtype_wechat_unionid"
    uint64 subtype = 12; // 子类型，目前用作区分xxUser，一个scope下不同subtype间账号验证凭证可以重复，可以使用ModelType区分

    // 验证信息
    // @inject_tag: gorm:"INDEX:scope_subtype_username"
    string username = 30; // 登录用户名
    string password = 31; // 登录密码, 需要客户端使用 sha256 加密一遍；后台使用bcrypt加密
    // @inject_tag: gorm:"INDEX:scope_subtype_phone"
    string phone         = 32;
    string email         = 33;
    string wechat_openid = 34;
    // @inject_tag: gorm:"INDEX:scope_subtype_wechat_unionid"
    string wechat_unionid  = 35;
    string wechat_nickname = 36;
    // @inject_tag: gorm:"size:200"
    string wechat_avatar = 37;
}

// 用户资料
message Profile {
    // @inject_tag: gorm:"PRIMARY_KEY"
    uint64 profile_id  = 1; // 即account_id
    uint64 status      = 2;
    uint64 revision    = 3;
    uint64 create_time = 4;
    uint64 update_time = 5;
    uint64 delete_time = 6;

    string nickname = 20 [ (validate.rules).string = {max_len : 64} ]; // 名字
    string avatar   = 21;                                              // 头像
}

message CreateAccountRequest {
    Account account = 1;
}

message CreateAccountResponse {
    Account account = 1;
}

message UpdateAccountRequest {
    Account account = 1;
}

message UpdateAccountResponse {
    Account account = 1;
}

message DeleteAccountRequest {
    uint64 account_id = 1;
}

message DeleteAccountResponse {
    Account account = 1;
}

message GetAccountRequest {
    uint64 account_id = 1; // 指定账号

    // 类型和作用域
    Account.Type type    = 2;
    uint64       scope   = 3;
    uint64       subtype = 4;

    // 以下检索字段来自Account，只匹配第一个非空字段
    string username       = 30;
    string phone          = 32;
    string email          = 33;
    string wechat_unionid = 35;
}

message GetAccountResponse {
    Account account = 1;
}

message CreateProfileRequest {
    Profile profile = 1;
}

message CreateProfileResponse {
    Profile profile = 1;
}

message UpdateProfileRequest {
    Profile profile = 1;
}

message UpdateProfileResponse {
    Profile profile = 1;
}

message GetProfileRequest {
    uint64 profile_id = 1;
}

message GetProfileResponse {
    Profile profile = 1;
}

message ListProfileRequest {
    repeated uint64 profile_ids = 1;
}

message ListProfileResponse {
    repeated Profile profiles = 1;
}
