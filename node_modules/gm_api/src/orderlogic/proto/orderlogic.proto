syntax = "proto3";

package ceres.orderlogic;
option java_multiple_files = true;
option go_package          = "code.guanmai.cn/back_end/ceres/orderlogic/proto;proto";
import "./google/api/annotations.proto";
import "./include/protoc-gen-validate/validate.proto";

import "./common/proto/common.proto";
import "./common/proto/options.proto";
import "./order/proto/order.proto";
import "./purchase/proto/purchase.proto";
import "./asynctask/proto/asynctask.proto";
import "./merchandise/proto/merchandise.proto";
import "./delivery/proto/delivery.proto";
import "./cmd/protoc-gen-dao/proto/dao.proto";
import "./enterprise/proto/enterprise.proto";

service OrderLogicService {
    // 订单可能返回报错
    //        ERROR_LOAD_LOCATION = 20200001; // 时区错误
    //        ERROR_RECEIVE_TIME  = 20200002; // 收货时间有误，当前时间不允许下单
    //        ERROR_NO_DETAIL     = 20200003; // 无订单详情
    // 获取购物车信息
    rpc GetCartOrder(GetCartOrderRequest) returns (GetCartOrderResponse) {
        option (google.api.http) = {
            post : "/ceres/orderlogic/OrderLogicService/GetCartOrder"
        };
    }
    // 创建或更新购物车信息
    rpc UpdateCartOrder(UpdateCartOrderRequest) returns (UpdateCartOrderResponse) {
        option (google.api.http) = {
            post : "/ceres/orderlogic/OrderLogicService/UpdateCartOrder"
        };
    }

    // bshop创建订单接口, 实现：从购物车里面取订单数据，掉order的
    rpc CreateBshopOrder(CreateBshopOrderRequest) returns (CreateBshopOrderResponse) {
        option (google.api.http) = {
            post : "/ceres/orderlogic/OrderLogicService/CreateBshopOrder"
        };
    }

    // 自定义订单导入模板创建
    rpc CreateOrderTemplete(CreateOrderTempleteRequest) returns (CreateOrderTempleteResponse) {
        option (google.api.http) = {
            post : "/ceres/orderlogic/OrderLogicService/CreateOrderTemplete"
        };
    }
    // 自定义订单导入模板修改
    rpc UpdateOrderTemplete(UpdateOrderTempleteRequest) returns (UpdateOrderTempleteResponse) {
        option (google.api.http) = {
            post : "/ceres/orderlogic/OrderLogicService/UpdateOrderTemplete"
        };
    }
    // 自定义订单导入模板删除
    rpc DeleteOrderTemplete(DeleteOrderTempleteRequest) returns (DeleteOrderTempleteResponse) {
        option (google.api.http) = {
            post : "/ceres/orderlogic/OrderLogicService/DeleteOrderTemplete"
        };
    }
    // 获取自定义订单导入模板删除
    rpc GetOrderTemplete(GetOrderTempleteRequest) returns (GetOrderTempleteResponse) {
        option (google.api.http) = {
            post : "/ceres/orderlogic/OrderLogicService/GetOrderTemplete"
        };
    }
    // 获取自定义订单导入模板删除
    rpc ListOrderTemplete(ListOrderTempleteRequest) returns (ListOrderTempleteResponse) {
        option (google.api.http) = {
            post : "/ceres/orderlogic/OrderLogicService/ListOrderTemplete"
        };
    }
    // 自定义订单导入模板上传解析
    rpc UploadOrderTemplete(UploadOrderTempleteRequest) returns (UploadOrderTempleteResponse) {
        option (google.api.http) = {
            post : "/ceres/orderlogic/OrderLogicService/UploadOrderTemplete"
        };
    }
    // 批量修改订单状态
    rpc BatchUpdateOrderState(BatchUpdateOrderStateRequest) returns (BatchUpdateOrderStateResponse) {
        option (google.api.http) = {
            post : "/ceres/orderlogic/OrderLogicService/BatchUpdateOrderState"
        };
    }
    // 批量创建订单
    rpc BatchCreateOrder(BatchCreateOrderRequest) returns (BatchCreateOrderResponse) {
        option (google.api.http) = {
            post : "/ceres/orderlogic/OrderLogicService/BatchCreateOrder"
        };
    }
    // 批量修改订单单价
    rpc BatchUpdateOrderPrice(BatchUpdateOrderPriceRequest) returns (BatchUpdateOrderPriceResponse) {
        option (google.api.http) = {
            post : "/ceres/orderlogic/OrderLogicService/BatchUpdateOrderPrice"
        };
    }
    // 批量同步报价单价格到订单
    rpc BatchSyncPriceToOrder(BatchSyncPriceToOrderRequest) returns (BatchSyncPriceToOrderResponse) {
        option (google.api.http) = {
            post : "/ceres/orderlogic/OrderLogicService/BatchSyncPriceToOrder"
        };
    }
    // 批量分配司机
    rpc BatchUpdateOrderDriver(BatchUpdateOrderDriverRequest) returns (BatchUpdateOrderDriverResponse) {
        option (google.api.http) = {
            post : "/ceres/orderlogic/OrderLogicService/BatchUpdateOrderDriver"
        };
    }
    // 自动分配商户最近一次司机（智能规划）
    rpc AutoUpdateOrderDriver(AutoUpdateOrderDriverRequest) returns (AutoUpdateOrderDriverResponse) {
        option (google.api.http) = {
            post : "/ceres/orderlogic/OrderLogicService/AutoUpdateOrderDriver"
        };
    }

    // order模块ListOrder接口的扩展，用来解决proto间循环依赖导致的一些关联数据无法定义的问题
    rpc ListOrderWithRelation(ListOrderWithRelationRequest) returns (ListOrderWithRelationResponse) {
        option (google.api.http) = {
            post : "/ceres/orderlogic/OrderLogicService/ListOrderWithRelation"
        };
    }
    // order模块ListOrder接口的扩展，用来解决proto间循环依赖导致的一些关联数据无法定义的问题
    rpc ListOrderDetailWithRelation(ListOrderDetailWithRelationRequest) returns (ListOrderDetailWithRelationResponse) {
        option (google.api.http) = {
            post : "/ceres/orderlogic/OrderLogicService/ListOrderDetailWithRelation"
        };
    }

    // order生成采购任务
    rpc SyncPurchaseTaskFromOrder(SyncPurchaseTaskFromOrderRequest) returns (SyncPurchaseTaskFromOrderResponse) {
        option (google.api.http) = {
            post : "/ceres/orderlogic/OrderLogicService/SyncPurchaseTaskFromOrder"
        };
    }
    // 订单发布生产任务
    rpc DispatchProductionTaskFromOrder(DispatchProductionTaskFromOrderRequest) returns (DispatchProductionTaskFromOrderResponse) {
        option (google.api.http) = {
            post : "/ceres/orderlogic/OrderLogicService/DispatchProductionTaskFromOrder"
        };
        option (common.options.annotation) = {
            codes : "CODE_NO_ORDER_TO_PRODUCTION"
        };
    }
    // 导出生产采购任务汇总
    rpc ExportProductionPurchaseTask(ExportProductionPurchaseTaskRequest) returns (ExportProductionPurchaseTaskResponse) {
        option (google.api.http) = {
            post : "/ceres/orderlogic/OrderLogicService/ExportProductionPurchaseTask"
        };
    }

    // 导出订单
    rpc ExportOrder(ExportOrderRequest) returns (ExportOrderResponse) {
        option (google.api.http) = {
            post : "/ceres/orderlogic/OrderLogicService/ExportOrder"
        };
    }

    // 导出分拣绩效
    rpc ExportSortingPerformance(ExportSortingPerformanceRequest) returns (ExportSortingPerformanceResponse) {
        option (google.api.http) = {
            post : "/ceres/orderlogic/OrderLogicService/ExportSortingPerformance"
        };
    }

    // 从订单批量同步销售出库单
    rpc BatchSyncSaleOutStockSheetFromOrder(BatchSyncSaleOutStockSheetFromOrderRequest) returns (BatchSyncSaleOutStockSheetFromOrderResponse) {
        option (google.api.http) = {
            post : "/ceres/orderlogic/OrderLogicService/BatchSyncSaleOutStockSheetFromOrder"
        };
    }

    // 批量扫码回单操作
    rpc BatchScanReceipt(BatchScanReceiptRequest) returns (BatchScanReceiptResponse) {
        option (google.api.http) = {
            post : "/ceres/orderlogic/OrderLogicService/BatchScanReceipt"
        };
    }
}

// gRPC status code
message Status {
    enum Code {
        CODE_UNSPECIFIED            = 0;         // 正常
        CODE_NO_SSU_SYSTEMKEY       = 20200001;  // 订单自定义导入无 商品规格自定义编码、商品名 其中一项
        CODE_NO_CUSTOMER_SYSTEMKEY  = 20200002;  // 订单自定义导入无 商户编码和商户名 其中一项
        CODE_NO_QUANTITY_SYSTEMKEY  = 20200003;  // 订单自定义导入无 数量 其中一项
        CODE_NO_ORDER_TO_PRODUCTION = 20200004;  // 没有订单需要发布生产任务
        CODE_TASK_CONCURRENCY_LIMIT = 20200005;  // 任务达到并发数限制
    }
}

message OrderImportTemplete {
    option (dao.partition_count) = 1;
    option (dao.model_type)      = TYPE_ORDER_ORDER_IMPORT_TEMPLETE;

    enum Type {
        TYPE_UNSPECIFIED = 0;  // 无效
        TYPE_SYSTEM      = 1;  // 系统
        TYPE_CUSTOMIZE   = 2;  // 自定义
    }
    enum SystemKey {
        SYSTEMKEY_UNSPECIFIED             = 0;  // 无效字段
        SYSTEMKEY_SSU_NAME                = 1;  // 商品名
        SYSTEMKEY_SSU_CUSTOMIZE_CODE      = 2;  // 商品规格编码
        SYSTEMKEY_SSU_REMARK              = 3;  // 商品备注
        SYSTEMKEY_UNITPRICE               = 4;  // 商品价格
        SYSTEMKEY_CUSTOMER_CUSTOMIZE_CODE = 5;  // 商户编码
        SYSTEMKEY_CUSTOMERNAME            = 6;  // 商户名
        SYSTEMKEY_QUANTITY                = 7;  // 下单数
        SYSTEMKEY_ORDERNO                 = 8;  // 订单分批号
    }
    message RelationShip {
        message Relation {
            uint64 col_index     = 1;  // 所在列位置
            string relation_name = 2;  // 关联名称
            SystemKey system_key = 3;  // 系统名称
        }
        repeated Relation relations = 1;
    }
    message TitleCol {
        message TitleCols {
            // 1:"商户名"
            uint64 index    = 1;
            string col_name = 2;
        }
        repeated TitleCols title_cols = 1;
    }

    // @inject_tag: gorm:"PRIMARY_KEY"
    uint64 order_import_templete_id = 1;
    uint64 update_time              = 2;
    uint64 create_time              = 3;
    uint64 delete_time              = 4;

    uint64 group_id   = 10;
    uint64 station_id = 11;
    uint64 creator_id = 12;

    string name                = 20 [(validate.rules).string = { min_len: 1 }];
    Type type                  = 21 [ (validate.rules).message = {required: true} ];
    uint64 title_row           = 22;                                             // 标题所在行
    uint64 customer_row        = 23;                                             // 商户所在行
    uint64 start_cycle_col     = 24;                                             // 开始循环列
    uint64 cycle_gap_col       = 25;                                             // 循环间隔列数
    RelationShip relation_ship = 26 [(validate.rules).message.required = true];  // 关联数据
    TitleCol title_col         = 27 [(validate.rules).message.required = true];  // 标题列的位置
}

message CreateOrderTempleteRequest {
    OrderImportTemplete order_templete = 1;
}
message CreateOrderTempleteResponse {
    OrderImportTemplete order_templete = 1;
}

message UpdateOrderTempleteRequest {
    OrderImportTemplete order_templete = 1;
}
message UpdateOrderTempleteResponse {
    OrderImportTemplete order_templete = 1;
}

message DeleteOrderTempleteRequest {
    uint64 order_import_templete_id = 1;
}
message DeleteOrderTempleteResponse {
    OrderImportTemplete order_templete = 1;
}

message RelationInfoResponse {
    map<uint64, enterprise.GroupUser> group_users = 1;
}

message GetOrderTempleteRequest {
    uint64 order_import_templete_id = 1;
}
message GetOrderTempleteResponse {
    OrderImportTemplete order_templete = 1;
    RelationInfoResponse relation_info = 2;
}

message ListOrderTempleteRequest {
    ceres.common.PagingParams paging = 1000 [(validate.rules).message.required = true];
}
message ListOrderTempleteResponse {
    repeated OrderImportTemplete order_templetes = 1;
    RelationInfoResponse relation_info           = 2;
    ceres.common.PagingResult paging             = 1000;
}

message UploadOrderTempleteRequest {
    uint64 order_import_templete_id = 1 [(validate.rules).uint64 = { gt: 0 }];
    uint64 service_period_id        = 2 [(validate.rules).uint64 = { gt: 0 }];
    string file_url                 = 3 [(validate.rules).string = { min_len: 1 }];
    uint64 receive_time             = 4 [(validate.rules).uint64 = { gt: 0 }];
    string time_zone                = 5 [(validate.rules).string = { min_len: 1 }];  // 时区，比如 "Asia/Shanghai"
}

message OrderTempleteExcelSsu {
    map<int32, string> excel_ssus = 1;  // key是OrderImportTemplete.SystemKey，value是excel这个字段对应的值
}

message OrderTempleteExcelList {
    repeated OrderTempleteExcelSsu excel_ssus = 1;
}

message UploadOrderTempleteResponse {
    message Customer {
        string customer_code = 1;
        string customer_name = 2;
    }
    message SsuList {
        map<string, string> deduplicate_ssu_ids     = 1;
        repeated merchandise.SsuTotalInfo ssu_infos = 2;
    }

    message ExcelSsu {
        map<int32, string> ssu = 1;  // key是OrderImportTemplete.SystemKey，value是excel这个字段对应的值
    }

    message ExcelOrder {
        repeated ExcelSsu excel_ssus = 1;
    }

    message ExcelCustomerList {
        repeated ExcelOrder excel_orders = 1;
        Customer customer                = 2;
    }

    repeated order.Order orders                   = 1;
    repeated ExcelCustomerList excel_customers    = 2;
    order.OrderRelationInfoResponse relation_info = 3;
    map<string, SsuList> recommend_ssus           = 4;  // 推荐商品
}

message GetCartOrderRequest {
}

message GetCartOrderResponse {
    order.Order order = 1;
}

message UpdateCartOrderRequest {
    order.Order order = 2;
}

message UpdateCartOrderResponse {
    order.Order order = 1;
}

message CreateBshopOrderRequest {
    string time_zone = 1 [(validate.rules).string = { min_len: 1 }];  // 时区，比如 "Asia/Shanghai"
}

message CreateBshopOrderResponse {
    order.Order order = 1;
}

message BatchUpdateOrderStateRequest {
    order.ListOrderRequest filter  = 1;
    order.Order.State to_set_state = 2;
    string sorting_remark          = 3;
    bool all                       = 4;  //是否全部
}

message BatchUpdateOrderStateResponse {
    asynctask.CreateTaskResponse task = 1;
}

message BatchUpdateOrderExecuteData {
    repeated order.Order orders = 1;
}

message SyncPurchaseTaskExecuteData {
    purchase.Batch batch                    = 1;
    repeated order.Order orders             = 2;
    repeated order.DetailList order_details = 3;
}

message ExportOrderRequest {
    order.ListOrderRequest filter = 1;
}

message ExportOrderResponse {
    asynctask.CreateTaskResponse task = 1;
}

message ExportOrderExecuteData {
    repeated order.Order orders = 1;

    map<uint64, enterprise.Customer> customers               = 2;
    map<uint64, merchandise.Quotation> quotations            = 3;
    map<uint64, merchandise.GetManySkuResponse.SkuInfo> skus = 4;
    map<uint64, enterprise.GroupUser> group_users            = 5;
    map<uint64, enterprise.CustomerUser> customer_users      = 6;
}

message BatchCreateOrderRequest {
    repeated order.Order orders = 1;
}

message BatchCreateOrderResponse {
    asynctask.CreateTaskResponse task = 1;
}

message BatchCreateOrderExecuteData {
    repeated order.Order orders = 1;
}

message BatchUpdateOrderPriceRequest {
    message UpdateData {
        merchandise.SsuId ssu_id    = 1;
        merchandise.UnitValue price = 2;
        repeated uint64 order_ids   = 3;
    }

    repeated UpdateData update = 1;
}

message BatchUpdateOrderPriceResponse {
    asynctask.CreateTaskResponse task = 1;
}

message BatchUpdateOrderPriceExecuteData {
    repeated order.Order orders = 1;
}

message BatchSyncPriceToOrderRequest {
    order.ListOrderDetailRequest filter = 1;
    bool all                            = 2;  //是否全部
}

message BatchSyncPriceToOrderResponse {
    asynctask.CreateTaskResponse task = 1;
}

message BatchSyncPriceToOrderExecuteData {
    repeated order.DetailList order_details = 1;
}

message OrderRelationInfoParam {
    bool need_customer_route_info = 1;  // 路线信息  放在order.proto会循环引用
}

message OrderRelationInfo {
    map<uint64, uint64> customer_routes = 1;  // customer_id: route_id
    map<uint64, delivery.Route> routes  = 2;  // map<customer_id, route>
}

message ListOrderWithRelationRequest {
    order.ListOrderRequest filter   = 1;
    repeated uint64 route_ids       = 2;
    repeated uint64 district_ids    = 3;
    repeated uint64 city_ids        = 4;
    repeated uint64 street_ids      = 5;
    OrderRelationInfoParam relation = 6;
}

message ListOrderWithRelationResponse {
    order.ListOrderResponse response = 1;
    OrderRelationInfo relation       = 2;

    ceres.common.PagingResult paging = 1000;
}

message ListOrderDetailWithRelationRequest {
    order.ListOrderDetailRequest filter = 1;
    repeated uint64 route_ids           = 2;
    string customize_code               = 3;  // ssu自定义编码
    string ssu_name                     = 4;  // ssu名字
    OrderRelationInfoParam relation     = 5;
}

message ListOrderDetailWithRelationResponse {
    order.ListOrderDetailResponse response = 1;
    OrderRelationInfo relation             = 2;

    ceres.common.PagingResult paging = 1000;
}

message BatchUpdateOrderDriverRequest {
    order.CommonListOrder filter = 1;
    uint64 driver_id             = 2;
}

message BatchUpdateOrderDriverResponse {
    asynctask.CreateTaskResponse task = 1;
}

message AutoUpdateOrderDriverRequest {
    order.CommonListOrder filter = 1;
}

message AutoUpdateOrderDriverResponse {
    asynctask.CreateTaskResponse task = 1;
}

message SyncPurchaseTaskFromOrderRequest {
    order.ListOrderRequest order_filter        = 1;
    order.ListOrderDetailRequest detail_filter = 2;
    bool all                                   = 3;  //是否全部
    purchase.Batch batch                       = 4;
}

message SyncPurchaseTaskFromOrderResponse {
    asynctask.CreateTaskResponse task = 1;
}

message DispatchProductionTaskFromOrderRequest {
    order.ListOrderRequest order_filter        = 1;
    order.ListOrderDetailRequest detail_filter = 2;
    bool all_order                             = 3;  //是否全部
    bool is_split_customer                     = 4;
    bool pack_by_customer                      = 11;  // 按客户包装
    bool production_by_customer                = 12;  // 按客户生产

    uint64 purchase_time    = 5;
    string purchase_batch   = 6;
    uint64 production_time  = 7;
    string production_batch = 8;
    uint64 pack_time        = 9;
    string pack_batch       = 10;
}

message DispatchProductionTaskFromOrderResponse {
    uint64 task_id = 1;
}

message ExportProductionPurchaseTaskRequest {
    order.ListOrderRequest order_filter = 1;
}

message ExportProductionPurchaseTaskResponse {
    uint64 task_id = 1;
}

message BatchSyncSaleOutStockSheetFromOrderRequest {
    order.ListOrderRequest order_filter = 1;
    bool all_order                      = 3;  //是否全部
}

message BatchSyncSaleOutStockSheetFromOrderResponse {
    uint64 task_id = 1;
}
message ExportSortingPerformanceExecuteData {
    repeated order.Order orders = 1;

    map<uint64, enterprise.Customer> customers               = 2;
    map<uint64, merchandise.GetManySkuResponse.SkuInfo> skus = 3;
    map<uint64, enterprise.GroupUser> group_users            = 4;
}

message ExportSortingPerformanceRequest {
    order.CommonListOrder filter = 1;
}

message ExportSortingPerformanceResponse {
    asynctask.CreateTaskResponse task = 1;
}

// 批量扫码回单
message BatchScanReceiptRequest {
    common.Filters.Bool is_scan_receipt     = 1;
    order.ListOrderRequest order_list_query = 2;
    repeated uint64 order_ids               = 3;
    repeated order.Order orders             = 4;  // 前端不要传
}

message BatchScanReceiptResponse {
    asynctask.Task task = 1;
}
