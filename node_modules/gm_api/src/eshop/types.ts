import * as common from '../common'
import * as order from '../order'
import * as enterprise from '../enterprise'
import * as account from '../account'
import * as dao from '../dao'
import * as idgenerator from '../idgenerator'
import * as merchandise from '../merchandise'
import * as asynctask from '../asynctask'
import * as oauth from '../oauth'
import * as inventory from '../inventory'
import * as preference from '../preference'
import * as production from '../production'
export enum Status_Code {
  CODE_UNSPECIFIED = 0,
  CODE_ERROR_LOAD_LOCATION = 20200001,
  CODE_ERROR_RECEIVE_TIME = 20200002,
  CODE_ERROR_NO_DETAIL = 20200003,
  CODE_ERROR_NO_ADDRESS = 20200004,
  CODE_ERROR_EXISTED_UNRELEASE_ORDER = 20200005,
}
export interface Status_ErrorNoAddressDetail {
  customer_id?: string
}
export interface Status {
}
export interface GetEshopCartOrderRequest {
}
export interface GetEshopCartOrderResponse {
  orders?: order.Order[]
}
export interface UpdateEshopCartOrderRequest {
  orders?: order.Order[]
}
export interface UpdateEshopCartOrderResponse {
  orders?: order.Order[]
}
export interface CreateEshopOrderRequest {
  time_zone: string
}
export interface CreateEshopOrderResponse {
  orders?: order.Order[]
}
export interface LeaveApplication_OrderIds {
  order_ids?: string[]
}
export interface LeaveApplication {
  create_time?: string
  update_time?: string
  delete_time?: string
  group_id?: string
  station_id?: string
  leave_application_id?: string
  customer_id?: string
  customer_type?: enterprise.Customer_Type
  leave_start_time?: string
  leave_end_time?: string
  creator_id?: string
  order_ids?: LeaveApplication_OrderIds
  school_id?: string
  class_id?: string
  cancel?: boolean
  leave_count?: number
  leave_price?: string
}
export interface ReqCreateLeaveApplication {
  // create_time?: string
  // update_time?: string
  // delete_time?: string
  // group_id?: string
  station_id?: string
  leave_application_id?: string
  customer_id?: string
  customer_type?: enterprise.Customer_Type
  leave_start_time?: string
  leave_end_time?: string
  creator_id?: string
  order_ids?: LeaveApplication_OrderIds
  school_id?: string
  class_id?: string
  cancel?: boolean
  leave_count?: number
  leave_price?: string
}
export interface GetLeaveApplicationRequest {
  leave_application_id?: string
}
export interface GetLeaveApplicationResponse {
  leave: LeaveApplication
}
export interface CreateLeaveApplicationRequest {
  leave?: ReqCreateLeaveApplication
}
export interface CreateLeaveApplicationResponse {
  leave: LeaveApplication
}
export interface UpdateLeaveApplicationRequest {
  leave?: LeaveApplication
}
export interface UpdateLeaveApplicationResponse {
  leave: LeaveApplication
}
export interface DeleteLeaveApplicationRequest {
  leave_application_id?: string
}
export interface DeleteLeaveApplicationResponse {
  leave: LeaveApplication
}
export interface ListLeaveApplicationRequest {
  leave_application_ids?: string[]
  customer_name?: string
  school_ids?: string[]
  class_ids?: string[]
  relation_info?: order.OrderRelationInfoRequest
  q?: string
  leave_begin_time: string
  leave_end_time: string
  customer_type?: string
  paging: common.PagingParams
}
export interface ListLeaveApplicationResponse {
  leaves: LeaveApplication[]
  relation_info?: order.OrderRelationInfoResponse
  customers?: { [key: string]: enterprise.Customer }
  customer_users?: { [key: string]: enterprise.CustomerUser }
  paging: common.PagingResult
}
export interface Menu_CustomerIds {
  customer_ids?: string[]
}
export enum Menu_CycleType {
  CYCLETYPE_UNSPECIFIED = 0,
  CYCLETYPE_DAILY = 1,
  CYCLETYPE_WEEKLY = 2,
  CYCLETYPE_MONTHLY = 3,
}
export interface Menu_ReplaceTime {
  start_day?: string
  start_time?: string
  cycle_type?: Menu_CycleType
}
export interface Menu_MenuDetails {
  menu_details?: MenuDetail[]
}
export interface Menu {
  create_time?: string
  update_time?: string
  delete_time?: string
  group_id?: string
  station_id?: string
  menu_id?: string
  name: string
  name_outside?: string
  desc?: string
  is_active?: boolean
  is_default?: boolean
  customer_type?: enterprise.Customer_Type
  replace_time: Menu_ReplaceTime
  menu_details?: Menu_MenuDetails
  customer_menu_relation?: CustomerMenuRelation[]
}
export interface ReqCreateMenu {
  // create_time?: string
  // update_time?: string
  // delete_time?: string
  // group_id?: string
  station_id?: string
  menu_id?: string
  name: string
  name_outside?: string
  desc?: string
  is_active?: boolean
  is_default?: boolean
  customer_type?: enterprise.Customer_Type
  replace_time: Menu_ReplaceTime
  menu_details?: Menu_MenuDetails
  customer_menu_relation?: CustomerMenuRelation[]
}
export interface CustomerMenuRelation {
  customer_menu_relation_id: string
  create_time?: string
  update_time?: string
  delete_time?: string
  group_id?: string
  station_id?: string
  menu_id?: string
  customer_id: string
  customer_type?: enterprise.Customer_Type
}
export enum MenuDetail_State {
  STATE_UNSPECIFIED = 0,
  STATE_PREPARE = 1,
  STATE_FINISHED = 2,
}
export interface MenuDetail_Details_ServicePeriodInfo_Detail {
  base_price?: merchandise.UnitValue
  sku_id?: string
  unit_id?: string
  bom_id?: string
  bom_revision?: string
  bom?: production.Bom
}
export interface MenuDetail_Details_ServicePeriodInfo {
  menu_period_group_id?: string
  details?: MenuDetail_Details_ServicePeriodInfo_Detail[]
  service_period_id?: string
}
export interface MenuDetail_Details {
  service_period_infos?: MenuDetail_Details_ServicePeriodInfo[]
}
export interface MenuDetail {
  create_time?: string
  update_time?: string
  delete_time?: string
  group_id?: string
  station_id?: string
  menu_detail_id?: string
  state?: MenuDetail_State
  details: MenuDetail_Details
  revision?: string
  menu_id?: string
  menu_time: string
  is_holiday?: boolean
}
export interface ReqCreateMenuDetail {
  // create_time?: string
  // update_time?: string
  // delete_time?: string
  // group_id?: string
  station_id?: string
  menu_detail_id?: string
  state?: MenuDetail_State
  details: MenuDetail_Details
  revision?: string
  menu_id?: string
  menu_time: string
  is_holiday?: boolean
}
export interface GetMenuRequest {
  menu_id?: string
  relation_info?: RelationInfoRequest
}
export interface GetMenuResponse {
  menu: Menu
  relation_info?: RelationInfoResponse
}
export interface ListMenuRequest {
  q?: string
  is_active?: common.Filters_Bool
  paging: common.PagingParams
}
export interface ListMenuResponse {
  menus: Menu[]
  paging: common.PagingResult
}
export interface ListMenuDetailRequest {
  menu_id: string
  menu_from_time?: string
  menu_to_time?: string
  menu_detail_ids?: string[]
  menu_time?: string[]
  state?: MenuDetail_State
  relation_info?: RelationInfoRequest
}
export interface ListMenuDetailResponse {
  menu_details: MenuDetail[]
  menu?: Menu
  relation_info?: RelationInfoResponse
}
export interface CreateMenuRequest {
  menu?: ReqCreateMenu
}
export interface CreateMenuResponse {
  menu: Menu
}
export interface UpdateMenuRequest {
  menu?: Menu
}
export interface UpdateMenuResponse {
  menu: Menu
}
export interface CreateMenuDetailRequest {
  menu_detail?: ReqCreateMenuDetail
}
export interface CreateMenuDetailResponse {
  menu_detail: MenuDetail
}
export interface UpdateMenuDetailRequest {
  menu_detail?: MenuDetail
}
export interface UpdateMenuDetailResponse {
  menu_detail: MenuDetail
}
export interface DeleteMenuRequest {
  menu_id?: string
}
export interface DeleteMenuResponse {
  menu: Menu
}
export interface GetCustomerMenuRelationRequest {
  menu_ids?: string[]
  customer_ids?: string[]
}
export interface GetCustomerMenuRelationResponse_RelationElement {
  customer_id?: string
  menu_id?: string
  station_id?: string
  customer_type?: enterprise.Customer_Type
}
export interface GetCustomerMenuRelationResponse {
  relations?: GetCustomerMenuRelationResponse_RelationElement[]
}
export interface RelationInfoRequest {
  need_bom_info?: boolean
  need_sku_info?: boolean
  need_service_period_info?: boolean
}
export interface RelationInfoResponse {
  skus?: { [key: string]: merchandise.GetManySkuResponse_SkuInfo }
  bom_snap_maps?: { [key: string]: production.BomSnapMap }
  service_period_infos?: { [key: string]: enterprise.ServicePeriod }
}
export interface CreateProductOrderRequest {
  menu_detail_ids?: string[]
  time_zone: string
}
export interface CreateProductOrderResponse_ProductOrder {
  menu_detail_id?: string
  menu_period_group_id?: string
  order?: order.Order
}
export interface CreateProductOrderResponse {
  orders: CreateProductOrderResponse_ProductOrder[]
}
export interface MenuPeriodGroup {
  menu_period_group_id: string
  create_time?: string
  update_time?: string
  delete_time?: string
  name: string
}
export interface ReqCreateMenuPeriodGroup {
  // menu_period_group_id: string
  // create_time?: string
  // update_time?: string
  // delete_time?: string
  name: string
}
export interface MenuPeriod {
  menu_period_group: MenuPeriodGroup
  service_period: enterprise.ServicePeriod
}
export interface ListMenuPeriodGroupRequest {
  paging: common.PagingParams
}
export interface ListMenuPeriodGroupResponse {
  menu_period?: MenuPeriod[]
  paging: common.PagingResult
}
export interface GetManyMenuPeriodGroupRequest {
  menu_period_group_ids?: string[]
}
export interface GetManyMenuPeriodGroupResponse {
  menu_period_group: { [key: string]: MenuPeriodGroup }
}
export interface CreateMenuPeriodGroupRequest {
  menu_period: MenuPeriod[]
}
export interface CreateMenuPeriodGroupResponse {
  menu_period?: MenuPeriod[]
}
export interface UpdateMenuPeriodGroupRequest {
  menu_period: MenuPeriod[]
}
export interface UpdateMenuPeriodGroupResponse {
  menu_period?: MenuPeriod[]
}
export interface DeleteMenuPeriodGroupRequest {
  service_period_ids: string[]
  menu_period_group_ids: string[]
}
export interface DeleteMenuPeriodGroupResponse {
}
export interface ExportEshopOrderRequest {
  filter?: order.ListEshopOrderRequest
}
export interface ExportEshopOrderResponse {
  task?: asynctask.CreateTaskResponse
}
export interface ExportEshopOrderExecuteData {
  orders?: order.Order[]
  customers?: { [key: string]: enterprise.Customer }
  quotations?: { [key: string]: merchandise.Quotation }
  skus?: { [key: string]: merchandise.GetManySkuResponse_SkuInfo }
  group_users?: { [key: string]: enterprise.GroupUser }
  customer_users?: { [key: string]: enterprise.CustomerUser }
  menu_period_group?: { [key: string]: MenuPeriodGroup }
  customer_type?: enterprise.Customer_Type
}
export interface BatchUpdateEshopOrderStateRequest {
  filter: order.ListEshopOrderRequest
  to_set_state?: order.Order_State
  remark?: string
}
export interface BatchUpdateEshopOrderStateResponse {
  task?: asynctask.CreateTaskResponse
}
export interface BatchUpdateEshopOrderStateExecuteData {
  orders?: order.Order[]
}
export interface ExportLeaveApplicationRequest {
  filter?: ListLeaveApplicationRequest
}
export interface ExportLeaveApplicationResponse {
  task?: asynctask.CreateTaskResponse
}
export interface ExportLeaveApplicationExecuteData {
  leave_applications?: LeaveApplication[]
  orders?: { [key: string]: order.Order }
  service_periods?: { [key: string]: enterprise.ServicePeriod }
  customer_users?: { [key: string]: enterprise.CustomerUser }
  customers?: { [key: string]: enterprise.Customer }
}