syntax = "proto3";

package ceres.eshop;
option  java_multiple_files = true;
option  go_package          = "code.guanmai.cn/back_end/ceres/eshop/proto;proto";

import "./google/api/annotations.proto";
import "./include/protoc-gen-validate/validate.proto";

import "./common/proto/common.proto";
import "./order/proto/order.proto";
import "./production/proto/production.proto";
import "./merchandise/proto/merchandise.proto";
import "./enterprise/proto/enterprise.proto";
import "./asynctask/proto/asynctask.proto";
import "./cmd/protoc-gen-dao/proto/dao.proto";

service EshopService {
    // eshop订单
    // 获取购物车信息
    rpc GetEshopCartOrder(GetEshopCartOrderRequest) returns (GetEshopCartOrderResponse) {
        option (google.api.http) = {
            post : "/ceres/eshop/EshopService/GetEshopCartOrder"
        };
    }
    // 创建或更新购物车信息
    rpc UpdateEshopCartOrder(UpdateEshopCartOrderRequest) returns (UpdateEshopCartOrderResponse) {
        option (google.api.http) = {
            post : "/ceres/eshop/EshopService/UpdateEshopCartOrder"
        };
    }
    // eshop调用下单接口
    rpc CreateEshopOrder(CreateEshopOrderRequest) returns (CreateEshopOrderResponse) {
        option (google.api.http) = {
            post : "/ceres/eshop/EshopService/CreateEshopOrder"
        };
    }
    // eshop合并生成生产订单接口
    rpc CreateProductOrder(CreateProductOrderRequest) returns (CreateProductOrderResponse) {
        option (google.api.http) = {
            post : "/ceres/eshop/EshopService/CreateProductOrder"
        };
    }
    // 请假管理
    rpc GetLeaveApplication(GetLeaveApplicationRequest) returns (GetLeaveApplicationResponse) {
        option (google.api.http) = {
            post : "/ceres/eshop/EshopService/GetLeaveApplication"
        };
    }
    rpc CreateLeaveApplication(CreateLeaveApplicationRequest) returns (CreateLeaveApplicationResponse) {
        option (google.api.http) = {
            post : "/ceres/eshop/EshopService/CreateLeaveApplication"
        };
    }
    // 一期没有修改功能
    rpc UpdateLeaveApplication(UpdateLeaveApplicationRequest) returns (UpdateLeaveApplicationResponse) {
        option (google.api.http) = {
            post : "/ceres/eshop/EshopService/UpdateLeaveApplication"
        };
    }
    // 请假没有删除功能，后续会做销假
    rpc DeleteLeaveApplication(DeleteLeaveApplicationRequest) returns (DeleteLeaveApplicationResponse) {
        option (google.api.http) = {
            post : "/ceres/eshop/EshopService/DeleteLeaveApplication"
        };
    }
    rpc ListLeaveApplication(ListLeaveApplicationRequest) returns (ListLeaveApplicationResponse) {
        option (google.api.http) = {
            post : "/ceres/eshop/EshopService/ListLeaveApplication"
        };
    }

    // eshop菜谱
    rpc GetMenu(GetMenuRequest) returns (GetMenuResponse) {
        option (google.api.http) = {
            post : "/ceres/eshop/EshopService/GetMenu"
        };
    }
    rpc ListMenu(ListMenuRequest) returns (ListMenuResponse) {
        option (google.api.http) = {
            post : "/ceres/eshop/EshopService/ListMenu"
        };
    }
    rpc ListMenuDetail(ListMenuDetailRequest) returns (ListMenuDetailResponse) {
        option (google.api.http) = {
            post : "/ceres/eshop/EshopService/ListMenuDetail"
        };
    }
    rpc CreateMenu(CreateMenuRequest) returns (CreateMenuResponse) {
        option (google.api.http) = {
            post : "/ceres/eshop/EshopService/CreateMenu"
        };
    }
    rpc UpdateMenu(UpdateMenuRequest) returns (UpdateMenuResponse) {
        option (google.api.http) = {
            post : "/ceres/eshop/EshopService/UpdateMenu"
        };
    }
    rpc CreateMenuDetail(CreateMenuDetailRequest) returns (CreateMenuDetailResponse) {
        option (google.api.http) = {
            post : "/ceres/eshop/EshopService/CreateMenuDetail"
        };
    }
    rpc UpdateMenuDetail(UpdateMenuDetailRequest) returns (UpdateMenuDetailResponse) {
        option (google.api.http) = {
            post : "/ceres/eshop/EshopService/UpdateMenuDetail"
        };
    }
    rpc DeleteMenu(DeleteMenuRequest) returns (DeleteMenuResponse) {
        option (google.api.http) = {
            post : "/ceres/eshop/EshopService/DeleteMenu"
        };
    }
    rpc GetCustomerMenuRelation(GetCustomerMenuRelationRequest) returns (GetCustomerMenuRelationResponse) {
        option (google.api.http) = {
            post : "/ceres/merchandise/MerchandiseService/GetCustomerMenuRelation"
        };
    }

    // 餐次时间配置
    rpc ListMenuPeriodGroup(ListMenuPeriodGroupRequest) returns (ListMenuPeriodGroupResponse) {
        option (google.api.http) = {
            post : "/ceres/eshop/EshopService/ListMenuPeriodGroup"
        };
    }
    rpc CreateMenuPeriodGroup(CreateMenuPeriodGroupRequest) returns (CreateMenuPeriodGroupResponse) {
        option (google.api.http) = {
            post : "/ceres/eshop/EshopService/CreateMenuPeriodGroup"
        };
    }
    rpc UpdateMenuPeriodGroup(UpdateMenuPeriodGroupRequest) returns (UpdateMenuPeriodGroupResponse) {
        option (google.api.http) = {
            post : "/ceres/eshop/EshopService/UpdateMenuPeriodGroup"
        };
    }
    rpc DeleteMenuPeriodGroup(DeleteMenuPeriodGroupRequest) returns (DeleteMenuPeriodGroupResponse) {
        option (google.api.http) = {
            post : "/ceres/eshop/EshopService/DeleteMenuPeriodGroup"
        };
    }

    rpc GetManyMenuPeriodGroup(GetManyMenuPeriodGroupRequest) returns (GetManyMenuPeriodGroupResponse) {
        option (google.api.http) = {
            post : "/ceres/eshop/EshopService/GetManyMenuPeriodGroup"
        };
    }

    // 异步：导出eshop订单
    rpc ExportEshopOrder(ExportEshopOrderRequest) returns (ExportEshopOrderResponse) {
        option (google.api.http) = {
            post : "/ceres/eshop/EshopService/ExportEshopOrder"
        };
    }
    // 异步：批量删除eshop订单
    rpc BatchUpdateEshopOrderState(BatchUpdateEshopOrderStateRequest) returns (BatchUpdateEshopOrderStateResponse) {
        option (google.api.http) = {
            post : "/ceres/eshop/EshopService/BatchUpdateEshopOrderState"
        };
    }
    // 异步：导出请假
    rpc ExportLeaveApplication(ExportLeaveApplicationRequest) returns (ExportLeaveApplicationResponse) {
        option (google.api.http) = {
            post : "/ceres/eshop/EshopService/ExportLeaveApplication"
        };
    }
}

// gRPC status code
message Status {
    enum Code {
        CODE_UNSPECIFIED                   = 0;        // 正常
        CODE_ERROR_LOAD_LOCATION           = 20200001; // 时区错误
        CODE_ERROR_RECEIVE_TIME            = 20200002; // 收货时间有误，当前时间不允许下单
        CODE_ERROR_NO_DETAIL               = 20200003; // 无订单详情
        CODE_ERROR_NO_ADDRESS              = 20200004; // 未查到地址信息
        CODE_ERROR_EXISTED_UNRELEASE_ORDER = 20200005; // 存在未发布的订单
    }

    message ErrorNoAddressDetail {
        uint64 customer_id = 1;
    }
}

message GetEshopCartOrderRequest {
}

message GetEshopCartOrderResponse {
    repeated order.Order orders = 1;
}

message UpdateEshopCartOrderRequest {
    repeated order.Order orders = 2;
}

message UpdateEshopCartOrderResponse {
    repeated order.Order orders = 1;
}

message CreateEshopOrderRequest {
    // 从购物车里面取数据保存订单，所以掉这个接口之前，需要掉更新购物车接口
    string time_zone = 1 [ (validate.rules).string = {min_len : 1} ]; // 时区，比如 "Asia/Shanghai"
}

message CreateEshopOrderResponse {
    // 就算grpc_code不为0，成功的订单会放在这里面，用于当部分订单提交成功，部分失败之后，前端好区分哪些是已经提交了的
    repeated order.Order orders = 1;
}

message LeaveApplication {
    option (dao.partition_count) = 1;
    // 请假单

    message OrderIds {
        repeated uint64 order_ids = 1;
    }

    uint64 create_time = 1;
    uint64 update_time = 2;
    uint64 delete_time = 3;
    uint64 group_id    = 10;
    uint64 station_id  = 11;

    // @inject_tag: gorm:"PRIMARY_KEY"
    uint64                   leave_application_id = 20; // 请假单id
    uint64                   customer_id          = 21; // 请假用户
    enterprise.Customer.Type customer_type        = 22; // 冗余，用于搜索
    uint64                   leave_start_time     = 23;
    uint64                   leave_end_time       = 24;
    uint64                   creator_id           = 25; // 申请人
    OrderIds                 order_ids            = 26; // 请假订单
    uint64                   school_id            = 27; // 学校id
    uint64                   class_id             = 28; // 年级id
    bool                     cancel               = 29; // 是否销假
    uint32                   leave_count          = 30; // 请假餐数
    string                   leave_price          = 31; // 返还费用
}

message GetLeaveApplicationRequest {
    uint64 leave_application_id = 1;
}

message GetLeaveApplicationResponse {
    LeaveApplication leave = 1;
}

message CreateLeaveApplicationRequest {
    LeaveApplication leave = 1;
}

message CreateLeaveApplicationResponse {
    LeaveApplication leave = 1;
}

message UpdateLeaveApplicationRequest {
    LeaveApplication leave = 1;
}

message UpdateLeaveApplicationResponse {
    LeaveApplication leave = 1;
}

message DeleteLeaveApplicationRequest {
    uint64 leave_application_id = 1;
}

message DeleteLeaveApplicationResponse {
    LeaveApplication leave = 1;
}

message ListLeaveApplicationRequest {
    repeated uint64                leave_application_ids = 1;
    string                         customer_name         = 2;
    repeated uint64                school_ids            = 3;
    repeated uint64                class_ids             = 4;
    order.OrderRelationInfoRequest relation_info         = 5;
    string                         q                     = 6;
    uint64                         leave_begin_time      = 7 [ (validate.rules).uint64 = {gt : 0} ];
    uint64                         leave_end_time        = 8 [ (validate.rules).uint64 = {gt : 0} ];
    uint64                         customer_type         = 9; // 商户类型
    ceres.common.PagingParams      paging                = 1000 [ (validate.rules).message.required = true ];
}

message ListLeaveApplicationResponse {
    repeated LeaveApplication            leaves         = 1;
    order.OrderRelationInfoResponse      relation_info  = 2;
    map<uint64, enterprise.Customer>     customers      = 3; // 请假用户 customer_id
    map<uint64, enterprise.CustomerUser> customer_users = 4; // 申请人 creator_id
    ceres.common.PagingResult            paging         = 1000;
}

message Menu {
    option (dao.partition_count) = 1;
    option (dao.model_type)      = TYPE_MENU;
    // 菜谱

    message CustomerIds {
        repeated uint64 customer_ids = 1;
    }

    enum CycleType {
        CYCLETYPE_UNSPECIFIED = 0;
        CYCLETYPE_DAILY       = 1; // 日
        CYCLETYPE_WEEKLY      = 2; // 周
        CYCLETYPE_MONTHLY     = 3; // 月
    }

    message ReplaceTime {
        // 更新时间
        uint64    start_day  = 1; // 周/月 起始日。如果是周，使用 1～7 代表周一到周日；如果是月，使用 1～31 代表每月几号；其他情况下这个字段没有含义
        uint64    start_time = 2; // 开始时间。单位为 UTC Timestamp 毫秒数
        CycleType cycle_type = 3;
    }

    uint64 create_time = 1;
    uint64 update_time = 2;
    uint64 delete_time = 3;
    uint64 group_id    = 10;
    uint64 station_id  = 11;

    // @inject_tag: gorm:"PRIMARY_KEY"
    uint64                   menu_id       = 20; // 菜谱id
    string                   name          = 21 [ (validate.rules).string = {min_len : 1} ];
    string                   name_outside  = 22;                                              // 菜谱名称（对外）
    string                   desc          = 23;                                              // 描述
    bool                     is_active     = 24;                                              // 是否激活
    bool                     is_default    = 25;                                              // 是否默认
    enterprise.Customer.Type customer_type = 26;                                              // 关联用户类型
    ReplaceTime              replace_time  = 27 [ (validate.rules).message.required = true ]; // 替换菜单时间

    message MenuDetails {
        repeated MenuDetail menu_details = 1;
    }
    // @inject_tag: gorm:"-"
    MenuDetails menu_details = 9001; // 只有查询的时候才有意义

    // @inject_tag: gorm:"-"
    repeated CustomerMenuRelation customer_menu_relation = 9002;
}

message CustomerMenuRelation {
    option (dao.partition_count) = 10;
    // @inject_tag: gorm:"PRIMARY_KEY"
    uint64                   customer_menu_relation_id = 1;
    uint64                   create_time               = 4;
    uint64                   update_time               = 5;
    uint64                   delete_time               = 6; // 删除时间，非0表示已删除
    uint64                   group_id                  = 10;
    uint64                   station_id                = 11;
    uint64                   menu_id                   = 12;
    uint64                   customer_id               = 13 [ (validate.rules).uint64 = {gt : 0} ];
    enterprise.Customer.Type customer_type             = 14; // 关联用户类型
}

message MenuDetail {
    option (dao.partition_count) = 10;
    option (dao.model_type)      = TYPE_MENU_DETAIL_ID;

    // 菜单详情

    enum State {
        STATE_UNSPECIFIED = 0;
        STATE_PREPARE     = 1; // 未进入生产
        STATE_FINISHED    = 2; // 已进入生产
    }

    message Details {
        message ServicePeriodInfo {
            message Detail {
                merchandise.UnitValue base_price   = 1; // 销售单价
                uint64                sku_id       = 2;
                uint64                unit_id      = 3;
                uint64                bom_id       = 4; //
                uint64                bom_revision = 5; //
                production.Bom        bom          = 6; // 请求带有bom完整数据 ,但不更新进数据库
            }
            uint64          menu_period_group_id = 1; // 餐次组id
            repeated Detail details              = 2;
            uint64          service_period_id    = 3; // 时间配置id
        }
        repeated ServicePeriodInfo service_period_infos = 1; // 一个餐次一组
    }

    uint64 create_time = 1;
    uint64 update_time = 2;
    uint64 delete_time = 3;
    uint64 group_id    = 10;
    uint64 station_id  = 11;

    // @inject_tag: gorm:"PRIMARY_KEY"
    uint64  menu_detail_id = 20; // 菜谱详情id
    State   state          = 21;
    Details details        = 22 [ (validate.rules).message.required = true ];
    uint64  revision       = 23;
    // todo wrd menu_id,menu_time唯一索引,gorm好像自动创建不了
    // @inject_tag: gorm:"UNIQUE_INDEX:menu_id_menu_time"
    uint64 menu_id = 24;
    // @inject_tag: gorm:"UNIQUE_INDEX:menu_id_menu_time"
    uint64 menu_time  = 25 [ (validate.rules).uint64 = {gt : 0} ]; // 菜单时间
    bool   is_holiday = 26;                                        // 是否节假日
}

message GetMenuRequest {
    uint64              menu_id       = 1;
    RelationInfoRequest relation_info = 2;
}

message GetMenuResponse {
    Menu                 menu          = 1;
    RelationInfoResponse relation_info = 2;
}

message ListMenuRequest {
    string                    q         = 1;
    common.Filters.Bool       is_active = 2;
    ceres.common.PagingParams paging    = 1000 [ (validate.rules).message.required = true ];
}

message ListMenuResponse {
    repeated Menu             menus  = 1;
    ceres.common.PagingResult paging = 1000;
}

message ListMenuDetailRequest {
    // 情况1：menu_id ，menu_from_time，menu_to_time
    // 情况2：menu_id ，menu_time
    // 情况3：menu_id, menu_detail_ids
    // 情况4：menu_detail_ids
    uint64              menu_id         = 1 [ (validate.rules).uint64 = {gte : 0} ];
    uint64              menu_from_time  = 2;
    uint64              menu_to_time    = 3;
    repeated uint64     menu_detail_ids = 4;
    repeated uint64     menu_time       = 5;
    MenuDetail.State    state           = 6;
    RelationInfoRequest relation_info   = 100;
}

message ListMenuDetailResponse {
    repeated MenuDetail  menu_details  = 1;
    Menu                 menu          = 2;
    RelationInfoResponse relation_info = 1000;
}

message CreateMenuRequest {
    Menu menu = 1;
}
message CreateMenuResponse {
    Menu menu = 1;
}
message UpdateMenuRequest {
    Menu menu = 1;
}
message UpdateMenuResponse {
    Menu menu = 1;
}

message CreateMenuDetailRequest {
    MenuDetail menu_detail = 1;
}

message CreateMenuDetailResponse {
    MenuDetail menu_detail = 1;
}

message UpdateMenuDetailRequest {
    MenuDetail menu_detail = 1;
}

message UpdateMenuDetailResponse {
    MenuDetail menu_detail = 1;
}

message DeleteMenuRequest {
    uint64 menu_id = 1;
}

message DeleteMenuResponse {
    Menu menu = 1;
}

message GetCustomerMenuRelationRequest {
    repeated uint64 menu_ids     = 1; // 如果不为空，则返回和这些 ID 有关的所有关系。menu_ids 和 customer_ids 两个参数至少传一个。
    repeated uint64 customer_ids = 2; // 如果不为空，则返回和这些 ID 有关的所有关系。quotation_ids 和 customer_ids 两个参数至少传一个。
}

message GetCustomerMenuRelationResponse {
    message RelationElement {
        uint64                   customer_id   = 1;
        uint64                   menu_id       = 2;
        uint64                   station_id    = 3;
        enterprise.Customer.Type customer_type = 4;
    }
    repeated RelationElement relations = 1;
}

message RelationInfoRequest {
    bool need_bom_info            = 1;
    bool need_sku_info            = 2;
    bool need_service_period_info = 3;
}

message RelationInfoResponse {
    map<uint64, merchandise.GetManySkuResponse.SkuInfo> skus                 = 1;
    map<uint64, production.BomSnapMap>                  bom_snap_maps        = 2;
    map<uint64, enterprise.ServicePeriod>               service_period_infos = 3;
}

message CreateProductOrderRequest {
    repeated uint64 menu_detail_ids = 1;
    string          time_zone       = 2 [ (validate.rules).string = {min_len : 1} ]; // 时区，比如 "Asia/Shanghai"
}
message CreateProductOrderResponse {
    message ProductOrder {
        uint64      menu_detail_id       = 1;
        uint64      menu_period_group_id = 2;
        order.Order order                = 3;
    }
    repeated ProductOrder orders = 1;
}

message MenuPeriodGroup {
    // 餐次组
    option (dao.partition_count) = 1;
    option (dao.model_type)      = TYPE_ORDER_ESHOP_MENU_PERIOD_GROUP;

    // @inject_tag: gorm:"PRIMARY_KEY"
    uint64 menu_period_group_id = 1;
    uint64 create_time          = 2; // 创建时间
    uint64 update_time          = 3; // 修改时间
    uint64 delete_time          = 4; //

    string name = 11 [ (validate.rules).string.min_len = 1 ];
}

message MenuPeriod {
    MenuPeriodGroup          menu_period_group = 1 [ (validate.rules).message.required = true ];
    enterprise.ServicePeriod service_period    = 2 [ (validate.rules).message.required = true ];
}

message ListMenuPeriodGroupRequest {
    ceres.common.PagingParams paging = 1000 [ (validate.rules).message.required = true ];
}
message ListMenuPeriodGroupResponse {
    repeated MenuPeriod       menu_period = 1;
    ceres.common.PagingResult paging      = 1000;
}

message GetManyMenuPeriodGroupRequest {
    repeated uint64 menu_period_group_ids = 1;
}

message GetManyMenuPeriodGroupResponse {
    map<uint64, MenuPeriodGroup> menu_period_group = 1;
}

message CreateMenuPeriodGroupRequest {
    repeated MenuPeriod menu_period = 1 [ (validate.rules).repeated.min_items = 1 ];
}

message CreateMenuPeriodGroupResponse {
    repeated MenuPeriod menu_period = 1;
}

message UpdateMenuPeriodGroupRequest {
    repeated MenuPeriod menu_period = 1 [ (validate.rules).repeated.min_items = 1 ];
}

message UpdateMenuPeriodGroupResponse {
    repeated MenuPeriod menu_period = 1;
}

message DeleteMenuPeriodGroupRequest {
    repeated uint64 service_period_ids    = 1 [ (validate.rules).repeated.min_items = 1 ];
    repeated uint64 menu_period_group_ids = 2 [ (validate.rules).repeated.min_items = 1 ];
}
message DeleteMenuPeriodGroupResponse {
}

message ExportEshopOrderRequest {
    order.ListEshopOrderRequest filter = 1;
}

message ExportEshopOrderResponse {
    asynctask.CreateTaskResponse task = 1;
}

message ExportEshopOrderExecuteData {
    repeated order.Order orders = 1;

    map<uint64, enterprise.Customer>                    customers         = 2;
    map<uint64, merchandise.Quotation>                  quotations        = 3;
    map<uint64, merchandise.GetManySkuResponse.SkuInfo> skus              = 4;
    map<uint64, enterprise.GroupUser>                   group_users       = 5;
    map<uint64, enterprise.CustomerUser>                customer_users    = 6;
    map<uint64, MenuPeriodGroup>                        menu_period_group = 7;
    enterprise.Customer.Type                            customer_type     = 8;
}

message BatchUpdateEshopOrderStateRequest {
    order.ListEshopOrderRequest filter       = 1 [ (validate.rules).message.required = true ];
    order.Order.State           to_set_state = 2; // 这个必填，由于proto校验的bug，不能加上校验
    string                      remark       = 3;
}

message BatchUpdateEshopOrderStateResponse {
    asynctask.CreateTaskResponse task = 1;
}

message BatchUpdateEshopOrderStateExecuteData {
    repeated order.Order orders = 1;
}

message ExportLeaveApplicationRequest {
    ListLeaveApplicationRequest filter = 1;
}

message ExportLeaveApplicationResponse {
    asynctask.CreateTaskResponse task = 1;
}

message ExportLeaveApplicationExecuteData {
    repeated LeaveApplication leave_applications = 1;

    map<uint64, order.Order>              orders          = 2;
    map<uint64, enterprise.ServicePeriod> service_periods = 3;
    map<uint64, enterprise.CustomerUser>  customer_users  = 4;
    map<uint64, enterprise.Customer>      customers       = 5;
}