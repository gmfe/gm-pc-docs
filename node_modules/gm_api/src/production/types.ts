import * as merchandise from '../merchandise'
import * as common from '../common'
import * as dao from '../dao'
import * as idgenerator from '../idgenerator'
import * as asynctask from '../asynctask'
import * as oauth from '../oauth'
import * as enterprise from '../enterprise'
import * as account from '../account'
import * as order from '../order'
import * as inventory from '../inventory'
import * as preference from '../preference'
export enum Status_Code {
  UNSPECIFIED = 0,
  BUILTIN_PROCESS_TEMPLATE = 85700001,
  DUPLICATE_NAME = 85700002,
  DUPLICATE_CODE = 85700003,
}
export interface Status {
}
export enum Attr_Type {
  TYPE_UNSPECIFIED = 0,
  TYPE_TEXT = 1,
  TYPE_OPTIONS = 2,
}
export interface Attr {
  attr_id?: string
  name?: string
  type?: Attr_Type
  values?: string[]
}
export enum OpType {
  OPTYPE_UNSPECIFIED = 0,
  OPTYPE_CREATE = 1,
  OPTYPE_UPDATE = 2,
}
export enum BomType {
  BOM_TYPE_UNSPECIFIED = 0,
  BOM_TYPE_PRODUCE = 1,
  BOM_TYPE_PACK = 2,
}
export enum OutputType {
  OUTPUT_TYPE_UNSPECIFIED = 0,
  OUTPUT_TYPE_MAIN = 1,
  OUTPUT_TYPE_EXTRA = 2,
}
export enum ProcessType_Status {
  STATUS_UNSPECIFIED = 0,
  STATUS_DEFAULT = 256,
}
export interface ProcessType {
  process_type_id: string
  status?: string
  create_time?: string
  update_time?: string
  delete_time?: string
  group_id?: string
  station_id?: string
  name: string
}
export interface ReqCreateProcessType {
  // process_type_id: string
  status?: string
  // create_time?: string
  // update_time?: string
  // delete_time?: string
  // group_id?: string
  station_id?: string
  name: string
}
export enum ProcessTemplate_Status {
  STATUS_UNSPECIFIED = 0,
  STATUS_DEFAULT = 256,
}
export interface ProcessTemplate_Attrs {
  attrs?: Attr[]
  latest_attr_id?: string
}
export interface ProcessTemplate {
  process_template_id: string
  status?: string
  create_time?: string
  update_time?: string
  delete_time?: string
  group_id?: string
  station_id?: string
  process_type_id?: string
  name: string
  customized_code: string
  description?: string
  attrs?: ProcessTemplate_Attrs
}
export interface ReqCreateProcessTemplate {
  // process_template_id: string
  status?: string
  // create_time?: string
  // update_time?: string
  // delete_time?: string
  // group_id?: string
  station_id?: string
  process_type_id?: string
  name: string
  customized_code: string
  description?: string
  attrs?: ProcessTemplate_Attrs
}
export interface Processor {
  processor_id: string
  create_time?: string
  update_time?: string
  delete_time?: string
  group_id?: string
  station_id?: string
  parent_id?: string
  name: string
}
export interface ReqCreateProcessor {
  // processor_id: string
  // create_time?: string
  // update_time?: string
  // delete_time?: string
  // group_id?: string
  station_id?: string
  parent_id?: string
  name: string
}
export interface ProcessorProcessTemplate {
  processor_process_template_id?: string
  group_id?: string
  station_id?: string
  processor_id?: string
  process_template_id?: string
}
export enum Bom_Status {
  STATUS_UNSPECIFIED = 0,
  STATUS_COMBINED = 256,
  STATUS_DEFAULT = 512,
}
export enum Bom_Process_Type {
  TYPE_UNSPECIFIED = 0,
  TYPE_NORMAL = 1,
  TYPE_COMBINED = 2,
}
export enum Bom_Process_Material_Property {
  PROPERTY_UNSPECIFIED = 0,
  PROPERTY_PRODUCT = 1,
  PROPERTY_INTERMEDIATE = 2,
}
export interface Bom_Process_Material {
  sku_id: string
  unit_id: string
  quantity: string
  property?: Bom_Process_Material_Property
}
export interface Bom_Process_Input {
  material?: Bom_Process_Material
  prev_process_id?: string
}
export interface Bom_Process_Output {
  material?: Bom_Process_Material
  type?: OutputType
  next_process_id?: string
}
export interface Bom_Process_Attr {
  attr_id?: string
  value?: string
}
export interface Bom_Process {
  process_id: string
  process_template_id: string
  attrs?: Bom_Process_Attr[]
  inputs: Bom_Process_Input[]
  outputs: Bom_Process_Output[]
  type?: Bom_Process_Type
  rank?: number
}
export interface Bom_Processes {
  processes: Bom_Process[]
  latest_process_id: string
}
export interface Bom_UserIDs {
  customer_ids?: string[]
}
export interface Bom {
  bom_id: string
  status?: number
  revision?: string
  create_time?: string
  update_time?: string
  delete_time?: string
  group_id?: string
  station_id?: string
  sku_id: string
  unit_id?: string
  name: string
  desc?: string
  type: BomType
  customized_code: string
  base_unit_id: string
  quantity: string
  processes?: Bom_Processes
  customer_ids?: Bom_UserIDs
}
export interface ReqCreateBom {
  // bom_id: string
  status?: number
  revision?: string
  // create_time?: string
  // update_time?: string
  // delete_time?: string
  // group_id?: string
  station_id?: string
  sku_id: string
  unit_id?: string
  name: string
  desc?: string
  type: BomType
  customized_code: string
  base_unit_id: string
  quantity: string
  processes?: Bom_Processes
  customer_ids?: Bom_UserIDs
}
export interface BomSnapshotId {
  bom_id: string
  revision: string
}
export interface BomSnapMap {
  boms: { [key: string]: Bom }
}
export interface BomMaterial {
  bom_material_id: string
  create_time?: string
  update_time?: string
  delete_time?: string
  group_id?: string
  station_id?: string
  bom_id: string
  sku_id: string
  bom_type?: BomType
}
export enum Task_State {
  STATE_UNSPECIFIED = 0,
  STATE_PREPARE = 1,
  STATE_STARTED = 2,
  STATE_FINISHED = 3,
}
export enum Task_Type {
  TYPE_UNSPECIFIED = 0,
  TYPE_PRODUCE = 1,
  TYPE_PACK = 2,
}
export enum Task_Source {
  SOURCE_UNSPECIFIED = 0,
  SOURCE_ORDER = 1,
  SOURCE_PLAN = 2,
  SOURCE_PACK_TASK = 3,
}
export enum Task_Operation {
  OPERATION_UNSPECIFIED = 0,
  OPERATION_RELEASE = 1,
  OPERATION_FINISH = 2,
  OPERATION_MERGE = 3,
  OPERATION_DELETE = 4,
  OPERATION_MODIFY_PLAN_AMOUNT = 5,
  OPERATION_MODIFY_OUTPUT_AMOUNT = 6,
  OPERATION_FINISH_AND_OUTPUT = 7,
}
export enum Task_TimeType {
  TIME_TYPE_UNSPECIFIED = 0,
  TIME_TYPE_CREATE = 1,
  TIME_TYPE_DELIVERY = 2,
  TIME_TYPE_RELEASE = 3,
}
export enum Task_OutputSource {
  OUTPUT_SOURCE_UNSPECIFIED = 0,
  OUTPUT_SOURCE_TYPE_IN = 1,
  OUTPUT_SOURCE_LAST_PROCESS = 2,
}
export interface Task_ByProduct {
  sku_id?: string
  sku_name?: string
  unit_id?: string
  plan_amount: string
  output_amount: string
}
export interface Task_ByProducts {
  by_products?: Task_ByProduct[]
}
export interface Task {
  task_id: string
  create_time?: string
  update_time?: string
  delete_time?: string
  group_id?: string
  station_id?: string
  sku_id: string
  sku_name?: string
  unit_id: string
  sku_customize_code?: string
  bom_id?: string
  bom_name?: string
  bom_revision?: string
  serial_no?: string
  batch?: string
  delivery_time?: string
  release_time?: string
  finish_time?: string
  state?: Task_State
  type?: Task_Type
  order_amount: string
  plan_amount: string
  output_amount: string
  base_unit_id?: string
  base_unit_output_amount: string
  source?: Task_Source
  by_products?: Task_ByProducts
  target_customer_id?: string
  last_process_id?: string
  input_receive_total_price?: string
  input_return_total_price?: string
  input_actual_usage_total_price?: string
}
export interface ReqCreateTask {
  // task_id: string
  // create_time?: string
  // update_time?: string
  // delete_time?: string
  // group_id?: string
  station_id?: string
  sku_id: string
  sku_name?: string
  unit_id: string
  sku_customize_code?: string
  bom_id?: string
  bom_name?: string
  bom_revision?: string
  serial_no?: string
  batch?: string
  delivery_time?: string
  release_time?: string
  finish_time?: string
  state?: Task_State
  type?: Task_Type
  order_amount: string
  plan_amount: string
  output_amount: string
  base_unit_id?: string
  base_unit_output_amount: string
  source?: Task_Source
  by_products?: Task_ByProducts
  target_customer_id?: string
  last_process_id?: string
  input_receive_total_price?: string
  input_return_total_price?: string
  input_actual_usage_total_price?: string
}
export enum TaskInput_Towards {
  TOWARDS_UNSPECIFIED = 0,
  TOWARDS_PRODUCTION = 1,
  TOWARDS_PURCHASE = 2,
}
export interface TaskInput_InputLog {
  sku_id?: string
  unit_id?: string
  task_id?: string
  quantity?: string
  price?: string
  sheet_id?: string
  detail_id?: string
}
export interface TaskInput_InputLogs {
  receive_logs?: TaskInput_InputLog[]
  return_logs?: TaskInput_InputLog[]
}
export interface TaskInput {
  task_input_id: string
  create_time?: string
  update_time?: string
  delete_time?: string
  group_id?: string
  station_id?: string
  task_id?: string
  sku_id?: string
  sku_name?: string
  unit_id?: string
  plan_usage_amount: string
  actual_usage_amount: string
  receive_amount: string
  return_amount: string
  towards?: TaskInput_Towards
  receive_total_price?: string
  return_total_price?: string
  actual_usage_total_price?: string
  input_logs?: TaskInput_InputLogs
}
export enum TaskOutput_State {
  STATE_UNSPECIFIED = 0,
  STATE_NOT_SUBMITTED = 1,
  STATE_SUBMITTED = 2,
}
export interface TaskOutput {
  task_output_id: string
  create_time?: string
  update_time?: string
  delete_time?: string
  group_id?: string
  station_id?: string
  sku_id: string
  sku_name?: string
  type?: OutputType
  state?: TaskOutput_State
  source?: Task_OutputSource
  unit_id: string
  output_amount: string
  base_unit_id: string
  base_unit_output_amount: string
  task_id?: string
  task_serial_no?: string
  task_type?: Task_Type
  delivery_time?: string
  release_time?: string
}
export enum TaskProcess_State {
  STATE_UNSPECIFIED = 0,
  STATE_PREPARE = 1,
  STATE_STARTED = 2,
  STATE_FINISHED = 3,
}
export enum TaskProcess_Operation {
  OPERATION_UNSPECIFIED = 0,
  OPERATION_MODIFY_PROCESSOR = 1,
  OPERATION_START = 2,
  OPERATION_FINISH = 3,
  OPERATION_MODIFY_OUTPUT_AMOUNT = 4,
  OPERATION_MODIFY_ACTUAL_AMOUNT = 5,
  OPERATION_FINISH_AND_OUTPUT = 6,
}
export interface TaskProcess_Material {
  sku_id?: string
  sku_name?: string
  unit_id?: string
  plan_amount: string
  actual_amount: string
  base_unit_id?: string
  base_unit_actual_amount?: string
}
export interface TaskProcess_Attr {
  attr_id?: string
  name?: string
  value?: string
}
export interface TaskProcess_Attrs {
  attrs?: TaskProcess_Attr[]
}
export interface TaskProcess_Inputs {
  inputs?: TaskProcess_Material[]
}
export interface TaskProcess_Output {
  material?: TaskProcess_Material
  type?: OutputType
}
export interface TaskProcess_Outputs {
  outputs?: TaskProcess_Output[]
}
export interface TaskProcess {
  task_process_id: string
  create_time?: string
  update_time?: string
  delete_time?: string
  group_id?: string
  station_id?: string
  task_id?: string
  process_template_id?: string
  process_id?: string
  process_name?: string
  attrs?: TaskProcess_Attrs
  inputs?: TaskProcess_Inputs
  outputs?: TaskProcess_Outputs
  state?: TaskProcess_State
  processor?: string
  delivery_time?: string
  release_time?: string
  bom_process_type?: Bom_Process_Type
  rank?: number
  start_time?: string
  end_time?: string
  operator_id?: string
  operator_code?: string
}
export interface TaskOrder {
  task_order_id: string
  create_time?: string
  update_time?: string
  delete_time?: string
  group_id?: string
  station_id?: string
  task_id?: string
  order_id?: string
  order_serial_no?: string
  sku_id?: string
  unit_id?: string
  detail_id?: string
  customer_id?: string
  customer_name?: string
  order_amount: string
  sku_remark?: string
  task_order_amount?: string
}
export enum TaskWeight_State {
  STATE_UNSPECIFIED = 0,
  STATE_NOT_SUBMITTED = 1,
  STATE_SUBMITTED = 2,
}
export interface TaskWeight {
  task_weight_id: string
  create_time?: string
  update_time?: string
  delete_time?: string
  group_id?: string
  station_id?: string
  task_id?: string
  sku_id?: string
  unit_id?: string
  task_process_id?: string
  base_unit_id?: string
  quantity: string
  customer_id?: string
  customer_name?: string
  customized_code?: string
  state?: TaskWeight_State
}
export interface ReqCreateTaskWeight {
  // task_weight_id: string
  // create_time?: string
  // update_time?: string
  // delete_time?: string
  // group_id?: string
  station_id?: string
  task_id?: string
  sku_id?: string
  unit_id?: string
  task_process_id?: string
  base_unit_id?: string
  quantity: string
  customer_id?: string
  customer_name?: string
  customized_code?: string
  state?: TaskWeight_State
}
export enum TaskSheet_Type {
  TYPE_UNSPECIFIED = 0,
  TYPE_PRODUCT = 1,
  TYPE_MATERIAL = 2,
}
export interface TaskSheet_Filter {
  task_ids?: string[]
}
export interface TaskSheet {
  task_sheet_id: string
  create_time?: string
  update_time?: string
  delete_time?: string
  group_id?: string
  station_id?: string
  task_sheet_code?: string
  sheet_type?: TaskSheet_Type
  filter?: TaskSheet_Filter
}
export interface TaskDetail {
  task?: Task
  task_processes?: TaskProcess[]
  task_inputs?: TaskInput[]
  task_orders?: TaskOrder[]
}
export interface CreateProcessTypeRequest {
  process_type: ReqCreateProcessType
}
export interface CreateProcessTypeResponse {
  process_type: ProcessType
}
export interface UpdateProcessTypeRequest {
  process_type: ProcessType
}
export interface UpdateProcessTypeResponse {
  process_type: ProcessType
}
export interface ListProcessTypeRequest {
  process_type_id?: string[]
  q?: string
  paging: common.PagingParams
}
export interface ListProcessTypeResponse {
  process_types: ProcessType[]
  paging: common.PagingResult
}
export interface GetProcessTypeRequest {
  process_type_id: string
}
export interface GetProcessTypeResponse {
  process_type: ProcessType
}
export interface DeleteProcessTypeRequest {
  process_type_id: string
}
export interface DeleteProcessTypeResponse {
  process_type: ProcessType
}
export interface CreateProcessTemplateRequest {
  process_template: ReqCreateProcessTemplate
}
export interface CreateProcessTemplateResponse {
  process_template: ProcessTemplate
}
export interface UpdateProcessTemplateRequest {
  process_template: ProcessTemplate
}
export interface UpdateProcessTemplateResponse {
  process_template: ProcessTemplate
}
export interface ListProcessTemplateRequest {
  process_template_ids?: string[]
  process_type_ids?: string[]
  q?: string
  exclude_process_pack?: boolean
  paging: common.PagingParams
}
export interface ListProcessTemplateResponse {
  process_templates: ProcessTemplate[]
  paging: common.PagingResult
}
export interface GetProcessTemplateRequest {
  process_template_id?: string
  process_pack?: boolean
}
export interface GetProcessTemplateResponse {
  process_template: ProcessTemplate
}
export interface DeleteProcessTemplateRequest {
  process_template_id: string
}
export interface DeleteProcessTemplateResponse {
  process_template: ProcessTemplate
}
export interface ExportProcessTemplateRequest {
}
export interface ExportProcessTemplateResponse {
  task_id?: string
}
export interface ExportProcessTemplateExecuteData {
  process_templates?: ProcessTemplate[]
}
export interface CreateProcessorRequest {
  processor: ReqCreateProcessor
}
export interface CreateProcessorResponse {
  processor: Processor
}
export interface UpdateProcessorRequest {
  processor: Processor
}
export interface UpdateProcessorResponse {
  processor: Processor
}
export interface ListProcessorRequest {
  parent_ids?: string[]
  processor_ids?: string[]
  q?: string
  paging: common.PagingParams
}
export interface ListProcessorResponse {
  processors: Processor[]
  paging: common.PagingResult
}
export interface DeleteProcessorRequest {
  processor_id: string
}
export interface DeleteProcessorResponse {
  processor: Processor
}
export interface ListProcessTemplateOfProcessorRequest {
  processor_id?: string
}
export interface ListProcessTemplateOfProcessorResponse {
  process_template_ids?: string[]
}
export interface ListProcessorOfProcessTemplateRequest {
  process_template_ids?: string[]
}
export interface ListProcessorOfProcessTemplateResponse {
  process_template_processor_ids?: { [key: string]: string }
}
export interface UpdateProcessorProcessTemplateRequest {
  processor_id: string
  process_template_ids?: string[]
}
export interface UpdateProcessorProcessTemplateResponse {
  process_template_ids?: string[]
}
export interface CreateBomRequest {
  bom: ReqCreateBom
}
export interface CreateBomResponse {
  bom: Bom
}
export interface UpdateBomRequest {
  bom: Bom
}
export interface UpdateBomResponse {
  bom: Bom
}
export interface ListProduceBomRequest {
  sku_id?: string
  bom_ids?: string[]
  paging: common.PagingParams
  need_deleted?: boolean
}
export interface ListProduceBomSkuRequest {
  list_sku_request?: merchandise.ListSkuRequest
}
export interface ListProduceBomSkuResponse {
  list_sku_response?: merchandise.ListSkuResponse
}
export interface ListProduceBomResponse {
  boms?: Bom[]
  paging: common.PagingResult
}
export interface GetManyBomRequest {
  bom_ids?: string[]
}
export interface GetManyBomResponse {
  boms: { [key: string]: Bom }
}
export interface GetBomRequest {
  bom_id: string
  revision?: string
}
export interface GetBomResponse {
  bom: Bom
  units?: { [key: string]: merchandise.Unit }
  skus?: { [key: string]: merchandise.Sku }
  process_templates?: { [key: string]: ProcessTemplate }
}
export interface ListPackBomRequest {
  ssu_ids?: merchandise.SsuId[]
}
export interface ListPackBomResponse {
  boms?: Bom[]
}
export interface GetPackBomRequest {
  sku_id: string
  unit_id: string
}
export interface GetPackBomResponse {
  bom: Bom
  skus?: { [key: string]: merchandise.Sku }
}
export interface DeleteBomRequest {
  bom_id: string
}
export interface DeleteBomResponse {
  bom: Bom
}
export interface ExportBomRequest {
  bom_type?: BomType
}
export interface ExportBomResponse {
  task_id?: string
}
export interface ImportBomRequest {
  file_url?: string
  op_type: OpType
}
export interface ImportBomResponse {
  task_id?: string
}
export interface ExportBomExecuteData {
  boms?: Bom[]
  bom_type?: BomType
}
export interface CreateBomSnapshotRequest {
  bom?: Bom
}
export interface CreateBomSnapshotResponse {
  bom?: Bom
}
export interface GetBomSnapshotRequest {
  bom_snapshot_id: BomSnapshotId
}
export interface GetBomSnapshotResponse {
  bom?: Bom
}
export interface ListBomSnapshotRequest {
  bom_snapshot_ids: BomSnapshotId[]
}
export interface ListBomSnapshotResponse {
  bom_snapshots: { [key: string]: BomSnapMap }
}
export interface CreateTaskRequest_PurchaseSku {
  sku_id?: string
  unit_id?: string
  amount?: string
}
export interface CreateTaskRequest {
  task: ReqCreateTask
  bom: Bom
  task_orders?: TaskOrder[]
  purchase_skus?: CreateTaskRequest_PurchaseSku[]
  purchase_batch?: AsyncTaskCreateParameter_Batch
}
export interface CreateTaskResponse {
  task_detail: TaskDetail
}
export interface ListTaskRequest {
  time_type?: Task_TimeType
  begin_time?: string
  end_time?: string
  state?: Task_State
  source?: Task_Source
  batch_info?: string
  sku_type?: merchandise.Sku_NotPackageSubSkuType
  processor_ids?: string[]
  target_customer_ids?: string[]
  task_type?: Task_Type
  q?: string
  sku_ids?: string[]
  task_ids?: string[]
  process_template_ids?: string[]
  states?: Task_State[]
  serial_no?: string
  category_ids?: string[]
  spu_ids?: string[]
  input_sku_ids?: string[]
  paging: common.PagingParams
  need_deleted?: boolean
  need_details?: boolean
}
export interface ListTaskResponse {
  task_details?: TaskDetail[]
  process_templates?: { [key: string]: ProcessTemplate }
  units?: { [key: string]: merchandise.Unit }
  skus?: { [key: string]: merchandise.GetManySkuResponse_SkuInfo }
  paging: common.PagingResult
}
export interface GetManyTaskRequest {
  task_ids?: string[]
  need_deleted?: boolean
  need_details?: boolean
}
export interface GetManyTaskResponse {
  task_details?: { [key: string]: TaskDetail }
  skus?: { [key: string]: merchandise.GetManySkuResponse_SkuInfo }
}
export interface ListTaskBatchRequest {
  time_type?: Task_TimeType
  begin_time?: string
  end_time?: string
  task_type?: Task_Type
}
export interface ListTaskBatchResponse {
  batches?: string[]
}
export interface GetTaskRequest {
  task_id: string
}
export interface GetTaskResponse {
  task: Task
  task_processes?: TaskProcess[]
  task_inputs?: TaskInput[]
  task_orders?: TaskOrder[]
  units?: { [key: string]: merchandise.Unit }
  skus?: { [key: string]: merchandise.GetManySkuResponse_SkuInfo }
}
export interface ExportTaskRequest {
  filter?: ListTaskRequest
}
export interface ExportTaskResponse {
  task_id?: string
}
export interface ExportTaskExecuteData {
  tasks?: Task[]
  task_type?: Task_Type
}
export interface ExportTaskDataRequest {
  task_type?: Task_Type
  begin_time?: string
  end_time?: string
  get_many_sku_request?: merchandise.GetManySkuRequest
}
export interface ExportTaskDataResponse {
  task_id?: string
}
export interface SyncTaskOrderAmountRequest {
  group_id?: string
  order_id?: string
  detail_id?: string
  order_amount?: string
}
export interface SyncTaskOrderAmountResponse {
}
export interface GetTaskCategoryTreeRequest {
  time_type?: Task_TimeType
  begin_time?: string
  end_time?: string
  task_type?: Task_Type
}
export interface GetTaskCategoryTreeResponse {
  categories?: merchandise.Category[]
  spus?: merchandise.Spu[]
  skus?: merchandise.Sku[]
}
export interface UpdateTaskRequest {
  operation: Task_Operation
  task: Task
}
export interface UpdateTaskResponse {
  task: Task
}
export interface DeleteTaskRequest {
  task_id: string
}
export interface DeleteTaskResponse {
  task: Task
}
export interface BatchUpdateTaskStatusRequest {
  operation: Task_Operation
  filter: ListTaskRequest
}
export interface BatchUpdateTaskStatusResponse {
}
export interface UpdateTaskOutputRequest {
  tasks: Task[]
  is_finish?: boolean
  task_type: Task_Type
}
export interface UpdateTaskOutputResponse {
  tasks?: Task[]
}
export enum UpdateTaskInputRequest_Type {
  TYPE_UNSPECIFIED = 0,
  TYPE_RECEIVE = 1,
  TYPE_RETURN = 2,
}
export interface UpdateTaskInputRequest {
  details?: TaskInput_InputLog[]
  type?: UpdateTaskInputRequest_Type
}
export interface UpdateTaskInputResponse {
}
export interface ListTaskOutputRequest {
  time_type?: Task_TimeType
  begin_time?: string
  end_time?: string
  task_type?: Task_Type
  state?: TaskOutput_State
}
export interface ListTaskOutputResponse {
  task_outputs: TaskOutput[]
  units?: { [key: string]: merchandise.Unit }
  skus?: { [key: string]: merchandise.GetManySkuResponse_SkuInfo }
}
export interface SubmitTaskOutputRequest {
  task_output_ids?: string[]
}
export interface SubmitTaskOutputResponse {
}
export interface SplitTaskProcessRequest_SplitData {
  plan_amount: string
  processor?: string
}
export interface SplitTaskProcessRequest {
  split_data: SplitTaskProcessRequest_SplitData[]
  task_id: string
  process_id: string
}
export interface SplitTaskProcessResponse {
  task_processes: TaskProcess[]
}
export interface UpdateTaskProcessRequest {
  operation: TaskProcess_Operation
  task_process: TaskProcess
  operator_code?: string
}
export interface UpdateTaskProcessResponse {
  task_process: TaskProcess
}
export interface GetTaskProcessRequest {
  task_process_id: string
}
export interface GetTaskProcessResponse {
  task_process: TaskProcess
  task?: Task
  task_weights?: TaskWeight[]
  skus?: { [key: string]: merchandise.GetManySkuResponse_SkuInfo }
}
export interface GetTaskWeightRequest {
  task_weight_id?: string
  customized_code?: string
}
export interface GetTaskWeightResponse {
  task_weight: TaskWeight
  task_process?: TaskProcess
  task?: Task
  skus?: { [key: string]: merchandise.GetManySkuResponse_SkuInfo }
  customers?: { [key: string]: enterprise.Customer }
}
export interface CreateTaskWeightRequest {
  task_weight: ReqCreateTaskWeight
}
export interface CreateTaskWeightResponse {
  task_weight: TaskWeight
}
export interface DeleteTaskWeightRequest {
  task_weight_id: string
}
export interface DeleteTaskWeightResponse {
  task_weight: TaskWeight
}
export interface ListTaskWeightRequest {
  task_id: string
  task_process_id: string
}
export interface ListTaskWeightResponse {
  task_weights: TaskWeight[]
}
export interface BatchCreateTaskWeightRequest {
  task_id: string
  task_process_id: string
  base_unit_id: string
  quantity: string
  customer_id?: string
  customer_name?: string
  count: number
}
export interface BatchCreateTaskWeightResponse {
  task_weights?: TaskWeight[]
}
export interface SubmitTaskWeightRequest {
  task_id: string
  task_process_id: string
}
export interface SubmitTaskWeightResponse {
  task_weights?: TaskWeight[]
}
export interface CreateTaskPrintSheetCodeRequest {
  sheet_type?: TaskSheet_Type
  task_ids?: string[]
  process_ids?: string[]
  processor_ids?: string[]
}
export interface CreateTaskPrintSheetCodeResponse {
  code?: string
}
export interface GetTaskProductSheetRequest {
  code?: string
}
export interface GetTaskProductSheetResponse {
  tasks?: Task[]
  skus?: { [key: string]: merchandise.GetManySkuResponse_SkuInfo }
}
export interface GetTaskMaterialSheetRequest {
  code?: string
}
export interface GetTaskMaterialSheetResponse {
  task_inputs?: TaskInput[]
  task_details?: { [key: string]: TaskDetail }
  skus?: { [key: string]: merchandise.GetManySkuResponse_SkuInfo }
}
export enum AsyncTaskCreateParameter_Source {
  SOURCE_UNSPECIFIED = 0,
  SOURCE_PLAN_PACK = 1,
  SOURCE_PLAN_PRODUCTION = 2,
  SOURCE_ORDER_DISPATCH = 3,
}
export interface AsyncTaskCreateParameter_Batch {
  delivery_time?: string
  name?: string
}
export interface AsyncTaskCreateParameter_ProductDetail {
  sku_id?: string
  unit_id?: string
  bom_id?: string
  bom_revision?: string
  source_customer_id?: string
  order_amount: string
  order_id?: string
  order_serial_no?: string
  order_receive_time?: string
  customer_id?: string
  customer_name?: string
  detail_id?: string
  sku_remark?: string
}
export interface AsyncTaskCreateParameter {
  group_id?: string
  station_id?: string
  source?: AsyncTaskCreateParameter_Source
  pack_by_customer?: boolean
  production_by_customer?: boolean
  pack_batch?: AsyncTaskCreateParameter_Batch
  product_batch?: AsyncTaskCreateParameter_Batch
  purchase_batch?: AsyncTaskCreateParameter_Batch
  product_details?: AsyncTaskCreateParameter_ProductDetail[]
}
export interface AsyncTaskExecuteData {
  create_task_data?: CreateTaskRequest[]
}
export interface AsyncPurchaseTaskExecuteData_PurchaseSku {
  sku_id?: string
  unit_id?: string
  amount?: string
}
export interface AsyncPurchaseTaskExecuteData {
  purchase_skus?: AsyncPurchaseTaskExecuteData_PurchaseSku[]
}
export interface CreatePlanTaskRequest_ProductDetail {
  sku_id: string
  unit_id: string
  order_amount: string
}
export interface CreatePlanTaskRequest {
  delivery_time: string
  batch?: string
  target_customer_id?: string
  task_type?: Task_Type
  product_details?: CreatePlanTaskRequest_ProductDetail[]
}
export interface CreatePlanTaskResponse {
  task_id?: string
}
export interface CreateOrderTaskRequest {
  filter?: order.ListOrderRequest
  all?: boolean
}
export interface CreateOrderTaskResponse {
  async_task_id?: string
}
export interface ListTaskProductSheetByTaskRequest {
  list_task_request?: ListTaskRequest
}
export interface ListTaskProductSheetByTaskResponse_Sheet {
  code?: string
  task?: Task
  task_processes?: TaskProcess[]
  task_orders?: TaskOrder[]
}
export interface ListTaskProductSheetByTaskResponse {
  sheets?: ListTaskProductSheetByTaskResponse_Sheet[]
  process_templates?: { [key: string]: ProcessTemplate }
  units?: { [key: string]: merchandise.Unit }
  skus?: { [key: string]: merchandise.GetManySkuResponse_SkuInfo }
}
export interface ListTaskProductSheetByProcessRequest {
  list_task_request?: ListTaskRequest
}
export interface ListTaskProductSheetByProcessResponse_Sheet {
  code?: string
  process_template_id?: string
  task_processes?: TaskProcess[]
}
export interface ListTaskProductSheetByProcessResponse {
  sheets?: ListTaskProductSheetByProcessResponse_Sheet[]
  task_details?: { [key: string]: TaskDetail }
  process_templates?: { [key: string]: ProcessTemplate }
  units?: { [key: string]: merchandise.Unit }
  skus?: { [key: string]: merchandise.GetManySkuResponse_SkuInfo }
  boms?: { [key: string]: BomSnapMap }
}
export interface ListTaskProductSheetByProcessorRequest {
  list_task_request?: ListTaskRequest
  level: number
}
export interface ListTaskProductSheetByProcessorResponse_Sheet {
  code?: string
  processor_id?: string
  task_processes?: TaskProcess[]
}
export interface ListTaskProductSheetByProcessorResponse {
  sheets?: ListTaskProductSheetByProcessorResponse_Sheet[]
  task_details?: { [key: string]: TaskDetail }
  process_templates?: { [key: string]: ProcessTemplate }
  units?: { [key: string]: merchandise.Unit }
  processors?: { [key: string]: Processor }
  skus?: { [key: string]: merchandise.GetManySkuResponse_SkuInfo }
  boms?: { [key: string]: BomSnapMap }
}
export interface ListTaskMaterialSheetByTaskRequest {
  list_task_request?: ListTaskRequest
}
export interface ListTaskMaterialSheetByTaskResponse_Sheet {
  code?: string
  task_inputs?: TaskInput[]
}
export interface ListTaskMaterialSheetByTaskResponse {
  sheet?: ListTaskMaterialSheetByTaskResponse_Sheet
  task_details?: { [key: string]: TaskDetail }
  units?: { [key: string]: merchandise.Unit }
  skus?: { [key: string]: merchandise.GetManySkuResponse_SkuInfo }
}
export interface ListTaskMaterialSheetByProcessorRequest {
  list_task_request?: ListTaskRequest
  level: number
}
export interface ListTaskMaterialSheetByProcessorResponse_Sheet {
  code?: string
  processor_id?: string
  task_processes?: TaskProcess[]
}
export interface ListTaskMaterialSheetByProcessorResponse {
  sheets?: ListTaskMaterialSheetByProcessorResponse_Sheet[]
  task_details?: { [key: string]: TaskDetail }
  process_templates?: { [key: string]: ProcessTemplate }
  units?: { [key: string]: merchandise.Unit }
  processors?: { [key: string]: Processor }
  skus?: { [key: string]: merchandise.GetManySkuResponse_SkuInfo }
}
export interface SysSyncTaskRequest {
  sync_options?: common.SyncOptions
}
export interface SysSyncTaskResponse {
  tasks?: Task[]
  has_more?: boolean
}
export interface SysSyncTaskInputRequest {
  sync_options?: common.SyncOptions
}
export interface SysSyncTaskInputResponse {
  task_inputs?: TaskInput[]
  has_more?: boolean
  tasks?: { [key: string]: Task }
}
export interface ImportBomTaskParameter_BomMaterialRow {
  row_no?: string
  bom_name?: string
  bom_customized_code?: string
  sku_customize_code?: string
  quantity?: string
  base_unit?: string
  material_customized_code?: string
  material_quantity?: string
  material_unit?: string
  material_process?: string
  bom_process?: string
}
export interface ImportBomTaskParameter {
  op_type: OpType
  rows?: ImportBomTaskParameter_BomMaterialRow[]
}
export interface ImportBomExecuteData_Attr {
  attr_name?: string
  attr_value?: string
}
export interface ImportBomExecuteData_Process {
  name?: string
  attrs?: ImportBomExecuteData_Attr[]
}
export interface ImportBomExecuteData_Material {
  customize_code?: string
  unit?: string
  quantity?: string
  processes?: ImportBomExecuteData_Process[]
}
export interface ImportBomExecuteData_Bom {
  bom_name?: string
  bom_customized_code?: string
  sku_customize_code?: string
  quantity?: string
  base_unit?: string
  materials?: ImportBomExecuteData_Material[]
  processes?: ImportBomExecuteData_Process[]
}
export interface ImportBomExecuteData_FailDesc {
  index?: number
  desc?: string
}
export interface ImportBomExecuteData {
  op_type: OpType
  boms?: ImportBomExecuteData_Bom[]
  fail_desc?: ImportBomExecuteData_FailDesc[]
}