syntax = "proto3";

package ceres.production;

option go_package          = "code.guanmai.cn/back_end/ceres/production/proto;proto";
option java_multiple_files = true;

import "./google/api/annotations.proto";
import "./include/protoc-gen-validate/validate.proto";

import "./merchandise/proto/merchandise.proto";
import "./common/proto/common.proto";
import "./common/proto/options.proto";
import "./order/proto/order.proto";
import "./enterprise/proto/enterprise.proto";
import "./cmd/protoc-gen-dao/proto/dao.proto";

service ProductionService {
    // 工序类型
    rpc CreateProcessType(CreateProcessTypeRequest) returns (CreateProcessTypeResponse) {
        option (google.api.http) = {
            post : "/ceres/production/ProductionService/CreateProcessType"
        };
        option (common.options.annotation) = {
            codes : "DUPLICATE_NAME"
        };
    }
    rpc UpdateProcessType(UpdateProcessTypeRequest) returns (UpdateProcessTypeResponse) {
        option (google.api.http) = {
            post : "/ceres/production/ProductionService/UpdateProcessType"
        };
        option (common.options.annotation) = {
            codes : "DUPLICATE_NAME"
        };
    }
    rpc DeleteProcessType(DeleteProcessTypeRequest) returns (DeleteProcessTypeResponse) {
        option (google.api.http) = {
            post : "/ceres/production/ProductionService/DeleteProcessType"
        };
    }
    rpc ListProcessType(ListProcessTypeRequest) returns (ListProcessTypeResponse) {
        option (google.api.http) = {
            post : "/ceres/production/ProductionService/ListProcessType"
        };
    }
    rpc GetProcessType(GetProcessTypeRequest) returns (GetProcessTypeResponse) {
        option (google.api.http) = {
            post : "/ceres/production/ProductionService/GetProcessType"
        };
    }

    // 工序模板
    rpc CreateProcessTemplate(CreateProcessTemplateRequest) returns (CreateProcessTemplateResponse) {
        option (google.api.http) = {
            post : "/ceres/production/ProductionService/CreateProcessTemplate"
        };
        option (common.options.annotation) = {
            codes : "DUPLICATE_NAME,DUPLICATE_CODE"
        };
    }
    rpc UpdateProcessTemplate(UpdateProcessTemplateRequest) returns (UpdateProcessTemplateResponse) {
        option (google.api.http) = {
            post : "/ceres/production/ProductionService/UpdateProcessTemplate"
        };
        option (common.options.annotation) = {
            codes : "DUPLICATE_NAME,DUPLICATE_CODE"
        };
    }
    rpc DeleteProcessTemplate(DeleteProcessTemplateRequest) returns (DeleteProcessTemplateResponse) {
        option (google.api.http) = {
            post : "/ceres/production/ProductionService/DeleteProcessTemplate"
        };
    }
    rpc ListProcessTemplate(ListProcessTemplateRequest) returns (ListProcessTemplateResponse) {
        option (google.api.http) = {
            post : "/ceres/production/ProductionService/ListProcessTemplate"
        };
    }
    rpc GetProcessTemplate(GetProcessTemplateRequest) returns (GetProcessTemplateResponse) {
        option (google.api.http) = {
            post : "/ceres/production/ProductionService/GetProcessTemplate"
        };
    }
    rpc ExportProcessTemplate(ExportProcessTemplateRequest) returns (ExportProcessTemplateResponse) {
        option (google.api.http) = {
            post : "/ceres/production/ProductionService/ExportProcessTemplate"
        };
    }

    // 工厂模型
    rpc CreateProcessor(CreateProcessorRequest) returns (CreateProcessorResponse) {
        option (google.api.http) = {
            post : "/ceres/production/ProductionService/CreateProcessor"
        };
        option (common.options.annotation) = {
            codes : "DUPLICATE_NAME"
        };
    }
    rpc UpdateProcessor(UpdateProcessorRequest) returns (UpdateProcessorResponse) {
        option (google.api.http) = {
            post : "/ceres/production/ProductionService/UpdateProcessor"
        };
        option (common.options.annotation) = {
            codes : "DUPLICATE_NAME"
        };
    }
    rpc DeleteProcessor(DeleteProcessorRequest) returns (DeleteProcessorResponse) {
        option (google.api.http) = {
            post : "/ceres/production/ProductionService/DeleteProcessor"
        };
    }
    rpc ListProcessor(ListProcessorRequest) returns (ListProcessorResponse) {
        option (google.api.http) = {
            post : "/ceres/production/ProductionService/ListProcessor"
        };
    }

    // 工厂模型绑定工序模板
    rpc UpdateProcessorProcessTemplate(UpdateProcessorProcessTemplateRequest) returns (UpdateProcessorProcessTemplateResponse) {
        option (google.api.http) = {
            post : "/ceres/production/ProductionService/UpdateProcessorProcessTemplate"
        };
    }
    rpc ListProcessTemplateOfProcessor(ListProcessTemplateOfProcessorRequest) returns (ListProcessTemplateOfProcessorResponse) {
        option (google.api.http) = {
            post : "/ceres/production/ProductionService/ListProcessTemplateOfProcessor"
        };
    }
    rpc ListProcessorOfProcessTemplate(ListProcessorOfProcessTemplateRequest) returns (ListProcessorOfProcessTemplateResponse) {
        option (google.api.http) = {
            post : "/ceres/production/ProductionService/ListProcessorOfProcessTemplate"
        };
    }

    // bom管理
    rpc CreateBom(CreateBomRequest) returns (CreateBomResponse) {
        option (google.api.http) = {
            post : "/ceres/production/ProductionService/CreateBom"
        };
        option (common.options.annotation) = {
            codes : "DUPLICATE_NAME,DUPLICATE_CODE"
        };
    }
    rpc UpdateBom(UpdateBomRequest) returns (UpdateBomResponse) {
        option (google.api.http) = {
            post : "/ceres/production/ProductionService/UpdateBom"
        };
        option (common.options.annotation) = {
            codes : "DUPLICATE_NAME,DUPLICATE_CODE"
        };
    }
    rpc DeleteBom(DeleteBomRequest) returns (DeleteBomResponse) {
        option (google.api.http) = {
            post : "/ceres/production/ProductionService/DeleteBom"
        };
    }
    rpc ListProduceBom(ListProduceBomRequest) returns (ListProduceBomResponse) {
        option (google.api.http) = {
            post : "/ceres/production/ProductionService/ListProduceBom"
        };
    }
    rpc GetManyBom(GetManyBomRequest) returns (GetManyBomResponse) {
        option (google.api.http) = {
            post : "/ceres/production/ProductionService/GetManyBom"
        };
    }
    // 获取存在bom的sku
    rpc ListProduceBomSku(ListProduceBomSkuRequest) returns (ListProduceBomSkuResponse) {
        option (google.api.http) = {
            post : "/ceres/production/ProductionService/ListProduceBomSku"
        };
    }
    rpc GetPackBom(GetPackBomRequest) returns (GetPackBomResponse) {
        option (google.api.http) = {
            post : "/ceres/production/ProductionService/GetPackBom"
        };
    }
    rpc ListPackBom(ListPackBomRequest) returns (ListPackBomResponse) {
        option (google.api.http) = {
            post : "/ceres/production/ProductionService/ListPackBom"
        };
    }
    rpc GetBom(GetBomRequest) returns (GetBomResponse) {
        option (google.api.http) = {
            post : "/ceres/production/ProductionService/GetBom"
        };
    }
    rpc GetBomSnapshot(GetBomSnapshotRequest) returns (GetBomSnapshotResponse) {
        option (google.api.http) = {
            post : "/ceres/production/ProductionService/GetBomSnapshot"
        };
    }
    rpc ListBomSnapshot(ListBomSnapshotRequest) returns (ListBomSnapshotResponse) {
        option (google.api.http) = {
            post : "/ceres/production/ProductionService/ListBomSnapshot"
        };
    }
    rpc CreateBomSnapshot(CreateBomSnapshotRequest) returns (CreateBomSnapshotResponse) {
        option (google.api.http) = {
            post : "/ceres/production/ProductionService/CreateBomSnapshot"
        };
    }
    rpc ExportBom(ExportBomRequest) returns (ExportBomResponse) {
        option (google.api.http) = {
            post : "/ceres/production/ProductionService/ExportBom"
        };
    }
    rpc ImportBom(ImportBomRequest) returns (ImportBomResponse) {
        option (google.api.http) = {
            post : "/ceres/production/ProductionService/ImportBom"
        };
    }

    // 任务管理
    rpc CreateTask(CreateTaskRequest) returns (CreateTaskResponse) {
        option (google.api.http) = {
            post : "/ceres/production/ProductionService/CreateTask"
        };
    }
    // 创建预生产任务
    rpc CreatePlanTask(CreatePlanTaskRequest) returns (CreatePlanTaskResponse) {
        option (google.api.http) = {
            post : "/ceres/production/ProductionService/CreatePlanTask"
        };
    }
    // 创建订单来源任务
    rpc CreateOrderTask(CreateOrderTaskRequest) returns (CreateOrderTaskResponse) {
        option (google.api.http) = {
            post : "/ceres/production/ProductionService/CreateOrderTask"
        };
    }
    rpc UpdateTask(UpdateTaskRequest) returns (UpdateTaskResponse) {
        option (google.api.http) = {
            post : "/ceres/production/ProductionService/UpdateTask"
        };
    }
    rpc ListTask(ListTaskRequest) returns (ListTaskResponse) {
        option (google.api.http) = {
            post : "/ceres/production/ProductionService/ListTask"
        };
    }
    rpc GetManyTask(GetManyTaskRequest) returns (GetManyTaskResponse) {
        option (google.api.http) = {
            post : "/ceres/production/ProductionService/GetManyTask"
        };
    }
    rpc DeleteTask(DeleteTaskRequest) returns (DeleteTaskResponse) {
        option (google.api.http) = {
            post : "/ceres/production/ProductionService/DeleteTask"
        };
    }
    rpc GetTask(GetTaskRequest) returns (GetTaskResponse) {
        option (google.api.http) = {
            post : "/ceres/production/ProductionService/GetTask"
        };
    }
    rpc ExportTask(ExportTaskRequest) returns (ExportTaskResponse) {
        option (google.api.http) = {
            post : "/ceres/production/ProductionService/ExportTask"
        };
    }
    rpc ExportTaskData(ExportTaskDataRequest) returns (ExportTaskDataResponse) {
        option (google.api.http) = {
            post : "/ceres/production/ProductionService/ExportTaskData"
        };
    }
    rpc SyncTaskOrderAmount(SyncTaskOrderAmountRequest) returns (SyncTaskOrderAmountResponse) {
    }
    // 获取任务的分类树
    rpc GetTaskCategoryTree(GetTaskCategoryTreeRequest) returns (GetTaskCategoryTreeResponse) {
        option (google.api.http) = {
            post : "/ceres/production/ProductionService/GetTaskCategoryTree"
        };
    }
    rpc BatchUpdateTaskStatus(BatchUpdateTaskStatusRequest) returns (BatchUpdateTaskStatusResponse) {
        option (google.api.http) = {
            post : "/ceres/production/ProductionService/BatchUpdateTaskStatus"
        };
    }
    rpc UpdateTaskOutput(UpdateTaskOutputRequest) returns (UpdateTaskOutputResponse) {
        option (google.api.http) = {
            post : "/ceres/production/ProductionService/UpdateTaskOutput"
        };
    }
    // 获取任务批次信息
    rpc ListTaskBatch(ListTaskBatchRequest) returns (ListTaskBatchResponse) {
        option (google.api.http) = {
            post : "/ceres/production/ProductionService/ListTaskBatch"
        };
    };
    // 拆分任务工序
    rpc SplitTaskProcess(SplitTaskProcessRequest) returns (SplitTaskProcessResponse) {
        option (google.api.http) = {
            post : "/ceres/production/ProductionService/SplitTaskProcess"
        };
    }
    rpc UpdateTaskProcess(UpdateTaskProcessRequest) returns (UpdateTaskProcessResponse) {
        option (google.api.http) = {
            post : "/ceres/production/ProductionService/UpdateTaskProcess"
        };
    }
    rpc GetTaskProcess(GetTaskProcessRequest) returns (GetTaskProcessResponse) {
        option (google.api.http) = {
            post : "/ceres/production/ProductionService/GetTaskProcess"
        };
    }
    rpc UpdateTaskInput(UpdateTaskInputRequest) returns (UpdateTaskInputResponse) {
        option (google.api.http) = {
            post : "/ceres/production/ProductionService/UpdateTaskInput"
        };
    }
    rpc ListTaskOutput(ListTaskOutputRequest) returns (ListTaskOutputResponse) {
        option (google.api.http) = {
            post : "/ceres/production/ProductionService/ListTaskOutput"
        };
    }
    rpc SubmitTaskOutput(SubmitTaskOutputRequest) returns (SubmitTaskOutputResponse) {
        option (google.api.http) = {
            post : "/ceres/production/ProductionService/SubmitTaskOutput"
        };
    }
    // 任务定重
    rpc CreateTaskWeight(CreateTaskWeightRequest) returns (CreateTaskWeightResponse) {
        option (google.api.http) = {
            post : "/ceres/production/ProductionService/CreateTaskWeight"
        };
    }
    rpc GetTaskWeight(GetTaskWeightRequest) returns (GetTaskWeightResponse) {
        option (google.api.http) = {
            post : "/ceres/production/ProductionService/GetTaskWeight"
        };
    }
    rpc DeleteTaskWeight(DeleteTaskWeightRequest) returns (DeleteTaskWeightResponse) {
        option (google.api.http) = {
            post : "/ceres/production/ProductionService/DeleteTaskWeight"
        };
    }
    rpc ListTaskWeight(ListTaskWeightRequest) returns (ListTaskWeightResponse) {
        option (google.api.http) = {
            post : "/ceres/production/ProductionService/ListTaskWeight"
        };
    }
    rpc BatchCreateTaskWeight(BatchCreateTaskWeightRequest) returns (BatchCreateTaskWeightResponse) {
        option (google.api.http) = {
            post : "/ceres/production/ProductionService/BatchCreateTaskWeight"
        };
    }
    rpc SubmitTaskWeight(SubmitTaskWeightRequest) returns (SubmitTaskWeightResponse) {
        option (google.api.http) = {
            post : "/ceres/production/ProductionService/SubmitTaskWeight"
        };
    }

    rpc CreateTaskPrintSheetCode(CreateTaskPrintSheetCodeRequest) returns (CreateTaskPrintSheetCodeResponse) {
        option (google.api.http) = {
            post : "/ceres/production/ProductionService/CreateTaskPrintSheetCode"
        };
    }
    rpc GetTaskProductSheet(GetTaskProductSheetRequest) returns (GetTaskProductSheetResponse) {
        option (google.api.http) = {
            post : "/ceres/production/ProductionService/GetTaskProductSheet"
        };
    }
    rpc GetTaskMaterialSheet(GetTaskMaterialSheetRequest) returns (GetTaskMaterialSheetResponse) {
        option (google.api.http) = {
            post : "/ceres/production/ProductionService/GetTaskMaterialSheet"
        };
    }
    // 任务单据
    rpc ListTaskProductSheetByTask(ListTaskProductSheetByTaskRequest) returns (ListTaskProductSheetByTaskResponse) {
        option (google.api.http) = {
            post : "/ceres/production/ProductionService/ListTaskProductSheetByTask"
        };
    }
    rpc ListTaskProductSheetByProcess(ListTaskProductSheetByProcessRequest) returns (ListTaskProductSheetByProcessResponse) {
        option (google.api.http) = {
            post : "/ceres/production/ProductionService/ListTaskProductSheetByProcess"
        };
    }
    rpc ListTaskProductSheetByProcessor(ListTaskProductSheetByProcessorRequest) returns (ListTaskProductSheetByProcessorResponse) {
        option (google.api.http) = {
            post : "/ceres/production/ProductionService/ListTaskProductSheetByProcessor"
        };
    }
    rpc ListTaskMaterialSheetByTask(ListTaskMaterialSheetByTaskRequest) returns (ListTaskMaterialSheetByTaskResponse) {
        option (google.api.http) = {
            post : "/ceres/production/ProductionService/ListTaskMaterialSheetByTask"
        };
    }
    rpc ListTaskMaterialSheetByProcessor(ListTaskMaterialSheetByProcessorRequest) returns (ListTaskMaterialSheetByProcessorResponse) {
        option (google.api.http) = {
            post : "/ceres/production/ProductionService/ListTaskMaterialSheetByProcessor"
        };
    }

    // 同步全部任务
    rpc SysSyncTask(SysSyncTaskRequest) returns (SysSyncTaskResponse) {}
    // 同步全部任务领料
    rpc SysSyncTaskInput(SysSyncTaskInputRequest) returns (SysSyncTaskInputResponse) {}
}

message Status {
    enum Code {
        UNSPECIFIED              = 0;
        BUILTIN_PROCESS_TEMPLATE = 85700001; // 内置的包装工序，不能删除
        DUPLICATE_NAME           = 85700002; // 名称重复
        DUPLICATE_CODE           = 85700003; // 编码已存在
    }
}

message Attr {
    enum Type {
        TYPE_UNSPECIFIED = 0; // 未定义的类型
        TYPE_TEXT        = 1; // 文本
        TYPE_OPTIONS     = 2; // 可选项
    }

    uint64          attr_id = 1;
    string          name    = 2; // 属性名
    Type            type    = 3; // 属性类型
    repeated string values  = 4; // 属性可选值
}

// 操作类型
enum OpType {
    OPTYPE_UNSPECIFIED = 0;
    OPTYPE_CREATE      = 1; // 创建
    OPTYPE_UPDATE      = 2; // 更新
}

// bom类型
enum BomType {
    BOM_TYPE_UNSPECIFIED = 0;
    BOM_TYPE_PRODUCE     = 1; // 生产bom
    BOM_TYPE_PACK        = 2; // 包装bom
}

// 产出类型
enum OutputType {
    OUTPUT_TYPE_UNSPECIFIED = 0;
    OUTPUT_TYPE_MAIN        = 1; // 主产品
    OUTPUT_TYPE_EXTRA       = 2; // 副产品
}

// 工序类型
message ProcessType {
    option (dao.partition_count) = 100;
    option (dao.model_type)      = TYPE_PRODUCTION_PROCESSTYPE;

    enum Status {
        STATUS_UNSPECIFIED = 0;
        STATUS_DEFAULT     = 256; // 表示未分类的工序，不能删除
    }

    // @inject_tag: gorm:"PRIMARY_KEY;AUTO_INCREMENT:false"
    uint64 process_type_id = 1;
    uint64 status          = 2; // &1<<8表示未分类的工序，不能删除
    uint64 create_time     = 6;
    uint64 update_time     = 7; // 修改时间，创建的时候不传，修改的时候必传
    uint64 delete_time     = 8; // 可以通过delete_time判断是否删除

    uint64 group_id   = 10;
    uint64 station_id = 11;

    string name = 22 [ (validate.rules).string = {min_len : 1, max_len : 30} ]; // 类型名称
}

// 工序模板
message ProcessTemplate {
    option (dao.partition_count) = 100;
    option (dao.model_type)      = TYPE_PRODUCTION_PROCESSTEMPLATE;

    enum Status {
        STATUS_UNSPECIFIED = 0;
        STATUS_DEFAULT     = 256; // 表示系统默认的包装工序，不能删除
    }

    // @inject_tag: gorm:"PRIMARY_KEY;AUTO_INCREMENT:false"
    uint64 process_template_id = 1;
    uint64 status              = 2; // &1<<8表示系统默认的包装工序，不能删除

    uint64 create_time = 6;
    uint64 update_time = 7;
    uint64 delete_time = 8;

    uint64 group_id        = 10;
    uint64 station_id      = 11;
    uint64 process_type_id = 12; // 类型ID

    string name            = 21 [ (validate.rules).string = {min_len : 1, max_len : 30} ]; // 名称
    string customized_code = 22 [ (validate.rules).string = {min_len : 1} ];               // 工序编码
    string description     = 23;                                                           // 描述

    message Attrs {
        repeated Attr attrs          = 1;
        uint64        latest_attr_id = 2; // 当前使用的最大的属性ID，前端维护
    }
    Attrs attrs = 24; // 工序属性信息
}

// 工厂模型
message Processor {
    option (dao.partition_count) = 100;
    option (dao.model_type)      = TYPE_PRODUCTION_PROCESSOR;

    // @inject_tag: gorm:"PRIMARY_KEY;AUTO_INCREMENT:false"
    uint64 processor_id = 1;

    uint64 create_time = 6;
    uint64 update_time = 7;
    uint64 delete_time = 8;

    uint64 group_id   = 10;
    uint64 station_id = 11;
    uint64 parent_id  = 12; // 上级模型ID

    string name = 20 [ (validate.rules).string = {min_len : 1, max_len : 30} ];
}

// 工序模板与工厂模型绑定
message ProcessorProcessTemplate {
    // @inject_tag: gorm:"PRIMARY_KEY"
    uint64 processor_process_template_id = 1;

    uint64 group_id            = 10;
    uint64 station_id          = 11;
    uint64 processor_id        = 12; // 工厂模型ID
    uint64 process_template_id = 13; // 工序模板ID
}

// bom
message Bom {
    option (dao.partition_count) = 100;
    option (dao.model_type)      = TYPE_PRODUCTION_BOM;

    enum Status {
        STATUS_UNSPECIFIED = 0;
        STATUS_COMBINED    = 256; // 组合工序
        STATUS_DEFAULT     = 512; // 默认bom
    }

    // 工序信息
    message Process {
        enum Type {
            TYPE_UNSPECIFIED = 0;
            TYPE_NORMAL      = 1; // 普通工序
            TYPE_COMBINED    = 2; // 组合工序
        }
        // 物料
        message Material {
            enum Property {
                PROPERTY_UNSPECIFIED  = 0;
                PROPERTY_PRODUCT      = 1; // 成品
                PROPERTY_INTERMEDIATE = 2; // 中间物
            }
            uint64   sku_id   = 1 [ (validate.rules).uint64 = {gt : 0} ];
            uint64   unit_id  = 2 [ (validate.rules).uint64 = {gt : 0} ];
            string   quantity = 3 [ (validate.rules).string = {pattern : "^\\d+\\.?\\d*$"} ]; // 数量
            Property property = 4;                                                            // 物料属性（1成品 2中间物)
        }
        // 工序输入
        message Input {
            Material material        = 1;
            uint64   prev_process_id = 2; // 判断物料是否经过前置工序，没有的可以生成任务领料
        }
        // 工序产出
        message Output {
            Material   material        = 1;
            OutputType type            = 2; // 产出类型
            uint64     next_process_id = 3; // 没有的会入库
        }
        // 属性
        message Attr {
            uint64 attr_id = 1;
            string value   = 2;
        }
        uint64          process_id          = 1 [ (validate.rules).uint64 = {gt : 0} ];
        uint64          process_template_id = 2 [ (validate.rules).uint64 = {gt : 0} ];
        repeated Attr   attrs               = 3;
        repeated Input  inputs              = 4 [ (validate.rules).repeated.min_items = 1 ];
        repeated Output outputs             = 5 [ (validate.rules).repeated.min_items = 1 ]; // 最后一道工序的产出加入主产品

        Type   type = 10; // 工序类型
        uint32 rank = 11; // 排序字段
    }

    // @inject_tag: gorm:"PRIMARY_KEY;AUTO_INCREMENT:false"
    uint64 bom_id      = 1;
    uint32 status      = 2; // &(1<<8)为1代表存在组合工序，&(1<<9)为1代表默认bom
    uint64 revision    = 3; // 版本号，后端维护
    uint64 create_time = 6;
    uint64 update_time = 7;
    uint64 delete_time = 8; // 可以通过delete_time判断是否删除

    uint64 group_id   = 10;
    uint64 station_id = 11;
    uint64 sku_id     = 12 [ (validate.rules).uint64 = {gt : 0} ];
    uint64 unit_id    = 13; // 生成bom值为0，包装bom值为ssu的unit_id

    string  name            = 20 [ (validate.rules).string = {min_len : 1, max_len : 30} ];
    string  desc            = 21;                                              // 描述
    BomType type            = 22 [ (validate.rules).message = {required: true} ]; // bom类型
    string  customized_code = 23 [ (validate.rules).string = {min_len : 1} ];  // bom编码

    uint64 base_unit_id = 32 [ (validate.rules).uint64 = {gt : 0} ]; // 基线单位ID(包装bom是ssu的unit_id)
    // @inject_tag: gorm:"type:Decimal(18,8)"
    string quantity = 31 [ (validate.rules).string = {pattern : "^\\d+\\.?\\d*$"} ]; // 生产基线数量

    message Processes {
        repeated Process processes         = 1 [ (validate.rules).repeated.min_items = 1 ];
        uint64           latest_process_id = 2 [ (validate.rules).uint64 = {gt : 0} ];
    }
    Processes processes = 40; // 工序信息

    message UserIDs {
        repeated uint64 customer_ids = 1;
    }

    UserIDs customer_ids = 41; // 绑定的用户ID列表
}

// bom快照ID
message BomSnapshotId {
    uint64 bom_id   = 1 [ (validate.rules).uint64 = {gt : 0} ];
    uint64 revision = 2 [ (validate.rules).uint64 = {gt : 0} ];
}

message BomSnapMap {
    map<uint64, Bom> boms = 1 [ (validate.rules).map.keys.uint64.gt = 0 ];
}

// 原料信息
// 原料信息单独一张表，因为需要独立检索
message BomMaterial {
    // @inject_tag: gorm:"PRIMARY_KEY"
    uint64 bom_material_id = 1;
    uint64 create_time     = 6;
    uint64 update_time     = 7;
    uint64 delete_time     = 8;

    uint64 group_id   = 10;
    uint64 station_id = 11;

    uint64  bom_id   = 20 [ (validate.rules).uint64 = {gt : 0} ];
    uint64  sku_id   = 21 [ (validate.rules).uint64 = {gt : 0} ]; // 原料ID
    BomType bom_type = 22;                                        // bom类型，方便查找
}

// 加工任务
message Task {
    option (dao.partition_count) = 100;
    option (dao.model_type)      = TYPE_PRODUCTION_TASK;

    enum State {
        STATE_UNSPECIFIED = 0;
        STATE_PREPARE     = 1; // 未下达
        STATE_STARTED     = 2; // 进行中
        STATE_FINISHED    = 3; // 已完成
    }
    enum Type {
        TYPE_UNSPECIFIED = 0;
        TYPE_PRODUCE     = 1; // 生产任务
        TYPE_PACK        = 2; // 包装任务
    }
    enum Source {
        SOURCE_UNSPECIFIED = 0;
        SOURCE_ORDER       = 1; // 订单生成任务
        SOURCE_PLAN        = 2; // 手动新建
        SOURCE_PACK_TASK   = 3; // 包装同步生成的生产计划
    }
    enum Operation {
        OPERATION_UNSPECIFIED          = 0;
        OPERATION_RELEASE              = 1; // 下达任务
        OPERATION_FINISH               = 2; // 完工任务
        OPERATION_MERGE                = 3; // 合并任务
        OPERATION_DELETE               = 4; // 删除任务
        OPERATION_MODIFY_PLAN_AMOUNT   = 5; // 修改计划数
        OPERATION_MODIFY_OUTPUT_AMOUNT = 6; // 修改产出数
        OPERATION_FINISH_AND_OUTPUT    = 7; // 完工并标记产出
    }
    enum TimeType {
        TIME_TYPE_UNSPECIFIED = 0;
        TIME_TYPE_CREATE      = 1; // 创建时间
        TIME_TYPE_DELIVERY    = 2; // 计划交期
        TIME_TYPE_RELEASE     = 3; // 下达时间
    }
    enum OutputSource {
        OUTPUT_SOURCE_UNSPECIFIED  = 0;
        OUTPUT_SOURCE_TYPE_IN      = 1; // 录入产出
        OUTPUT_SOURCE_LAST_PROCESS = 2; // 最后一道工序
    }

    // @inject_tag: gorm:"PRIMARY_KEY;AUTO_INCREMENT:false"
    uint64 task_id     = 1;
    uint64 create_time = 6;
    uint64 update_time = 7;
    uint64 delete_time = 8;

    uint64 group_id   = 10;
    uint64 station_id = 11;

    uint64 sku_id             = 20 [ (validate.rules).uint64 = {gt : 0} ]; // 成品ID
    string sku_name           = 21;                                        // 成品名
    uint64 unit_id            = 22 [ (validate.rules).uint64 = {gt : 0} ]; // 单位ID
    string sku_customize_code = 23;                                        // 商品自定义编码

    uint64 bom_id        = 30;
    string bom_name      = 31;
    uint64 bom_revision  = 32; // bom版本
    string serial_no     = 33; // 任务编号
    string batch         = 34; // 波次信息
    uint64 delivery_time = 35; // 计划交期
    uint64 release_time  = 36; // 下达时间
    uint64 finish_time   = 37; // 完成时间
    State  state         = 38; // 计划状态（未下达，进行中，已完成）
    Type   type          = 39; // 计划类型（1：生产任务；2：包装任务）
    // @inject_tag: gorm:"type:Decimal(18,8)"
    string order_amount = 40 [ (validate.rules).string = {pattern : "^\\d+\\.?\\d*$"} ]; // 需求数
    // @inject_tag: gorm:"type:Decimal(18,8)"
    string plan_amount = 41 [ (validate.rules).string = {pattern : "^\\d*\\.?\\d*$"} ]; // 计划数
    // @inject_tag: gorm:"type:Decimal(18,8)"
    string output_amount = 42 [ (validate.rules).string = {pattern : "^\\d*\\.?\\d*$"} ]; // 产出数
    uint64 base_unit_id  = 43;                                                            // 基本单位(包装bom里记录sku的基本单位)
    // @inject_tag: gorm:"type:Decimal(18,8)"
    string  base_unit_output_amount = 44 [ (validate.rules).string = {pattern : "^\\d*\\.?\\d*$"} ]; // 基本单位产出数
    Source  source                  = 45;                                                            // 来源（订单、预加工单）
    message ByProduct {
        uint64 sku_id        = 1;
        string sku_name      = 2;
        uint64 unit_id       = 3;
        string plan_amount   = 4 [ (validate.rules).string = {pattern : "^\\d*\\.?\\d*$"} ];
        string output_amount = 5 [ (validate.rules).string = {pattern : "^\\d*\\.?\\d*$"} ]; // 产出数/周转物使用数
    }
    message ByProducts {
        repeated ByProduct by_products = 1;
    }
    ByProducts by_products        = 46;
    uint64     target_customer_id = 47; // 任务对象
    uint64     last_process_id    = 48; // 最后一道工序的ID，最后一道工序的产出就是成品
    // @inject_tag: gorm:"type:Decimal(18,8);DEFAULT:0"
    string input_receive_total_price = 49; // 领料总金额
    // @inject_tag: gorm:"type:Decimal(18,8);DEFAULT:0"
    string input_return_total_price = 50; // 退料总金额
    // @inject_tag: gorm:"type:Decimal(18,8);DEFAULT:0"
    string input_actual_usage_total_price = 51; // 实际用料总金额
}

// 任务原料信息
message TaskInput {
    option (dao.partition_count) = 100;
    option (dao.model_type)      = TYPE_PRODUCTION_TASKINPUT;

    // 原料去向
    enum Towards {
        TOWARDS_UNSPECIFIED = 0;
        TOWARDS_PRODUCTION  = 1; // 生产
        TOWARDS_PURCHASE    = 2; // 采购
    }
    // @inject_tag: gorm:"PRIMARY_KEY"
    uint64 task_input_id = 1;
    uint64 create_time   = 6;
    uint64 update_time   = 7;
    uint64 delete_time   = 8;

    uint64 group_id   = 10;
    uint64 station_id = 11;
    // @inject_tag: gorm:"INDEX:task_id"
    uint64 task_id = 12;

    uint64 sku_id   = 20; // 原料ID
    string sku_name = 21;
    uint64 unit_id  = 22;

    // @inject_tag: gorm:"type:Decimal(18,8)"
    string plan_usage_amount = 30 [ (validate.rules).string = {pattern : "^\\d*\\.?\\d*$"} ]; // 计划用料数
    // @inject_tag: gorm:"type:Decimal(18,8);DEFAULT:0"
    string actual_usage_amount = 31 [ (validate.rules).string = {pattern : "^\\d*\\.?\\d*$"} ]; // 实际用料数
    // @inject_tag: gorm:"type:Decimal(18,8);DEFAULT:0"
    string receive_amount = 32 [ (validate.rules).string = {pattern : "^\\d*\\.?\\d*$"} ]; // 领料数
    // @inject_tag: gorm:"type:Decimal(18,8);DEFAULT:0"
    string  return_amount = 33 [ (validate.rules).string = {pattern : "^\\d*\\.?\\d*$"} ]; // 退料数
    Towards towards       = 34;
    // @inject_tag: gorm:"type:Decimal(18,8);DEFAULT:0"
    string receive_total_price = 35; // 收货总金额
    // @inject_tag: gorm:"type:Decimal(18,8);DEFAULT:0"
    string return_total_price = 36; // 退货总金额
    // @inject_tag: gorm:"type:Decimal(18,8);DEFAULT:0"
    string actual_usage_total_price = 37; // 实际用料总金额

    message InputLog {
        uint64 sku_id    = 1;
        uint64 unit_id   = 2;
        uint64 task_id   = 3;
        string quantity  = 4;
        string price     = 5;
        uint64 sheet_id  = 6;
        uint64 detail_id = 7;
    }

    message InputLogs {
        repeated InputLog receive_logs = 3; // 领料记录
        repeated InputLog return_logs  = 4; // 退料记录
    }
    InputLogs input_logs = 40; // 记录每个单据的实际领料数
}

// 产出记录
message TaskOutput {
    enum State {
        STATE_UNSPECIFIED   = 0;
        STATE_NOT_SUBMITTED = 1; // 未提交
        STATE_SUBMITTED     = 2; // 已提交
    }
    // @inject_tag: gorm:"PRIMARY_KEY"
    uint64 task_output_id = 1;
    uint64 create_time    = 6;
    uint64 update_time    = 7;
    uint64 delete_time    = 8;

    uint64 group_id   = 10;
    uint64 station_id = 11;

    uint64     sku_id   = 20 [ (validate.rules).uint64 = {gt : 0} ]; // 成品ID
    string     sku_name = 21;                                        // 成品名
    OutputType type     = 22;
    State      state    = 23;
    // @inject_tag: gorm:"DEFAULT:1"
    Task.OutputSource source = 24; // 产出来源

    uint64 unit_id = 25 [ (validate.rules).uint64 = {gt : 0} ]; // 单位ID
    // @inject_tag: gorm:"type:Decimal(18,8)"
    string output_amount = 26 [ (validate.rules).string = {pattern : "^\\d*\\.?\\d*$"} ];
    uint64 base_unit_id  = 27 [ (validate.rules).uint64 = {gt : 0} ]; // 基本单位(包装bom里记录sku的基本单位)
    // @inject_tag: gorm:"type:Decimal(18,8)"
    string base_unit_output_amount = 28 [ (validate.rules).string = {pattern : "^\\d*\\.?\\d*$"} ]; // 基本单位产出数

    uint64    task_id        = 30;
    string    task_serial_no = 31;
    Task.Type task_type      = 32;
    uint64    delivery_time  = 33; // 计划交期
    uint64    release_time   = 34; // 下达时间
}

// 任务工序
message TaskProcess {
    enum State {
        STATE_UNSPECIFIED = 0;
        STATE_PREPARE     = 1; // 未开工
        STATE_STARTED     = 2; // 已开工
        STATE_FINISHED    = 3; // 已完成
    }
    enum Operation {
        OPERATION_UNSPECIFIED          = 0;
        OPERATION_MODIFY_PROCESSOR     = 1; // 修改工厂模型
        OPERATION_START                = 2; // 开始工序
        OPERATION_FINISH               = 3; // 结束工序
        OPERATION_MODIFY_OUTPUT_AMOUNT = 4; // 修改产出数
        OPERATION_MODIFY_ACTUAL_AMOUNT = 5; // 修改投料数
        OPERATION_FINISH_AND_OUTPUT    = 6; // 产出并完工
    }
    message Material {
        uint64 sku_id                  = 1;
        string sku_name                = 2;
        uint64 unit_id                 = 3;
        string plan_amount             = 5 [ (validate.rules).string = {pattern : "^\\d*\\.?\\d*$"} ]; // 理论数量
        string actual_amount           = 6 [ (validate.rules).string = {pattern : "^\\d*\\.?\\d*$"} ]; // 实际数量
        uint64 base_unit_id            = 7;
        string base_unit_actual_amount = 8; // 基本单位的实际数量，目前包装单位的产出需要
    }
    message Attr {
        uint64 attr_id = 1;
        string name    = 2;
        string value   = 3;
    }
    message Attrs {
        repeated Attr attrs = 1;
    }
    message Inputs {
        repeated Material inputs = 1;
    }
    message Output {
        Material   material = 1;
        OutputType type     = 2;
    }
    message Outputs {
        repeated Output outputs = 1;
    }
    // @inject_tag: gorm:"PRIMARY_KEY"
    uint64 task_process_id = 1;
    uint64 create_time     = 6;
    uint64 update_time     = 7;
    uint64 delete_time     = 8;

    uint64 group_id   = 10;
    uint64 station_id = 11;
    // @inject_tag: gorm:"INDEX:task_id"
    uint64 task_id             = 12;
    uint64 process_template_id = 13; // 工序模板ID

    uint64  process_id    = 20;
    string  process_name  = 21; // 工序名
    Attrs   attrs         = 22;
    Inputs  inputs        = 23; // 工序物料信息
    Outputs outputs       = 24; // 工序产出信息
    State   state         = 25; // 工序状态（未开工、已开工、已完成）
    uint64  processor     = 26; // 关联的工厂模型
    uint64  delivery_time = 27; // 任务交期
    uint64  release_time  = 28; // 下达时间

    Bom.Process.Type bom_process_type = 35; // 工序在bom中的类型(普通工序、组合工序)
    uint32           rank             = 36; // bom中工序的顺序

    uint64 start_time    = 40; // 工序开始时间
    uint64 end_time      = 41; // 工序结束时间
    uint64 operator_id   = 42; // 操作员账号，group_user
    string operator_code = 43; // 操作员编码（工号）
}

// 任务的来源订单
message TaskOrder {
    // @inject_tag: gorm:"PRIMARY_KEY"
    uint64 task_order_id = 1;
    uint64 create_time   = 6;
    uint64 update_time   = 7;
    uint64 delete_time   = 8;

    uint64 group_id   = 10;
    uint64 station_id = 11;
    // @inject_tag: gorm:"INDEX:task_id"
    uint64 task_id = 12;

    uint64 order_id        = 20;
    string order_serial_no = 21;
    uint64 sku_id          = 22;
    uint64 unit_id         = 23;
    uint64 detail_id       = 24;
    uint64 customer_id     = 25;
    string customer_name   = 26;
    // @inject_tag: gorm:"type:Decimal(18,8)"
    string order_amount = 27 [ (validate.rules).string = {pattern : "^\\d*\\.?\\d*$"} ];
    string sku_remark   = 28; // 拉商品备注，方便展示
    // @inject_tag: gorm:"type:Decimal(18,8)"
    string task_order_amount = 29; // 任务数，订单数对应的任务需求数
}

// 包装任务的称重信息
message TaskWeight {
    enum State {
        STATE_UNSPECIFIED   = 0;
        STATE_NOT_SUBMITTED = 1; // 未提交
        STATE_SUBMITTED     = 2; // 已提交
    }
    // @inject_tag: gorm:"PRIMARY_KEY;AUTO_INCREMENT:false"
    uint64 task_weight_id = 1;
    uint64 create_time    = 6;
    uint64 update_time    = 7;
    uint64 delete_time    = 8;

    uint64 group_id        = 10;
    uint64 station_id      = 11;
    uint64 task_id         = 12;
    uint64 sku_id          = 13;
    uint64 unit_id         = 14;
    uint64 task_process_id = 15;

    uint64 base_unit_id = 20; // 称重的单位
    // @inject_tag: gorm:"type:Decimal(18,8)"
    string quantity        = 21 [ (validate.rules).string = {pattern : "^\\d*\\.?\\d*$"} ]; // 称重的数量
    uint64 customer_id     = 22;                                                            // 绑定的商户
    string customer_name   = 23;                                                            // 绑定的商户名
    string customized_code = 24;                                                            // 包装编码
    State  state           = 25;
}

message TaskSheet {
    // 任务单据类型
    enum Type {
        TYPE_UNSPECIFIED = 0;
        TYPE_PRODUCT     = 1; //生产单
        TYPE_MATERIAL    = 2; //领料单
    }
    message Filter {
        repeated uint64 task_ids = 1;
    }
    // @inject_tag: gorm:"PRIMARY_KEY"
    uint64 task_sheet_id = 1;
    uint64 create_time   = 6;
    uint64 update_time   = 7;
    uint64 delete_time   = 8;

    uint64 group_id   = 10;
    uint64 station_id = 11;

    string task_sheet_code = 20; // 任务单据编码
    Type   sheet_type      = 21; // 单据类型
    Filter filter          = 22; // 单据过滤信息
}

message TaskDetail {
    Task                 task           = 1;
    repeated TaskProcess task_processes = 2;
    repeated TaskInput   task_inputs    = 3;
    repeated TaskOrder   task_orders    = 4;
}

// 工序类型相关接口
message CreateProcessTypeRequest {
    ProcessType process_type = 1 [ (validate.rules).message.required = true ];
}

message CreateProcessTypeResponse {
    ProcessType process_type = 1 [ (validate.rules).message.required = true ];
}

message UpdateProcessTypeRequest {
    ProcessType process_type = 1 [ (validate.rules).message.required = true ];
}

message UpdateProcessTypeResponse {
    ProcessType process_type = 1 [ (validate.rules).message.required = true ];
}

message ListProcessTypeRequest {
    repeated uint64 process_type_id = 1;
    string          q               = 2;

    common.PagingParams paging = 10;
}

message ListProcessTypeResponse {
    repeated ProcessType process_types = 1;
    common.PagingResult  paging        = 10;
}

message GetProcessTypeRequest {
    uint64 process_type_id = 1 [ (validate.rules).uint64 = {gt : 0} ];
}

message GetProcessTypeResponse {
    ProcessType process_type = 1 [ (validate.rules).message.required = true ];
}

message DeleteProcessTypeRequest {
    uint64 process_type_id = 1 [ (validate.rules).uint64 = {gt : 0} ];
}

message DeleteProcessTypeResponse {
    ProcessType process_type = 1 [ (validate.rules).message.required = true ];
}

// 工序模板相关接口
message CreateProcessTemplateRequest {
    ProcessTemplate process_template = 1 [ (validate.rules).message.required = true ];
}

message CreateProcessTemplateResponse {
    ProcessTemplate process_template = 1 [ (validate.rules).message.required = true ];
}

message UpdateProcessTemplateRequest {
    ProcessTemplate process_template = 1 [ (validate.rules).message.required = true ];
}

message UpdateProcessTemplateResponse {
    ProcessTemplate process_template = 1 [ (validate.rules).message.required = true ];
}

message ListProcessTemplateRequest {
    repeated uint64 process_template_ids = 1;
    repeated uint64 process_type_ids     = 2;
    string          q                    = 3;
    bool            exclude_process_pack = 4; // 是否排除包装工序

    common.PagingParams paging = 10;
}

message ListProcessTemplateResponse {
    repeated ProcessTemplate process_templates = 1;

    common.PagingResult paging = 10;
}

message GetProcessTemplateRequest {
    uint64 process_template_id = 1;
    bool   process_pack        = 2; // 是否查找包装工序
}

message GetProcessTemplateResponse {
    ProcessTemplate process_template = 1 [ (validate.rules).message.required = true ];
}

message DeleteProcessTemplateRequest {
    uint64 process_template_id = 1 [ (validate.rules).uint64 = {gt : 0} ];
}

message DeleteProcessTemplateResponse {
    ProcessTemplate process_template = 1 [ (validate.rules).message.required = true ];
}

message ExportProcessTemplateRequest {
}

message ExportProcessTemplateResponse {
    uint64 task_id = 1;
}

message ExportProcessTemplateExecuteData {
    repeated ProcessTemplate process_templates = 1;
}

// 工厂模型相关接口
message CreateProcessorRequest {
    Processor processor = 1 [ (validate.rules).message.required = true ];
}

message CreateProcessorResponse {
    Processor processor = 1 [ (validate.rules).message.required = true ];
}

message UpdateProcessorRequest {
    Processor processor = 1 [ (validate.rules).message.required = true ];
}

message UpdateProcessorResponse {
    Processor processor = 1 [ (validate.rules).message.required = true ];
}

message ListProcessorRequest {
    repeated uint64 parent_ids    = 1; // 父级id列表
    repeated uint64 processor_ids = 2; // id列表
    string          q             = 3;

    common.PagingParams paging = 10;
}

message ListProcessorResponse {
    repeated Processor  processors = 1;
    common.PagingResult paging     = 10;
}

message DeleteProcessorRequest {
    uint64 processor_id = 1 [ (validate.rules).uint64 = {gt : 0} ];
}

message DeleteProcessorResponse {
    Processor processor = 1 [ (validate.rules).message.required = true ];
}

message ListProcessTemplateOfProcessorRequest {
    uint64 processor_id = 1; // 工厂模型ID
}

message ListProcessTemplateOfProcessorResponse {
    repeated uint64 process_template_ids = 1;
}

message ListProcessorOfProcessTemplateRequest {
    repeated uint64 process_template_ids = 1; // 工序模板ID
}

message ListProcessorOfProcessTemplateResponse {
    map<uint64, uint64> process_template_processor_ids = 1; // key是process_template_id，value是processor_id
}

message UpdateProcessorProcessTemplateRequest {
    uint64          processor_id         = 1 [ (validate.rules).uint64 = {gt : 0} ];
    repeated uint64 process_template_ids = 2;
}

message UpdateProcessorProcessTemplateResponse {
    repeated uint64 process_template_ids = 1;
}

message CreateBomRequest {
    Bom bom = 1 [ (validate.rules).message.required = true ];
}

message CreateBomResponse {
    Bom bom = 1 [ (validate.rules).message.required = true ];
}

message UpdateBomRequest {
    Bom bom = 1 [ (validate.rules).message.required = true ];
}

message UpdateBomResponse {
    Bom bom = 1 [ (validate.rules).message.required = true ];
}

message ListProduceBomRequest {
    uint64          sku_id  = 1;
    repeated uint64 bom_ids = 2;

    common.PagingParams paging       = 10;
    bool                need_deleted = 11; // 是否需要已删除的数据
}

message ListProduceBomSkuRequest {
    merchandise.ListSkuRequest list_sku_request = 1;
}

message ListProduceBomSkuResponse {
    merchandise.ListSkuResponse list_sku_response = 2;
}

message ListProduceBomResponse {
    repeated Bom boms = 1;

    common.PagingResult paging = 10;
}

message GetManyBomRequest {
    repeated uint64 bom_ids = 1;
}

message GetManyBomResponse {
    map<uint64, Bom> boms = 1;
}

message GetBomRequest {
    uint64 bom_id   = 1 [ (validate.rules).uint64 = {gt : 0} ];
    uint64 revision = 2; // 版本号，需要拉取历史版本时传
}

message GetBomResponse {
    Bom                           bom               = 1 [ (validate.rules).message.required = true ];
    map<uint64, merchandise.Unit> units             = 2; // key是单位ID，value是单位数据
    map<uint64, merchandise.Sku>  skus              = 3; // key是skuID，value是sku数据
    map<uint64, ProcessTemplate>  process_templates = 4; // key是ProcessTemplateID，value是ProcessTemplate数据
}

message ListPackBomRequest {
    repeated merchandise.SsuId ssu_ids = 1;
}
message ListPackBomResponse {
    repeated Bom boms = 1;
}

message GetPackBomRequest {
    uint64 sku_id  = 1 [ (validate.rules).uint64 = {gt : 0} ];
    uint64 unit_id = 2 [ (validate.rules).uint64 = {gt : 0} ];
}

message GetPackBomResponse {
    Bom                          bom  = 1 [ (validate.rules).message.required = true ];
    map<uint64, merchandise.Sku> skus = 2; // key是单位ID，value是sku数据
}

message DeleteBomRequest {
    uint64 bom_id = 1 [ (validate.rules).uint64 = {gt : 0} ];
}

message DeleteBomResponse {
    Bom bom = 1 [ (validate.rules).message.required = true ];
}

message ExportBomRequest {
    BomType bom_type = 1;
}

message ExportBomResponse {
    uint64 task_id = 1;
}

message ImportBomRequest {
    string file_url = 1;
    OpType op_type  = 2 [ (validate.rules).message = {required: true} ];
}

message ImportBomResponse {
    uint64 task_id = 1;
}

message ExportBomExecuteData {
    repeated Bom boms     = 1;
    BomType      bom_type = 2;
}

message CreateBomSnapshotRequest {
    Bom bom = 1;
}

message CreateBomSnapshotResponse {
    Bom bom = 1;
}

message GetBomSnapshotRequest {
    BomSnapshotId bom_snapshot_id = 1 [ (validate.rules).message.required = true ];
}

message GetBomSnapshotResponse {
    Bom bom = 1;
}

message ListBomSnapshotRequest {
    repeated BomSnapshotId bom_snapshot_ids = 1 [ (validate.rules).repeated.min_items = 1 ];
}

message ListBomSnapshotResponse {
    map<uint64, BomSnapMap> bom_snapshots = 1 [ (validate.rules).map.keys.uint64.gt = 0 ];
}

message CreateTaskRequest {
    message PurchaseSku {
        uint64 sku_id  = 1;
        uint64 unit_id = 2;
        string amount  = 3;
    }
    Task                           task           = 1 [ (validate.rules).message.required = true ];
    Bom                            bom            = 2 [ (validate.rules).message.required = true ];
    repeated TaskOrder             task_orders    = 3;
    repeated PurchaseSku           purchase_skus  = 4; // 采购商品
    AsyncTaskCreateParameter.Batch purchase_batch = 5; // 采购批次
}

message CreateTaskResponse {
    TaskDetail task_detail = 1 [ (validate.rules).message.required = true ];
}

message ListTaskRequest {
    Task.TimeType                        time_type            = 1;
    uint64                               begin_time           = 2;
    uint64                               end_time             = 3;
    Task.State                           state                = 4;
    Task.Source                          source               = 5;
    string                               batch_info           = 6;
    merchandise.Sku.NotPackageSubSkuType sku_type             = 7; // 净菜，菜品
    repeated uint64                      processor_ids        = 8; // 生产小组
    repeated uint64                      target_customer_ids  = 9;
    Task.Type                            task_type            = 10;
    string                               q                    = 11;
    repeated uint64                      sku_ids              = 12;
    repeated uint64                      task_ids             = 13;
    repeated uint64                      process_template_ids = 14; // 工序模板ID
    repeated Task.State states                                = 15; // 状态列表
    string              serial_no                             = 16;
    repeated uint64     category_ids                          = 17;
    repeated uint64     spu_ids                               = 18;
    repeated uint64     input_sku_ids                         = 19;

    common.PagingParams paging       = 20;
    bool                need_deleted = 21; // 是否需要已删除的数据
    bool                need_details = 22; // 是否需要详情数据
}

message ListTaskResponse {
    repeated TaskDetail                                 task_details      = 1;
    map<uint64, ProcessTemplate>                        process_templates = 2; // key是工序模板ID，value是工序模板数据
    map<uint64, merchandise.Unit>                       units             = 3; // key是单位ID，value是单位数据
    map<uint64, merchandise.GetManySkuResponse.SkuInfo> skus              = 4; // key是skuID，value是sku数据

    common.PagingResult paging = 10;
}

message GetManyTaskRequest {
    repeated uint64 task_ids = 1;

    bool need_deleted = 20; // 是否需要已删除的数据
    bool need_details = 21; // 是否需要详情数据
}

message GetManyTaskResponse {
    map<uint64, TaskDetail>                             task_details = 1; // key是task_id
    map<uint64, merchandise.GetManySkuResponse.SkuInfo> skus         = 2; // key是skuID，value是sku数据，返回成品和副产品的sku、ssu、分类信息
}

message ListTaskBatchRequest {
    Task.TimeType time_type  = 1;
    uint64        begin_time = 2;
    uint64        end_time   = 3;
    Task.Type     task_type  = 4; // 任务类型
}

message ListTaskBatchResponse {
    repeated string batches = 1;
}

message GetTaskRequest {
    uint64 task_id = 1 [ (validate.rules).uint64 = {gt : 0} ];
}

message GetTaskResponse {
    Task                                                task           = 1 [ (validate.rules).message.required = true ];
    repeated TaskProcess                                task_processes = 2;
    repeated TaskInput                                  task_inputs    = 3;
    repeated TaskOrder                                  task_orders    = 4;
    map<uint64, merchandise.Unit>                       units          = 10; // key是单位ID，value是单位数据
    map<uint64, merchandise.GetManySkuResponse.SkuInfo> skus           = 11; // key是skuID，value是sku数据
}

message ExportTaskRequest {
    ListTaskRequest filter = 1;
}

message ExportTaskResponse {
    uint64 task_id = 1;
}

message ExportTaskExecuteData {
    repeated Task tasks     = 1;
    Task.Type     task_type = 2;
}

message ExportTaskDataRequest {
    Task.Type                     task_type            = 1;
    uint64                        begin_time           = 2;
    uint64                        end_time             = 3;
    merchandise.GetManySkuRequest get_many_sku_request = 4;
}

message ExportTaskDataResponse {
    uint64 task_id = 1;
}

message SyncTaskOrderAmountRequest {
    uint64 group_id     = 1;
    uint64 order_id     = 2;
    uint64 detail_id    = 3;
    string order_amount = 4;
}

message SyncTaskOrderAmountResponse {
}

message GetTaskCategoryTreeRequest {
    Task.TimeType time_type  = 1;
    uint64        begin_time = 2;
    uint64        end_time   = 3;
    Task.Type     task_type  = 4; // 任务类型
}

message GetTaskCategoryTreeResponse {
    repeated merchandise.Category categories = 1;
    repeated merchandise.Spu spus            = 2;
    repeated merchandise.Sku skus            = 3;
}

message UpdateTaskRequest {
    Task.Operation operation = 1 [ (validate.rules).message = {required: true} ];
    Task           task      = 2 [ (validate.rules).message.required = true ];
}

message UpdateTaskResponse {
    Task task = 1 [ (validate.rules).message.required = true ];
}

message DeleteTaskRequest {
    uint64 task_id = 1 [ (validate.rules).uint64 = {gt : 0} ];
}

message DeleteTaskResponse {
    Task task = 1;
}

message BatchUpdateTaskStatusRequest {
    Task.Operation  operation = 1 [ (validate.rules).message = {required: true} ];
    ListTaskRequest filter    = 2 [ (validate.rules).message.required = true ];
}

message BatchUpdateTaskStatusResponse {
}

message UpdateTaskOutputRequest {
    repeated Task tasks     = 1 [ (validate.rules).repeated.min_items = 1 ];
    bool          is_finish = 2;
    Task.Type     task_type = 3 [ (validate.rules).message = {required: true} ]; // 任务类型
}

message UpdateTaskOutputResponse {
    repeated Task tasks = 1;
}

message UpdateTaskInputRequest {
    enum Type {
        TYPE_UNSPECIFIED = 0;
        TYPE_RECEIVE     = 1; //领料
        TYPE_RETURN      = 2; //退料
    }
    repeated TaskInput.InputLog details = 1;
    Type                        type    = 2; // 请求类型
}

message UpdateTaskInputResponse {
}

message ListTaskOutputRequest {
    Task.TimeType    time_type  = 1;
    uint64           begin_time = 2;
    uint64           end_time   = 3;
    Task.Type        task_type  = 4; // 任务类型
    TaskOutput.State state      = 5; // 产出状态
}

message ListTaskOutputResponse {
    repeated TaskOutput task_outputs = 1;

    map<uint64, merchandise.Unit>                       units = 10; // key是单位ID，value是单位数据
    map<uint64, merchandise.GetManySkuResponse.SkuInfo> skus  = 11; // key是skuID，value是sku数据
}

message SubmitTaskOutputRequest {
    repeated uint64 task_output_ids = 1;
}

message SubmitTaskOutputResponse {
}

message SplitTaskProcessRequest {
    message SplitData {
        string plan_amount = 1 [ (validate.rules).string = {pattern : "^\\d*\\.?\\d*$"} ];
        uint64 processor   = 2;
    }
    // uint64             task_process_id = 1 [ (validate.rules).uint64 = {gt : 0} ];
    repeated SplitData split_data = 2 [ (validate.rules).repeated.min_items = 1 ];
    uint64             task_id    = 3 [ (validate.rules).uint64 = {gt : 0} ];
    uint64             process_id = 4 [ (validate.rules).uint64 = {gt : 0} ];
}

message SplitTaskProcessResponse {
    repeated TaskProcess task_processes = 1 [ (validate.rules).repeated.min_items = 1 ];
}

message UpdateTaskProcessRequest {
    TaskProcess.Operation operation     = 1 [ (validate.rules).message = {required: true} ];
    TaskProcess           task_process  = 2 [ (validate.rules).message.required = true ];
    string                operator_code = 3; // 操作员编码
}

message UpdateTaskProcessResponse {
    TaskProcess task_process = 1 [ (validate.rules).message.required = true ];
}
message GetTaskProcessRequest {
    uint64 task_process_id = 1 [ (validate.rules).uint64 = {gt : 0} ];
}
message GetTaskProcessResponse {
    TaskProcess                                         task_process = 1;
    Task                                                task         = 2;
    repeated TaskWeight                                 task_weights = 3;
    map<uint64, merchandise.GetManySkuResponse.SkuInfo> skus         = 10; // key是skuID，value是sku数据
}

message GetTaskWeightRequest {
    uint64 task_weight_id  = 1;
    string customized_code = 2;
}
message GetTaskWeightResponse {
    TaskWeight  task_weight  = 1;
    TaskProcess task_process = 2;
    Task        task         = 3;

    map<uint64, merchandise.GetManySkuResponse.SkuInfo> skus      = 10; // key是skuID，value是sku数据
    map<uint64, enterprise.Customer>                    customers = 11; // key是customer_id
}

message CreateTaskWeightRequest {
    TaskWeight task_weight = 1 [ (validate.rules).message.required = true ];
}

message CreateTaskWeightResponse {
    TaskWeight task_weight = 1 [ (validate.rules).message.required = true ];
}

message DeleteTaskWeightRequest {
    uint64 task_weight_id = 1 [ (validate.rules).uint64 = {gt : 0} ];
}

message DeleteTaskWeightResponse {
    TaskWeight task_weight = 1 [ (validate.rules).message.required = true ];
}

message ListTaskWeightRequest {
    uint64 task_id         = 1 [ (validate.rules).uint64 = {gt : 0} ];
    uint64 task_process_id = 2 [ (validate.rules).uint64 = {gt : 0} ];
}

message ListTaskWeightResponse {
    repeated TaskWeight task_weights = 1;
}

message BatchCreateTaskWeightRequest {
    uint64 task_id         = 1 [ (validate.rules).uint64 = {gt : 0} ];
    uint64 task_process_id = 2 [ (validate.rules).uint64 = {gt : 0} ];
    uint64 base_unit_id    = 4 [ (validate.rules).uint64 = {gt : 0} ];                     // 称重的单位
    string quantity        = 5 [ (validate.rules).string = {pattern : "^\\d*\\.?\\d*$"} ]; // 称重的数量
    uint64 customer_id     = 6;                                                            // 绑定的商户
    string customer_name   = 7;                                                            // 绑定的商户名
    uint32 count           = 8 [ (validate.rules).uint32 = {gt : 0} ];                     // 创建的个数
}

message BatchCreateTaskWeightResponse {
    repeated TaskWeight task_weights = 1;
}

message SubmitTaskWeightRequest {
    uint64 task_id         = 1 [ (validate.rules).uint64 = {gt : 0} ];
    uint64 task_process_id = 2 [ (validate.rules).uint64 = {gt : 0} ];
}

message SubmitTaskWeightResponse {
    repeated TaskWeight task_weights = 1;
}

message CreateTaskPrintSheetCodeRequest {
    TaskSheet.Type  sheet_type    = 1; // 单据类型
    repeated uint64 task_ids      = 2; // 任务ID
    repeated uint64 process_ids   = 3; // 工序ID
    repeated uint64 processor_ids = 4; // 工厂模型ID
}

message CreateTaskPrintSheetCodeResponse {
    string code = 1;
}
message GetTaskProductSheetRequest {
    string code = 1;
}
message GetTaskProductSheetResponse {
    repeated Task                                       tasks = 1;
    map<uint64, merchandise.GetManySkuResponse.SkuInfo> skus  = 2; // key是skuID，value是sku数据
}
message GetTaskMaterialSheetRequest {
    string code = 1;
}
message GetTaskMaterialSheetResponse {
    repeated TaskInput                                  task_inputs  = 1;
    map<uint64, TaskDetail>                             task_details = 2; // key是task_id
    map<uint64, merchandise.GetManySkuResponse.SkuInfo> skus         = 3; // key是skuID，value是sku数据
}

message AsyncTaskCreateParameter {
    enum Source {
        SOURCE_UNSPECIFIED     = 0;
        SOURCE_PLAN_PACK       = 1; // 预包装
        SOURCE_PLAN_PRODUCTION = 2; // 预生产
        SOURCE_ORDER_DISPATCH  = 3; // 订单发布
    }
    message Batch {
        uint64 delivery_time = 1;
        string name          = 2;
    }
    message ProductDetail {
        uint64 sku_id             = 1;
        uint64 unit_id            = 2;
        uint64 bom_id             = 3;
        uint64 bom_revision       = 4;
        uint64 source_customer_id = 5; // 任务的来源对象，用来找到生产对象

        string order_amount       = 10 [ (validate.rules).string = {pattern : "^\\d*\\.?\\d*$"} ];
        uint64 order_id           = 11;
        string order_serial_no    = 12;
        uint64 order_receive_time = 13;

        uint64 customer_id   = 20;
        string customer_name = 21;

        uint64 detail_id  = 25;
        string sku_remark = 26; // 拉商品备注，方便展示
    }
    uint64 group_id               = 1;
    uint64 station_id             = 2;
    Source source                 = 3; // 任务来源
    bool   pack_by_customer       = 4; // 按客户包装
    bool   production_by_customer = 5; // 按客户生产

    Batch pack_batch     = 10; // 包装批次
    Batch product_batch  = 11; // 生产批次
    Batch purchase_batch = 12; // 采购批次

    repeated ProductDetail product_details = 20;
}

message AsyncTaskExecuteData {
    repeated CreateTaskRequest create_task_data = 1;
}

message AsyncPurchaseTaskExecuteData {
    message PurchaseSku {
        uint64 sku_id  = 1;
        uint64 unit_id = 2;
        string amount  = 3;
    }
    repeated PurchaseSku purchase_skus = 1;
}

message CreatePlanTaskRequest {
    message ProductDetail {
        uint64 sku_id       = 1 [ (validate.rules).uint64 = {gt : 0} ];
        uint64 unit_id      = 2 [ (validate.rules).uint64 = {gt : 0} ];
        string order_amount = 3 [ (validate.rules).string = {min_len : 1, pattern : "^\\d*\\.?\\d*$"} ];
    }
    uint64                 delivery_time      = 1 [ (validate.rules).uint64 = {gt : 0} ]; // 计划交期
    string                 batch              = 2;                                        // 生产波次
    uint64                 target_customer_id = 3;                                        // 生产对象
    Task.Type              task_type          = 4;
    repeated ProductDetail product_details    = 5;
}

message CreatePlanTaskResponse {
    uint64 task_id = 1;
}

message CreateOrderTaskRequest {
    order.ListOrderRequest filter = 1;
    bool                   all    = 4; //是否全部
}

message CreateOrderTaskResponse {
    uint64 async_task_id = 1;
}

message ListTaskProductSheetByTaskRequest {
    ListTaskRequest list_task_request = 1;
}

message ListTaskProductSheetByTaskResponse {
    message Sheet {
        string               code           = 1;
        Task                 task           = 2;
        repeated TaskProcess task_processes = 3;
        repeated TaskOrder   task_orders    = 4;
    }
    repeated Sheet                                      sheets            = 1;
    map<uint64, ProcessTemplate>                        process_templates = 2; // key是工序模板ID，value是工序模板数据
    map<uint64, merchandise.Unit>                       units             = 3; // key是单位ID，value是单位数据
    map<uint64, merchandise.GetManySkuResponse.SkuInfo> skus              = 4; // key是skuID，value是sku数据
}

message ListTaskProductSheetByProcessRequest {
    ListTaskRequest list_task_request = 1;
}

message ListTaskProductSheetByProcessResponse {
    message Sheet {
        string               code                = 1;
        uint64               process_template_id = 2;
        repeated TaskProcess task_processes      = 3;
    }
    repeated Sheet                                      sheets            = 1;
    map<uint64, TaskDetail>                             task_details      = 2; // key是task_id
    map<uint64, ProcessTemplate>                        process_templates = 3; // key是工序模板ID，value是工序模板数据
    map<uint64, merchandise.Unit>                       units             = 4; // key是单位ID，value是单位数据
    map<uint64, merchandise.GetManySkuResponse.SkuInfo> skus              = 5; // key是skuID，value是sku数据
    map<uint64, BomSnapMap>                             boms              = 6; // key是bomId
}

message ListTaskProductSheetByProcessorRequest {
    ListTaskRequest list_task_request = 1;
    int32           level             = 2 [ (validate.rules).message = {required: true} ]; // 层级1小组，2车间
}

message ListTaskProductSheetByProcessorResponse {
    message Sheet {
        string               code           = 1;
        uint64               processor_id   = 2;
        repeated TaskProcess task_processes = 3;
    }
    repeated Sheet                                      sheets            = 1;
    map<uint64, TaskDetail>                             task_details      = 2; // key是task_id
    map<uint64, ProcessTemplate>                        process_templates = 3; // key是工序模板ID，value是工序模板数据
    map<uint64, merchandise.Unit>                       units             = 4; // key是单位ID，value是单位数据
    map<uint64, Processor>                              processors        = 5; // key是工厂模型ID
    map<uint64, merchandise.GetManySkuResponse.SkuInfo> skus              = 6; // key是skuID，value是sku数据
    map<uint64, BomSnapMap>                             boms              = 7; // key是bomId
}

message ListTaskMaterialSheetByTaskRequest {
    ListTaskRequest list_task_request = 1;
}

message ListTaskMaterialSheetByTaskResponse {
    message Sheet {
        string             code        = 1;
        repeated TaskInput task_inputs = 2;
    }
    Sheet                                               sheet        = 1;
    map<uint64, TaskDetail>                             task_details = 2; // key是task_id
    map<uint64, merchandise.Unit>                       units        = 3; // key是单位ID，value是单位数据
    map<uint64, merchandise.GetManySkuResponse.SkuInfo> skus         = 4; // key是skuID，value是sku数据
}

message ListTaskMaterialSheetByProcessorRequest {
    ListTaskRequest list_task_request = 1;
    int32           level             = 2 [ (validate.rules).message = {required: true} ]; // 层级1小组，2车间
}

message ListTaskMaterialSheetByProcessorResponse {
    message Sheet {
        string               code           = 1;
        uint64               processor_id   = 2;
        repeated TaskProcess task_processes = 3;
    }
    repeated Sheet                                      sheets            = 1;
    map<uint64, TaskDetail>                             task_details      = 2; // key是task_id
    map<uint64, ProcessTemplate>                        process_templates = 3; // key是工序模板ID，value是工序模板数据
    map<uint64, merchandise.Unit>                       units             = 4; // key是单位ID，value是单位数据
    map<uint64, Processor>                              processors        = 5; // key是工厂模型ID
    map<uint64, merchandise.GetManySkuResponse.SkuInfo> skus              = 6; // key是skuID，value是sku数据
}

message SysSyncTaskRequest {
    common.SyncOptions sync_options = 1;
}

message SysSyncTaskResponse {
    repeated Task tasks    = 1;
    bool          has_more = 2;
}

message SysSyncTaskInputRequest {
    common.SyncOptions sync_options = 1;
}

message SysSyncTaskInputResponse {
    repeated TaskInput task_inputs = 1;
    bool               has_more    = 2;
    map<uint64, Task>  tasks       = 3; // key是task_id
}

// 导入bom的参数
message ImportBomTaskParameter {
    message BomMaterialRow {
        int64  row_no                   = 1;  // 行号
        string bom_name                 = 2;  // bom名称
        string bom_customized_code      = 3;  // bom编码
        string sku_customize_code       = 4;  // 成品编码
        string quantity                 = 5;  // 成品基准数
        string base_unit                = 6;  // 成品基准单位
        string material_customized_code = 7;  // 物料编码
        string material_quantity        = 8;  // 物料数
        string material_unit            = 9;  // 物料数
        string material_process         = 10; // 物料工序 [工序名][参数名]:参数值
        string bom_process              = 11; // 组合工序 [工序名][参数名]:参数值
    }
    OpType                  op_type = 1 [ (validate.rules).message = {required: true} ];
    repeated BomMaterialRow rows    = 2;
}

message ImportBomExecuteData {
    message Attr {
        string attr_name  = 1; // 属性名
        string attr_value = 2; // 属性值
    }
    message Process {
        string        name  = 1; // 工序名
        repeated Attr attrs = 2;
    }
    message Material {
        string           customize_code = 1;
        string           unit           = 2;
        string           quantity       = 3;
        repeated Process processes      = 4; // 工序信息
    }
    message Bom {
        string            bom_name            = 1; // bom名称
        string            bom_customized_code = 2; // bom编码
        string            sku_customize_code  = 3; // 成品编码
        string            quantity            = 4; // 成品基准数
        string            base_unit           = 5; // 成品基准单位
        repeated Material materials           = 6; // 物料信息
        repeated Process  processes           = 7; // 组合工序
    }
    message FailDesc {
        uint32 index = 1; // 对应boms的索引
        string desc  = 2; // 失败信息描述
    }
    OpType            op_type   = 1 [ (validate.rules).message = {required: true} ];
    repeated Bom      boms      = 2;
    repeated FailDesc fail_desc = 3; // 失败描述信息
}
