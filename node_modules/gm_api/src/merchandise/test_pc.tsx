import React, { FC, ReactNode } from 'react'
import { MoreSelect, MoreSelectProps } from '@gm-pc/react'
import { useAsync } from '@gm-common/hooks/src/index'
import _ from 'lodash'
import { Quotation } from './types'
import { ListQuotation } from './methods'
import { PagingMax } from '../index'

interface MoreSelectListItem<D> {
  value: string
  text: string
  original: D
}

interface MoreSelectListProps<D>
  extends Omit<MoreSelectProps, 'data' | 'renderSelected' | 'renderListItem'> {
  params?: object
  getName?(item: D, index: number): string
  /** 改下下 */
  renderSelected?(item: MoreSelectListItem<D>, index: number): ReactNode
  /** 改下下 */
  renderListItem?(item: MoreSelectListItem<D>, index: number): ReactNode
}

interface MoreSelectListInnerProps<D> extends MoreSelectListProps<D> {
  name: string
  fetchList(params: object): any
}

function MoreSelectList<D>({
  name,
  fetchList,
  params,
  getName = (item: D) => item.name || '',
  ...rest
}: MoreSelectListInnerProps<D>) {
  const { data } = useAsync<any, MoreSelectListItem<D>[]>(
    async () => {
      const res = await fetchList({
        ...params,
        paging: PagingMax,
      })

      const snake = _.snakeCase(name)

      return _.map(res.response[`${snake}s`], (item: D, i) => {
        return {
          // @ts-ignore
          value: item[`${snake}_id`],
          // @ts-ignore
          text: getName(item, i) || '',
          original: item,
        }
      })
    },
    {
      manual: false,
      cacheKey: `List${name}`,
    },
  )

  return <MoreSelect {...rest} data={data || []} />
}

export const MoreSelect_Quotation: FC<MoreSelectListProps<
  Quotation
>> = props => {
  return (
    <MoreSelectList {...props} name='Quotation' fetchList={ListQuotation} />
  )
}
