syntax = "proto3";

package ceres.merchandise;
option  java_multiple_files = true;
option  go_package          = "code.guanmai.cn/back_end/ceres/merchandise/proto;proto";

import "./google/api/annotations.proto";
import "./common/proto/common.proto";
import "./include/protoc-gen-validate/validate.proto";
import "./include/protoc-gen-setter/setter.proto";
import "./cmd/protoc-gen-dao/proto/dao.proto";
import "./asynctask/proto/asynctask.proto";

// 空参数 google.protobuf.Empty
//所有float类型待定
service MerchandiseService {
    rpc SetCustomerQuotationRelation(SetCustomerQuotationRelationRequest) returns (SetCustomerQuotationRelationResponse) {
        option (google.api.http) = {
            post : "/ceres/merchandise/MerchandiseService/SetCustomerQuotationRelation"
        };
    };

    rpc GetCustomerIdsByQuotationId(GetCustomerIdsByQuotationIdRequest) returns (GetCustomerIdsByQuotationIdResponse) {
        option (google.api.http) = {
            post : "/ceres/merchandise/MerchandiseService/GetCustomerIdsByQuotationId"
        };
    };

    rpc GetQuotationByCustomerId(GetQuotationByCustomerIdRequest) returns (GetQuotationByCustomerIdResponse) {
        option (google.api.http) = {
            post : "/ceres/merchandise/MerchandiseService/GetQuotationByCustomerId"
        };
    };

    rpc GetQuotationIdsByCustomerIds(GetQuotationIdsByCustomerIdsRequest) returns (GetQuotationIdsByCustomerIdsResponse) {
        option (google.api.http) = {
            post : "/ceres/merchandise/MerchandiseService/GetQuotationIdsByCustomerIds"
        };
    };

    rpc GetCustomerQuotationRelation(GetCustomerQuotationRelationRequest) returns (GetCustomerQuotationRelationResponse) {
        option (google.api.http) = {
            post : "/ceres/merchandise/MerchandiseService/GetCustomerQuotationRelation"
        };
    }

    rpc DeleteCustomerQuotationRelation(DeleteCustomerQuotationRelationRequest) returns (DeleteCustomerQuotationRelationResponse) {
        option (google.api.http) = {
            post : "/ceres/merchandise/MerchandiseService/DeleteCustomerQuotationRelation"
        };
    }

    // create update
    rpc GetCategory(GetCategoryRequest) returns (GetCategoryResponse) {
        option (google.api.http) = {
            post : "/ceres/merchandise/MerchandiseService/GetCategory"
        };
    };
    rpc CreateCategory(CreateCategoryRequest) returns (CreateCategoryResponse) {
        option (google.api.http) = {
            post : "/ceres/merchandise/MerchandiseService/CreateCategory"
        };
    };
    rpc UpdateCategory(UpdateCategoryRequest) returns (UpdateCategoryResponse) {
        option (google.api.http) = {
            post : "/ceres/merchandise/MerchandiseService/UpdateCategory"
        };
    };
    rpc DeleteCategory(DeleteCategoryRequest) returns (DeleteCategoryResponse) {
        option (google.api.http) = {
            post : "/ceres/merchandise/MerchandiseService/DeleteCategory"
        };
    };

    rpc ListCategory(ListCategoryRequest) returns (ListCategoryResponse) {
        option (google.api.http) = {
            post : "/ceres/merchandise/MerchandiseService/ListCategory"
        };
    };
    // 批量创建商品库
    // rpc BulkCreateCategory(BulkCreateCategoryRequest) returns (BulkCreateCategoryResponse) {};

    rpc GetSpu(GetSpuRequest) returns (GetSpuResponse) {
        option (google.api.http) = {
            post : "/ceres/merchandise/MerchandiseService/GetSpu"
        };
    };

    rpc GetManySpu(GetManySpuRequest) returns (GetManySpuResponse) {
        option (google.api.http) = {
            post : "/ceres/merchandise/MerchandiseService/GetManySpu"
        };
    };

    rpc CreateSpu(CreateSpuRequest) returns (CreateSpuResponse) {
        option (google.api.http) = {
            post : "/ceres/merchandise/MerchandiseService/CreateSpu"
        };
    };
    rpc UpdateSpu(UpdateSpuRequest) returns (UpdateSpuResponse) {
        option (google.api.http) = {
            post : "/ceres/merchandise/MerchandiseService/UpdateSpu"
        };
    };
    rpc DeleteSpu(DeleteSpuRequest) returns (DeleteSpuResponse) {
        option (google.api.http) = {
            post : "/ceres/merchandise/MerchandiseService/DeleteSpu"
        };
    };
    rpc ListSpu(ListSpuRequest) returns (ListSpuResponse) {
        option (google.api.http) = {
            post : "/ceres/merchandise/MerchandiseService/ListSpu"
        };
    };

    rpc GetCategoryTree(GetCategoryTreeRequest) returns (GetCategoryTreeResponse) {
        option (google.api.http) = {
            post : "/ceres/merchandise/MerchandiseService/GetCategoryTree"
        };
    };

    rpc ChangeMerchandiseRank(ChangeMerchandiseRankRequest) returns (ChangeMerchandiseRankResponse) {
        option (google.api.http) = {
            post : "/ceres/merchandise/MerchandiseService/ChangeMerchandiseRank"
        };
    };

    rpc GetManyCategory(GetManyCategoryRequest) returns (GetManyCategoryResponse) {
        option (google.api.http) = {
            post : "/ceres/merchandise/MerchandiseService/GetManyCategory"
        };
    };

    rpc GetSku(GetSkuRequest) returns (GetSkuResponse) {
        option (google.api.http) = {
            post : "/ceres/merchandise/MerchandiseService/GetSku"
        };
    };
    rpc CreateSku(CreateSkuRequest) returns (CreateSkuResponse) {
        option (google.api.http) = {
            post : "/ceres/merchandise/MerchandiseService/CreateSku"
        };
    };
    rpc UpdateSku(UpdateSkuRequest) returns (UpdateSkuResponse) {
        option (google.api.http) = {
            post : "/ceres/merchandise/MerchandiseService/UpdateSku"
        };
    };
    rpc DeleteSku(DeleteSkuRequest) returns (DeleteSkuResponse) {
        option (google.api.http) = {
            post : "/ceres/merchandise/MerchandiseService/DeleteSku"
        };
    };
    rpc ListSku(ListSkuRequest) returns (ListSkuResponse) {
        option (google.api.http) = {
            post : "/ceres/merchandise/MerchandiseService/ListSku"
        };
    };
    rpc ExportSku(ExportSkuRequest) returns (ExportSkuResponse) {
        option (google.api.http) = {
            post : "/ceres/merchandise/MerchandiseService/ExportSku"
        };
    };

    rpc ExportSsu(ExportSsuRequest) returns (ExportSsuResponse) {
        option (google.api.http) = {
            post : "/ceres/merchandise/MerchandiseService/ExportSsu"
        };
    };

    rpc GetManySku(GetManySkuRequest) returns (GetManySkuResponse) {
        option (google.api.http) = {
            post : "/ceres/merchandise/MerchandiseService/GetManySku"
        };
    };

    rpc GetSkuSnap(GetSkuSnapRequest) returns (GetSkuSnapResponse) {
        option (google.api.http) = {
            post : "/ceres/merchandise/MerchandiseService/GetSkuSnap"
        };
    };

    rpc GetManySkuSnap(GetManySkuSnapRequest) returns (GetManySkuSnapResponse) {
        option (google.api.http) = {
            post : "/ceres/merchandise/MerchandiseService/GetManySkuSnap"
        };
    };

    rpc GetSsuSnap(GetSsuSnapRequest) returns (GetSsuSnapResponse) {
        option (google.api.http) = {
            post : "/ceres/merchandise/MerchandiseService/GetSsuSnap"
        };
    };

    rpc GetManySsuSnap(GetManySsuSnapRequest) returns (GetManySsuSnapResponse) {
        option (google.api.http) = {
            post : "/ceres/merchandise/MerchandiseService/GetManySsuSnap"
        };
    };

    rpc GetSsu(GetSsuRequest) returns (GetSsuResponse) {
        option (google.api.http) = {
            post : "/ceres/merchandise/MerchandiseService/GetSsu"
        };
    };
    rpc UpdateSsu(UpdateSsuRequest) returns (UpdateSsuResponse) {
        option (google.api.http) = {
            post : "/ceres/merchandise/MerchandiseService/UpdateSsu"
        };
    };
    rpc CreateSsu(CreateSsuRequest) returns (CreateSsuResponse) {
        option (google.api.http) = {
            post : "/ceres/merchandise/MerchandiseService/CreateSsu"
        };
    };
    rpc DeleteSsu(DeleteSsuRequest) returns (DeleteSsuResponse) {
        option (google.api.http) = {
            post : "/ceres/merchandise/MerchandiseService/DeleteSsu"
        };
    };

    rpc BatchUpdateSkuSsu(BatchUpdateSkuSsuRequest) returns (BatchUpdateSkuSsuResponse) {
        option (google.api.http) = {
            post : "/ceres/merchandise/MerchandiseService/BatchUpdateSkuSsu"
        };
    };

    rpc BatchCreateCategorySku(BatchCreateCategorySkuRequest) returns (BatchCreateCategorySkuResponse) {
        option (google.api.http) = {
            post : "/ceres/merchandise/MerchandiseService/BatchCreateCategorySku"
        };
    };

    rpc BatchCreateSsu(BatchCreateSsuRequest) returns (BatchCreateSsuResponse) {
        option (google.api.http) = {
            post : "/ceres/merchandise/MerchandiseService/BatchCreateSsu"
        };
    };

    rpc ListSsu(ListSsuRequest) returns (ListSsuResponse) {
        option (google.api.http) = {
            post : "/ceres/merchandise/MerchandiseService/ListSsu"
        };
    }

    rpc ListSsuByCustomerOrQuotation(ListSsuByCustomerOrQuotationRequest) returns (ListSsuByCustomerOrQuotationResponse) {
        option (google.api.http) = {
            post : "/ceres/merchandise/MerchandiseService/ListSsuByCustomerOrQuotation"
        };
    }

    rpc GetRuleSet(GetRuleSetRequest) returns (GetRuleSetResponse) {
        option (google.api.http) = {
            post : "/ceres/merchandise/MerchandiseService/GetRuleSet"
        };
    };
    rpc CreateRuleSet(CreateRuleSetRequest) returns (CreateRuleSetResponse) {
        option (google.api.http) = {
            post : "/ceres/merchandise/MerchandiseService/CreateRuleSet"
        };
    };
    rpc UpdateRuleSet(UpdateRuleSetRequest) returns (UpdateRuleSetResponse) {
        option (google.api.http) = {
            post : "/ceres/merchandise/MerchandiseService/UpdateRuleSet"
        };
    };
    rpc DeleteRuleSet(DeleteRuleSetRequest) returns (DeleteRuleSetResponse) {
        option (google.api.http) = {
            post : "/ceres/merchandise/MerchandiseService/DeleteRuleSet"
        };
    };

    rpc ListRuleSet(ListRuleSetRequest) returns (ListRuleSetResponse) {
        option (google.api.http) = {
            post : "/ceres/merchandise/MerchandiseService/ListRuleSet"
        };
    };

    rpc CreateUnit(CreateUnitRequest) returns (CreateUnitResponse) {
        option (google.api.http) = {
            post : "/ceres/merchandise/MerchandiseService/CreateUnit"
        };
    };

    rpc ListUnit(ListUnitRequest) returns (ListUnitResponse) {
        option (google.api.http) = {
            post : "/ceres/merchandise/MerchandiseService/ListUnit"
        };
    };

    rpc GetUnitRateGroup(GetUnitRateGroupRequest) returns (GetUnitRateGroupResponse) {
        option (google.api.http) = {
            post : "/ceres/merchandise/MerchandiseService/GetUnitRateGroup"
        };
    };

    rpc InitUnit(InitUnitRequest) returns (InitUnitResponse) {
        option (google.api.http) = {
            post : "/ceres/merchandise/MerchandiseService/InitUnit"
        };
    };

    // 初始化系统预设的分类图片
    rpc InitCategoryImage(InitCategoryImageRequest) returns (InitCategoryImageResponse) {
        option (google.api.http) = {
            post : "/ceres/merchandise/MerchandiseService/InitCategoryImage"
        };
    };
    // 获取系统预设的分类图片
    rpc ListCategoryImage(ListCategoryImageRequest) returns (ListCategoryImageResponse) {
        option (google.api.http) = {
            post : "/ceres/merchandise/MerchandiseService/ListCategoryImage"
        };
    };

    // Quotation 报价单
    rpc GetQuotation(GetQuotationRequest) returns (GetQuotationResponse) {
        option (google.api.http) = {
            post : "/ceres/merchandise/MerchandiseService/GetQuotation"
        };
    }
    rpc ListQuotation(ListQuotationRequest) returns (ListQuotationResponse) {
        option (google.api.http) = {
            post : "/ceres/merchandise/MerchandiseService/ListQuotation"
        };
    }
    rpc GetManyQuotation(GetManyQuotationRequest) returns (GetManyQuotationResponse) {
        option (google.api.http) = {
            post : "/ceres/merchandise/MerchandiseService/GetManyQuotation"
        };
    }

    rpc CreateQuotation(CreateQuotationRequest) returns (CreateQuotationResponse) {
        option (google.api.http) = {
            post : "/ceres/merchandise/MerchandiseService/CreateQuotation"
        };
    }
    rpc UpdateQuotation(UpdateQuotationRequest) returns (UpdateQuotationResponse) {
        option (google.api.http) = {
            post : "/ceres/merchandise/MerchandiseService/UpdateQuotation"
        };
    }
    // todo 删除报价单逻辑
    rpc DeleteQuotation(DeleteQuotationRequest) returns (DeleteQuotationResponse) {
        option (google.api.http) = {
            post : "/ceres/merchandise/MerchandiseService/DeleteQuotation"
        };
    }

    rpc DeleteBasicPrice(DeleteBasicPriceRequest) returns (DeleteBasicPriceResponse) {
        option (google.api.http) = {
            post : "/ceres/merchandise/MerchandiseService/DeleteBasicPrice"
        };
    }
    rpc GetManySsuPrice(GetManySsuPriceRequest) returns (GetManySsuPriceResponse) {
        option (google.api.http) = {
            post : "/ceres/merchandise/MerchandiseService/GetManySsuPrice"
        };
    }

    rpc SyncSsuImage(SyncSsuImageRequest) returns (SyncSsuImageResponse) {
        option (google.api.http) = {
            post : "/ceres/merchandise/MerchandiseService/SyncSsuImage"
        };
    }

    rpc CreateFavorite(CreateFavoriteRequest) returns (CreateFavoriteResponse) {
        option (google.api.http) = {
            post : "/ceres/merchandise/MerchandiseService/CreateFavorite"
        };
    }

    rpc UpdateFavorite(UpdateFavoriteRequest) returns (UpdateFavoriteResponse) {
        option (google.api.http) = {
            post : "/ceres/merchandise/MerchandiseService/UpdateFavorite"
        };
    }

    rpc DeleteFavorite(DeleteFavoriteRequest) returns (DeleteFavoriteResponse) {
        option (google.api.http) = {
            post : "/ceres/merchandise/MerchandiseService/DeleteFavorite"
        };
    }

    rpc ListFavorite(ListFavoriteRequest) returns (ListFavoriteResponse) {
        option (google.api.http) = {
            post : "/ceres/merchandise/MerchandiseService/ListFavorite"
        };
    }

    rpc CreateFavoriteSsu(CreateFavoriteSsuRequest) returns (CreateFavoriteSsuResponse) {
        option (google.api.http) = {
            post : "/ceres/merchandise/MerchandiseService/CreateFavoriteSsu"
        };
    }

    rpc DeleteFavoriteSsu(DeleteFavoriteSsuRequest) returns (DeleteFavoriteSsuResponse) {
        option (google.api.http) = {
            post : "/ceres/merchandise/MerchandiseService/DeleteFavoriteSsu"
        };
    }

    rpc ListFavoriteSsu(ListFavoriteSsuRequest) returns (ListFavoriteSsuResponse) {
        option (google.api.http) = {
            post : "/ceres/merchandise/MerchandiseService/ListFavoriteSsu"
        };
    }
}

// gRPC status code
message Status {
    enum Code {
        CODE_UNSPECIFIED               = 0;
        CATEGORY_EXISTS                = 22220001; // 相同的父分类下不能创建相同分类名
        PARENT_CATEGORY_NOT_EXISTS     = 22220002; // 父分类不存在，不能创建分类
        PARENT_CATEGORY_CAN_NOT_CHANGE = 22220003; // 不能修改父分类
        CHILD_CATEGORY_EXISTS          = 22220004; // 存在子分类，不能删除分类
        CHILD_SPU_EXISTS               = 22220005; // 存在spu,不能删除分类
        SPU_EXISTS                     = 22220006; // 相同的分类下不能创建相同spu名
        UNIT_NOT_EXISTS                = 22220007; //单位不存在
        BASE_UNIT_CAN_NOT_CHANGE       = 22220008; // SKU的基本单位不可变
        SKU_NOT_EXISTS                 = 22220009; // SKU不存在
        SKU_EXISTS                     = 22220010; // 相同的父SPU下不能创建相同sku名
        SSU_EXISTS                     = 22220011; // 相同的父SkU下不能创建相同ssu名
        CUSTOMIZE_CODE_EXISTS          = 22220012; // 自定义编码已被占用
        CUSTOMER_NOT_BAND_QUOTATION    = 22220030; // 客户未绑定报价单
        DUPLICATE_QUOTATION_NAME       = 22220031; // 报价单内部名字不能重复
        CANNOT_DELETE_DEFAULT_QUOTATION = 22220032; // 不能删除默认报价单

        DUPLICATE_FAVORITE_SSU = 22220040; // 收藏夹已收藏过此商品
        CANNOT_UPDATE_DEFAULT_FAVORITE = 22220041;  // 默认收藏夹不可以修改

        ASYNC_TASK_PARAM_ERROR = 22220050; // 异步参数错误
    }
}

/*
    es 复杂搜索
 */

/**
* 在文件423位置
* 计量单位 全局使用,所以需要做一个单独的模块
* 可不可以把系统的单位换算也放在这里?是放到一起
* 需不需要快照, 比如计量比率修改了，老订单里的订单明细要按什么比率计算。需要快照，但版本号不要存到和Sku，spu里去
*/

/**
    系统单位 - system_unit,
    系统基准单位 - system_unit_anchor,
    sku基本单位 - sku_base_unit, sku的base_unit_id
    sku自定义单位 - sku_unit,  这个结构体就是ssu的unit。id 是ssu.unit.unit_id
    sku自定义基准单位 - sku_unit_anchor 这个存在就是ssu的unit的parent里。id 是ssu.unit.parent_id
 */

/*
2kg/袋
0.5kg/斤

(名字, 系统基准单位, 比例，类型 )
系统基准 斤
(g，null，1，重量)   1g=1g   unit2(g) 系统基准单位就是自己

系统预定义的单位
(g，null，1，重量)   1g=1g   unit2(g)
(kg，g，1000，重量)  1kg=1000g   unit3(kg)
(斤，g，500，重量)  1斤=500g     unit4(斤)
(磅斤，g，300，重量)  1磅斤=300g     unit5(磅斤)

sku基本单位 从系统预定义的单位里选
(斤，g，500，重量)  1斤=500g     unit4(斤)

sku自定义单位
(袋，kg，2，type)   1袋=2kg     unit1(袋)

sku自定义单位的基准单位
(kg，g，1000，重量)  1kg=1000g   unit3(kg)

比如说
下sku1  2kg/袋

sku snap
(袋，kg，2，type)  1袋=2kg     unit1(袋)

下单数     (10,unit1(袋))
商品价格    4元 每袋 (4，unit1(袋))

下单金额：10*4=40

出库数  1. (30, unit3(kg))
       2. (15, unit1(袋))
       3. (12, unit5(磅斤))，按这个出库，就需要传当时那一刻的转换关系
*/
enum SystemUnitId {
    S_UNSPECIFIED        = 0;
    SYSTEM_UNIT_ID_BEGIN = 200000;
}

// 单位是什么类型
enum UnitType {
    UNIT_TYPE_UNSPECIFIED = 0;
    SYSTEM_UNIT           = 1; // 系统单位      存在系统单位表里
    SYSTEM_UNIT_ANCHOR    = 2; // 系统基准单位   系统单位表里的parent_id
    SKU_BASE_UNIT         = 3; // sku基本单位    sku基本单位的id就是sku.base_unit_id, 并且这个base_unit_id被同步到了ssu.base_unit_id。
    SSU_UNIT              = 4; // ssu包装单位   unit存在ssu里, unit就是ssu.unit。它id 就是ssu.unit.unit_id
    SSU_UNIT_ANCHOR       = 5; // ssu计量单位   sku自定义基准单位的id 就是ssu.unit.parent_id。
}

message Unit {
    enum Type {
        T_UNSPECIFIED = 0;
        LENGTH        = 1; //长度
        AREA          = 2; //面积
        VOLUME        = 3; //容积|体积
        MASS          = 4; //质量|重量
        COUNT         = 5; //数量repeated Ssu Ssu = 2;
    }
    // @inject_tag: gorm:"PRIMARY_KEY"
    uint64 unit_id     = 1; // 主键
    uint64 status      = 2; // 状态bitmap
    uint64 revision    = 3; // 版本
    uint64 create_time = 4; // 创建时间
    uint64 update_time = 5; // 修改时间
    uint64 delete_time = 6; // 删除时间，非0表示已删除

    uint32 group_id = 12; // 如有则表示是企业自定义单位

    string name       = 20 [ (validate.rules).string = {min_len : 1} ];
    string rate       = 21 [ (validate.rules).string = {min_len : 1} ]; // id/parent_id 单位是「3斤/袋」的含义是 「3斤= 1袋」，所以比率（unit.rate） =「1袋/1斤 = 3」
    Type   type       = 22;
    uint64 parent_id  = 23 [ (validate.rules).uint64 = {gte : 0} ]; // 基本单位
    uint64 country_id = 24;                                         // 国家编码，如有则表示该单位仅适用于该国家
}

// 商品库需要添加
enum Optype {
    OP_UNSPECIFIED = 0;
    CREATE         = 1;
    UPDATE         = 2;
    DELETE         = 3;
}

message Category {
    option (dao.partition_count) = 100;

    // @inject_tag: gorm:"PRIMARY_KEY"
    uint64 category_id = 1; // 主键
    uint64 status      = 2; // 状态bitmap
    uint64 revision    = 3; // 版本 其实并没有版本
    uint64 create_time = 4; // 创建时间
    uint64 update_time = 5; // 修改时间
    uint64 delete_time = 6; // 删除时间，非0表示已删除

    uint64 group_id  = 10;
    uint64 parent_id = 11 [ (validate.rules).uint64 = {gte : 0} ]; // 一级分类的parent_id 是 0

    string name = 20 [ (validate.rules).string = {min_len : 1} ];
    string icon = 22;                             //不影响版本
    uint32 rank = 23 [ (setter.include) = true ]; //不影响版本
}

// 每个订单都需要存spu版本和Sku版本/SkuId(具体看Sku的信息要不要冗余到订单)
// Sku的存在只是因为库存
// 这个只是一个结构，不是一个表

message Spu {
    option (dao.partition_count) = 100;

    // @inject_tag: gorm:"PRIMARY_KEY"
    uint64 spu_id      = 1; // 主键
    uint64 status      = 2; // 状态bitmap
    uint64 revision    = 3; // 版本 没有版本
    uint64 create_time = 4; // 创建时间
    uint64 update_time = 5; // 修改时间
    uint64 delete_time = 6; // 删除时间，非0表示已删除

    uint64 group_id  = 10;
    uint64 parent_id = 11 [ (validate.rules).uint64 = {gt : 0} ];

    string name = 20 [ (validate.rules).string = {min_len : 1} ];
    string icon = 22;                             //不影响版本
    uint32 rank = 23 [ (setter.include) = true ]; //不影响版本 默认create_time排序
}

// sku 的
message Sku {
    option (dao.partition_count) = 100;

    enum PurchaseType { //采购类型 0.非临采 ,1 临采
        PUR_TYPE_UNSPECIFIED = 0;
        NO_TMP               = 1;
        TMP                  = 2;
    }

    enum DispatchType { // 投框方式
        DIS_TYPE_UNSPECIFIED = 0;
        ORDER                = 1;
        DRIVER               = 2;
    }

    enum Status {
        S_UNSPECIFIED = 0;
        DETECT        = 128; //是否检测:：
        NUTRITION     = 512;
    }

    enum SkuType {
        ST_UNSPECIFIED = 0;
        PACKAGE        = 1; // 包材
        NOT_PACKAGE    = 2; // 非包材
    }

    // 非包材类型的区分
    enum NotPackageSubSkuType {
        SNPST_UNSPECIFIED = 0;
        ORIGIN            = 1;  // 原料
        CLEAN             = 2;  // 净菜
        DELICATESSEN      = 3;  // 熟食
        DISHES            = 4;  // 菜品
        COMBO             = 5;  // 套餐
        BOXED_LUNCH       = 6;  // 盒饭
        CAKE              = 7;  // 糕点
        STAPLE            = 8;  // 主食
        DRINK             = 9;  // 饮料
        WATER             = 10; // 水
        INGREDIENTS       = 11; // 配料
        NON_STAPLE_FOOD   = 12; // 副食品
        OUTSOURCED_FINISHED_PRODUCTS = 13; // 外购成品
        HOMEMADE_PRODUCTS            = 14; // 自制成品
        MATERIALS                    = 15; // 物料
        GRAIN_AND_OIL                = 16; // 粮油
    }

    // 包材类型的细分
    enum PackageSubSkuType {
        PSST_UNSPECIFIED = 0;
        TURNOVER         = 1; // 包材-周转物
        ONE_TIME         = 2; // 包材-耗材
    }

    // @inject_tag: gorm:"PRIMARY_KEY"
    uint64 sku_id      = 1; // 主键
    uint64 status      = 2; // 状态bitmap  detect；开启营养素
    uint64 revision    = 3; // 版本
    uint64 create_time = 4; // 创建时间
    uint64 update_time = 5; // 修改时间
    uint64 delete_time = 6; // 删除时间，非0表示已删除

    uint64 group_id     = 10;
    uint64 category_id  = 12; // spu分类的上级分类id。为了减少查询, spu分类的修改会导致category_id的改变
    uint64 spu_id       = 13 [ (validate.rules).uint64 = {gt : 0} ];
    uint64 base_unit_id = 14 [ (validate.rules).uint64 = {gt : 0} ]; // 基本单位
    uint64 max_unit_id  = 15;                                        //自定义单位的最大单位

    //基础信息
    string               name                     = 20 [ (validate.rules).string = {min_len : 1} ]; // 影响版本
    string               customize_code           = 22 [ (validate.rules).string = {min_len : 1} ]; // 自定义id
    string               desc                     = 23;
    SkuType              sku_type                 = 24 [ (validate.rules).message = {required: true} ]; //
    NotPackageSubSkuType not_package_sub_sku_type = 25;                                             // 非耗材商品必填
    PackageSubSkuType    package_sub_sku_type     = 26;                                             //耗材商品必填
    bool                 process                  = 27;                                             // 加工和非加工 必传
    uint32               expiry_date              = 28;                                             // 保质期
    RepeatedField        repeated_field           = 29;

    message Extra { // 一些额外的展示字段。只做展示不做显示。这期没有
        string key   = 1;
        string value = 2;
    }
    message RepeatedField {
        repeated string alias        = 1; // 不影响版本 别名列表
        repeated common.Image images = 2; // 商品图  第一张是详情图
        repeated Extra        extras = 3;
        // repeated Unit   units  = 3; // sku自定义单位组
    }

    //业务信息
    PurchaseType purchase_type = 30 [ (validate.rules).message = {required: true} ];    //
    DispatchType dispatch_type = 31 [ (validate.rules).message = {required: true} ]; //
    uint32       rank          = 32 [ (setter.include) = true ];                    // 排序
    uint64       purchaser_id  = 34;
    uint64       supplier_id   = 35;

    // 包材
    string package_price = 40; // sku是包材，包材的货值
}

enum ModuleType {
    M_UNSPECIFIED = 0;
    SORTING       = 1;
    ORDER         = 2;
    DISTRIBUTE    = 3;
    PURCHASE      = 4;
    STOCK         = 5;
}

// 采购规格，包材，非包材，毛菜，净菜使用的都是同一套结构
message Ssu {
    option (dao.partition_count) = 100;

    enum PackageCalculateType { // 拣货方式
        PC_UNSPECIFIED = 0;
        FIXED          = 1;
        BY_ORDER_NUM   = 2;
    }

    enum NutritionType { // 修改结构
        NT_UNSPECIFIED = 0;
        PROTEIN        = 1;
        FAT            = 2;
        CARBOHYDRATE   = 3;
    }

    enum SplitFlag {
        // 1表示只投框, 2表示只分切, 3表示投框+分切
        SF_UNSPECIFIED = 0;
        THROW_BASK_BET = 1;
        DIVIDE         = 2;
        INVESTMENT     = 3;
    }

    enum ShippingFeeUnit {
        SFU_UNSPECIFIED = 0;
        BASE            = 1; // ssu的计量单位
        PACKAGE         = 2; // ssu的包装单位
    }
    // @inject_tag: gorm:"PRIMARY_KEY"
    uint64 ssu_id      = 1;
    uint64 status      = 3; // 状态bitmap
    uint64 revision    = 4; // 版本
    uint64 create_time = 5; // 创建时间
    uint64 update_time = 6; // 修改时间
    uint64 delete_time = 7; // 删除时间，非0表示已删除

    uint64 group_id = 10;
    // @inject_tag: gorm:"UNIQUE_INDEX:sku_id_unit_id"
    uint64                   sku_id                   = 11; // 主键
    uint64                   category_id              = 12; // 为了减少查询
    uint64                   spu_id                   = 13;
    Sku.SkuType              sku_type                 = 14; //同步sku的sku_type
    Sku.NotPackageSubSkuType not_package_sub_sku_type = 15; //同步sku的not_package_sub_sku_type耗材
    Sku.PackageSubSkuType    package_sub_sku_type     = 16; // 同步sku的package_sub_sku_type
    bool                     process                  = 17; // 同步sku的加工和非加工
    string                   sku_name                 = 18; // 同步sku的name
    // @inject_tag: gorm:"UNIQUE_INDEX:sku_id_unit_id"
    uint64 unit_id = 19; // 单位ID 联合主键 包装单位或系统单位。目前只有包装单位
    // 基础信息
    string        customize_code = 21 [ (validate.rules).string = {min_len : 1} ]; //自定义编码 版本
    string        description    = 23;
    RepeatedField repeated_field = 24;
    bool          has_image      = 25;
    string        name           = 26 [ (validate.rules).string = {min_len : 1} ]; //影响版本
    message       RepeatedField {
        repeated common.Image images = 1; // 商品图  第一张是详情图
    }

    // 销售信息
    bool   on_sale              = 33; // 上下架
    uint64 shipping_fee_unit_id = 35; //
    /*shipping_fee_unit这个字段定价用ssu计量单位，或者用的ssu包装单位。
      假设现在ssu的包装单位是3斤/袋。计量单位就是斤 ， 包装单位就是袋。 自定义单位的结构体（也就是3斤/袋的信息）被保存在Ssu.unit里。
    */
    ShippingFeeUnit shipping_fee_unit    = 32;
    string          minimum_order_number = 37;

    UnitType unit_type    = 38 [ (validate.rules).message = {required: true} ];      // 类型是包装单位或者系统单位。
    Unit     unit         = 39 [ (validate.rules).message = {required : true} ]; // 包装单位。 unit_type为系统单位时，还是会生成一个包装单位。原因是当系统单改了，我们认为他还是同一个ssu，直接使用系统单位无法满足这一场景。
    uint64   base_unit_id = 40;                                                  // sku基本单位 同步的sku的base_unit_id

    // 仓内作业
    uint64    purchase_unit_id = 41; //采购单位
    bool      is_weight        = 42; // 是否称重
    SplitFlag split_flag       = 44;

    // 包材
    bool                 need_package           = 50; // 是否打包
    bool                 need_package_work      = 51; // 是否进入打包作业流程
    PackageCalculateType package_calculate_type = 53;
    double               package_num            = 54;
    string               package_price          = 55; // sku是包材，包材的货值
    message              PackageId {
        uint64 sku_id  = 1; // 主键
        uint64 unit_id = 2; // 单位ID 联合主键
    }
    PackageId package_id = 56;
    message   RepeatedPackageField {
        map<uint32, string> nutrition = 2; // key 是 enum NutritionType里的值
    }
}

//最小下单数，上下架，
// 报价单
message Quotation {
    option (dao.partition_count) = 100;

    // @inject_tag: gorm:"PRIMARY_KEY"
    uint64 quotation_id = 1;
    uint64 revision     = 3;
    uint64 create_time  = 4; // 创建时间
    uint64 update_time  = 5; // 修改时间
    uint64 delete_time  = 6; // 删除时间，非0表示已删除

    uint64 group_id   = 10;
    uint64 station_id = 11;

    string inner_name  = 20; // 对内（也就是 GroupUser）可见的报价单可见的名字
    string outer_name  = 21; // 最外（比如说 Customer）可见的报价单可见的名字
    string description = 22;
    bool   is_active   = 23;
    bool   is_default  = 24; // 是否是默认报价单
}

message CustomerQuotationRelation {
    option (dao.partition_count) = 100;

    // @inject_tag: gorm:"PRIMARY_KEY"
    uint64 customer_quotation_relation_id = 1;
    uint64 create_time                    = 4;
    uint64 update_time                    = 5;
    uint64 delete_time                    = 6; // 删除时间，非0表示已删除

    uint64 group_id     = 10;
    uint64 station_id   = 11;
    uint64 quotation_id = 12 [ (validate.rules).uint64 = {gt : 0} ];
    uint64 customer_id  = 13 [ (validate.rules).uint64 = {gt : 0} ];
}

// 由报价单，运营时间和商品id确定一个价格,
message BasicPrice {
    option (dao.partition_count) = 100;

    // @inject_tag: gorm:"PRIMARY_KEY"
    uint64 basic_price_id = 1;
    uint64 create_time    = 4;
    uint64 update_time    = 5;
    uint64 delete_time    = 6; // 删除时间，非0表示已删除

    uint64 group_id   = 10;
    uint64 station_id = 11;
    // @inject_tag: gorm:"UNIQUE_INDEX:quotation_id_sku_id_unit_id"
    uint64 quotation_id = 12 [ (validate.rules).uint64 = {gt : 0} ]; //quotation_id,sku_id,unit_id确定一个价格
    // @inject_tag: gorm:"UNIQUE_INDEX:quotation_id_sku_id_unit_id"
    uint64 sku_id = 13;
    // @inject_tag: gorm:"UNIQUE_INDEX:quotation_id_sku_id_unit_id"
    uint64 unit_id = 14;
    uint64 spu_id  = 15;

    string price        = 20 ; // 基本价格
    string formula_text = 21;
    /*
        formula_text表示定价公式
        参数值代表{
            basic_price: 基本价
        }
        formula_text: "{basic_price}*2+1"  这个公式表示"基本价*2+1"
    */
    bool current_price = 22; // 启动时价
    bool on_sale       = 23; // 上下架
}

message Favorite {
    enum FavoriteType { // 收藏夹类型
        F_UNSPECIFIED = 0;
        BSHOP = 1;
    }

    enum FavoriteContentType {  // 收藏夹收藏的 内容
        FC_UNSPECIFIED = 0;
        SSU = 1;
    }

    option (dao.partition_count) = 100;

    // @inject_tag: gorm:"PRIMARY_KEY"
    uint64 favorite_id = 1;
    uint64 revision          = 3;
    uint64 create_time       = 4; // 创建时间
    uint64 update_time       = 5; // 修改时间
    uint64 delete_time       = 6; // 删除时间，非0表示已删除

    uint64 group_id    = 10;
    uint64 station_id  = 11;
    uint64 customer_id = 12; // 收藏夹关联的用户

    string name = 21 [ (validate.rules).string = {min_len : 1} ]; // 收藏夹名字
    bool default = 22; // 是否默认收藏夹
    FavoriteType favorite_type = 23;// 收藏夹类型 。目前只有bshop的收藏夹，类型被后台写死。
    FavoriteContentType favorite_content_type = 24; // 收藏内容类型。目前只收藏SSU，类型被后台写死。
}

message FavoriteSsu {
    option (dao.partition_count) = 100;

    // @inject_tag: gorm:"PRIMARY_KEY"
    uint64 favorite_ssu_id = 1;
    uint64 revision        = 4;
    uint64 create_time     = 5; // 创建时间
    uint64 update_time     = 6; // 修改时间
    uint64 delete_time     = 7; // 删除时间，非0表示已删除

    uint64 group_id   = 10;
    uint64 station_id = 11;
    // @inject_tag: gorm:"UNIQUE_INDEX:favorites_id_sku_id_unit_id"
    uint64 favorite_id = 12 [ (validate.rules).uint64 = {gt : 0} ];
    uint64 sku_id            = 13 [ (validate.rules).uint64 = {gt : 0} ];
    uint64 unit_id           = 14 [ (validate.rules).uint64 = {gt : 0} ];
}

//规则校验
message RuleSet {
    option (dao.partition_count) = 100;

    enum State {
        STATE_UNSPECIFIED = 0;
        ON                = 1; // 有效
        OFF               = 2; // 无效
    }

    enum Type {
        TYPE_UNSPECIFIED = 0;
        RANGE            = 1;
        PRICE            = 2;
    }

    uint64 rule_set_id = 1;
    uint64 create_time = 4;
    uint64 update_time = 5;
    uint64 delete_time = 6; // 删除时间，非0表示已删除

    uint64 group_id            = 10;
    uint64 station_id          = 11;
    uint64 quotation_id        = 12 [ (validate.rules).uint64 = {gt : 0} ]; // 报价单ID
    string rule_set_display_id = 13;                                        // 报价单对外展示ID 根据产品策略后台生成

    State         state          = 20 [ (validate.rules).message = {required: true} ]; //状态是否有效
    RepeatedField repeated_field = 21;
    Type          type           = 22 [ (validate.rules).message = {required: true} ]; //针对范围还是价格
    message       RepeatedField {
        repeated Rule   rules              = 1 [ (validate.rules).repeated = {min_items : 1} ];
        repeated uint64 service_period_ids = 2 [ (validate.rules).repeated = {min_items : 1} ]; // 运营时间
    }

    message Rule {
        string formula_text = 5;
        /*
            formula_text表示定价公式
            参数值代表{
                 basic_price: 基本价
            }
            formula_text: "{basic_price}*2+1"  这个公式表示"基本价*2+1"
        */
        repeated uint64 customer_ids = 6 [ (validate.rules).repeated = {min_items : 1} ];
        repeated SsuId  ssu_ids      = 7 [ (validate.rules).repeated = {min_items : 1} ];
    }
}

//缓存
message CategoryTreeCache {
    message CategoryInfo {
        uint64 parent_id = 1;
        string name      = 2;
    }
    map<uint64, CategoryInfo> category_link = 1; //key 是CategoryId
}

// 用时才更新
message QuotationCategoryIdsCache {
    map<uint64, int32> category_id_map = 1; // key 是category_id, value 是子节点数量,为了diff 更新方便
    uint64             version         = 2; // 更新时间
    int32              ssu_count       = 3; // ssu的数量
}

message RuleSetCache {
    map<uint64, bool>   rule_set_customer  = 1;
    map<string, string> rule_set_ssu       = 2; // key 是 string(SsuId.SkuId)+string(SsuId.UnitId)
    repeated uint64     service_period_ids = 3;
}

message CustomerPriceRuleCache {
    message CustomerRuleSet {
        repeated uint64 rule_set_ids = 1;
    }
    map<uint64, CustomerRuleSet> customer_rule = 1; //key 是customer_id，将每个商户
    uint64                       version       = 2; // 更新时间
}

// CustomerDisableSsuCache 和 CustomerPriceRuleCache 的version 应该保持一致,所以CustomerDisableSsuCache里并没有存 version
message RuleSetDisableSsuCache {
    message CustomerDisableSsuList {
        repeated SsuId ssu_ids = 1;
    }
    map<uint64, CustomerDisableSsuList> rule_set_id_disable_ssu = 1; //key rule_set_id
    uint64                              version                 = 2; // 更新时间
}

message RuleSetPriceCache {
    message SsuPrice {
        map<uint64, string> ssu_price = 1; //key是 ssu_id，value是price
        uint64              version   = 2; // 更新时间
    }
    map<uint64, SsuPrice> rule_set_price = 1; //key 假设说现在客户和3个rule_set（1，2，3）绑定 ,key就是"1-2-3",没有规则的原价，key是""
}

// 系统预设的分类图片
message CategoryImage {
    option (dao.partition_count) = 100;

    // @inject_tag: gorm:"PRIMARY_KEY"
    uint64       category_image_id = 1;
    common.Image image             = 2;
}

// 价格计算伪代码
/*
价格计算伪代码
// 规则计算
price_rule_set_ids, rule_set_version  = get_CustomerPriceRuleCache(customer_id) //从缓存里获取里
disable_ssu = get_CustomerDisableSsuCache(customer_id)
is_rule_set_updated = get_one_update_rule_set(rule_set_version，quotation_id)
price_rule_set = None
if is_rule_set_updated:
    // 从db里获取并计算存到缓存里去, ssu_price_rule_formula 的格式是{ssu_id:rule_formula_text}
    all_price_rule_set_id, all_disable_ssu, ssu_price_rule_formula, price_rule_set_ids, new_rule_set_version = get_all_rule_set()
    set_CustomerPriceRuleCache(all_price_rule_set_id, new_rule_set_version)
    set_CustomerDisableSsuCache(disable_ssu)
    disable_ssu = all_disable_ssu(customer_id)
else:
    ssu_price_rule_formula = get_ssu_price_rule(price_rule_set_ids)

// 基础价格计算
ssu_basic_price = get_RuleSetIDPriceCache(format(price_rule_set_ids))
if not ssu_basic_pric:
    ssu_basic_price = get_all_ssu_basic_price(Quotation_id)
    set_RuleSetIDPriceCache({"":ssu_basic_price})
    is_ssu_price_updated = True
else:
    delete_ssu_basic_price, update_ssu_basic_price, is_ssu_price_updated = get_update_ssu_basic_price(version, Quotation)
    if is_ssu_price_updated:
        ssu_basic_price = merge(ssu_basic_price, delete_ssu_basic_price, update_ssu_basic_price)
        set_RuleSetIDPriceCache({"":ssu_basic_price})

// 计算返回价格
price_key = format(price_rule_set_ids)
if price_key != "" :
    old_price = get_RuleSetIDPriceCache(price_key)
    if not old_price:
        // 全量计算
        ssu_price = calculate(ssu_price_rule_formula, ssu_basic_price)
    else:
        //增量计算
        if is_rule_set_updated and is_ssu_price_updated:
            ssu_price = calculate(ssu_price_rule_formula, ssu_basic_price)
        elif is_rule_set_updated:
            ssu_price = calculate(ssu_price_rule_formula, ssu_basic_price)
        elif is_ssu_price_updated:
            ssu_price = calculate(ssu_price_rule_formula, ssu_basic_price, update_ssu_basic_price, old_price)
        else:
            ssu_price = old_price
else:
    ssu_price = ssu_basic_price

if disable_ssu:
    ssu_price = ssu_price.remove(disable_ssu)

return ssu_price

保存规则伪代码
for rule_ssu_id
    rule_ssu_id
ssu_id  = get_all_ssu_id_in_quotation(Quotation_id) //可以从缓存里取么
invalid_ssu_id = ssu_id - rule_ssu_id
if invalid_ssu_id:
    return invalid_ssu_id
*/

// 分类树算法 暂时用不到了
/*
// 商品库需要添加
message node {
    uint64 node_version = 1;
    uint64 node_id      = 2;
    uint64 ctime        = 3;
    uint64 mtime        = 4;

    uint32 group_id   = 10;
    string station_id = 11;
    uint64 tree_id    = 12;

    string name   = 20;
    uint32 optype = 21; //使用uint32做枚举
}

// 快照树的数据结构
// 节点表加存档点 ，如何减少category_tree_version
message Relation {
    uint64 id      = 1; // 这个ID没有实际的意义，当前使用AUTO_INCREMENT，有没有什么办法把它改成不自增的
    uint64 node_id = 2; // 节点的ID，spu节点或者分类节点

    uint32 group_id   = 4;
    string station_id = 5;
    uint32 ctime      = 6;
    uint32 mtime      = 7;

    uint64 parent_id = 10;
    uint64 tree_id   = 12;

    Optype Optype = 21;
    uint32 level  = 22;
}

message TreeVersion {
    uint64 id = 1; // 这个ID没有实际的意义，当前使用AUTO_INCREMENT，有没有什么办法把它改成不自增的

    uint32 group_id   = 4;
    string station_id = 5;
    uint32 ctime      = 6;
    uint32 mtime      = 7;

    uint64          tree_create_time = 21;
    repeated string node_version     = 22;
}

// 分类树信息表
message TreeInfo {
    uint32 tree_id   = 1;
    string name      = 2;
    uint32 status    = 3;
    string statio_id = 4;
    uint32 group_id  = 5;
    uint32 ctime     = 6;
    uint32 mtime     = 6;

    message module_list { // 这期要不要
        ModuleType module_type = 1;
    }
}

节点表
node_version node_id optype group_id station_id  ctime           mtime         tree_id   name
    1          1       0     123       123       1594440000.0    1594440000.0    1       "S1"
    2          2       0     123       123       1594443600.0    1594443600.0    1       "S2"
    3          3       0     123       123       1594443600.0    1594443600.0    1       "S3"
    4          4       0     123       123       1594447200.0    1594447200.0    1       "S4"
    5          5       0     123       123       1594447200.0    1594447200.0    1       "S5"
    6          6       0     123       123       1594447800.0    1594447800.0    1       "S6"
    7          7       0     123       123       1594447800.0    1594447800.0    1       "S7"

节点关系表
node_id group_id station_id  ctime         mtime         parent_id  tree_id  optype  level
  1        123      123      1594440000.0  1594440000.0    0          1        0       1
  2        123      123      1594443600.0  1594443600.0    1          1        0       2
  3        123      123      1594443600.0  1594443600.0    1          1        0       2
  4        123      123      1594447200.0  1594447200.0    2          1        0       3
  5        123      123      1594447200.0  1594447200.0    2          1        0       3
  6        123      123      1594447800.0  1594447800.0    3          1        0       3
  7        123      123      1594447800.0  1594447800.0    3          1        0       3


// 节点2改名字
// 节点表
node_version node_id optype group_id station_id  ctime           mtime            tree_id    name
  8           2        1      123      123       1594447920.0    1594447920.0      1         "S2_"

// 节点6改了分类
//节点关系表
node_id group_id station_id  ctime         mtime         parent_id  tree_id  optype level
  6        123      123      1594447980.0  1594447980.0    2          1        2      3

//树版本快照表
time           tree
1594440000.0   ['011']
1594447200.0   ['011', '022', '034', '035', '023']

//实际各个时刻的树版本，未存
time           tree
1594440000.0   ['011']
1594443600.0   ['011', '022', '023']
1594447200.0   ['011', '022', '034', '035', '023']
1594447800.0   ['011', '022', '034', '035', '023', '036', '037']
1594447920.0   ['011', '028', '034', '035', '023', '036', '037']
1594447980.0   ['011', '028', '036', '034', '035', '023', '037']

//算法
def tree(tree_time):
    prior_tree = session.query(TreeVersion).filter(TreeVersion.tree_time <= tree_time).Category_by(desc(TreeVersion.tree_time)).limit(1)

    changed_node_cursor = session.query(Node).filter(and_(Node.c_time > prior_tree.time, Node.c_time <= tree_time)).Category_by(Node.c_time)
    created_node_id_version = {}
    updated_node_id_version = {}
    deleted_node_id_version = {}

    for node_cursor in changed_node_cursor:
        if node_cursor.optype = Optype.CREATE:
            created_node_id_version[node_cursor.node_id] = node_cursor.node_version
        elif node_cursor.optype = Optype.update:
            updated_node_id_version[node_cursor.node_id] = node_cursor.node_version
        else:
            deleted_node_id_version[node_cursor.node_id] = node_cursor.node_version

    changed_relation = session.query(Relation).filter(and_(Relation.c_time > prior_tree.time, Relation.c_time <= tree_time))



uint32 node_type = 7; // 叶子节点还是树节点
 */

message GetCategoryRequest {
    uint64 category_id = 1 [ (validate.rules).uint64 = {gt : 0} ];
}

message GetCategoryResponse {
    Category category = 1;
}

//分类是group通用
message ListCategoryRequest {
    repeated uint64     category_ids = 1;
    string              q            = 2;
    common.PagingParams paging       = 3;
}

message ListCategoryResponse {
    repeated Category         categories = 1;
    ceres.common.PagingResult paging     = 2;
}

message CreateCategoryRequest {
    Category category = 1 [ (validate.rules).message = {required : true} ];
}

message CreateCategoryResponse {
    Category category = 1;
}

message UpdateCategoryRequest {
    Category category = 1 [ (validate.rules).message = {required : true} ];
}

message UpdateCategoryResponse {
    Category category = 1;
}

message DeleteCategoryRequest {
    uint64 category_id = 1 [ (validate.rules).uint64 = {gt : 0} ];
}

message DeleteCategoryResponse {
    Category category = 1;
}

message GetCategoryTreeRequest {
    uint64          customer_id = 1; // bshop 根据客户拉取获取的分类树
    uint64          station_id  = 2; // bshop 根据客户拉取获取的分类树 必须把station_id传过来
    repeated uint64 sku_ids     = 3; // 根据sku_id拉取对应的分类树
    uint64          group_id    = 4; // bshop 未登录客户
}

message GetCategoryTreeResponse {
    repeated Category categories = 1;
    repeated Spu      spus       = 2;
}

message ChangeMerchandiseRankRequest {
    enum NodeType {
        NT_UNSPECIFIED = 0;
        CATEGORY       = 1;
        SPU            = 2;
        SKU            = 3;
    }
    NodeType node_type = 1;
    uint32   rank      = 2;
    uint64   node_id   = 3;
}

message ChangeMerchandiseRankResponse {
}

message GetManyCategoryRequest {
    repeated uint64 category_ids = 1 [ (validate.rules).repeated = {min_items : 1} ];
}

message GetManyCategoryResponse {
    map<uint64, Category> category_map = 1;
}

message GetSpuRequest {
    uint64 spu_id = 1 [ (validate.rules).uint64 = {gt : 0} ];
}

message GetSpuResponse {
    Spu spu = 1;
}

message GetManySpuRequest {
    repeated uint64 spu_ids = 1 [ (validate.rules).repeated = {min_items : 1} ];
}

message GetManySpuResponse {
    map<uint64, Spu> spu_map = 1;
}

message ListSpuRequest {
    repeated uint64     spu_ids = 1;
    string              name    = 2;
    common.PagingParams paging  = 3;
}
message ListSpuResponse {
    repeated Spu              spus   = 1;
    ceres.common.PagingResult paging = 2;
}

message CreateSpuRequest {
    Spu spu = 1 [ (validate.rules).message = {required : true} ];
}

message CreateSpuResponse {
    Spu spu = 1;
}

message UpdateSpuRequest {
    Spu spu = 1 [ (validate.rules).message = {required : true} ];
}

message UpdateSpuResponse {
    Spu spu = 1;
}

message DeleteSpuRequest {
    uint64 spu_id = 1 [ (validate.rules).uint64 = {gt : 0} ];
}

message DeleteSpuResponse {
    Spu spu = 1;
}

message GetSkuRequest {
    uint64 sku_id = 1 [ (validate.rules).uint64 = {gt : 0} ];
}

message SsuInfo {
    Ssu                 ssu          = 1;
    repeated BasicPrice basic_prices = 2;
}

message SsuTotalInfo {
    Ssu                   ssu            = 1;
    string                price          = 2;
    Sku                   sku            = 3;
    BasicPrice            basic_price    = 4;
    repeated CategoryInfo category_infos = 5; // [分类1, 分类2, spu]
}

message GetSkuResponse {
    Sku                   sku                = 1;
    repeated SsuInfo      ssu_infos          = 2;
    repeated CategoryInfo category_infos     = 3; // [分类1, 分类2, spu]
    map<uint64, string>   quotation_name_map = 4; // key 是报价单id, value是报价单名字
}

// sort 没加，需要放到缓存里排序
message ListSkuRequest {
    enum RequestData {
        RD_UNSPECIFIED = 0;
        SSU            = 256;  // 2^8 是否返回SSU
        PRICE          = 512;  // 2^9 是否返回价格
        CATEGORY       = 1024; // 2^10 是否返回分类
        QUOTATION      = 2048; // 2^11 是否返回报价单
    }

    repeated uint64           category_ids             = 1;
    repeated uint64           spu_ids                  = 2;
    repeated uint64           sku_ids                  = 3;
    repeated string           customize_codes          = 4;
    Sku.SkuType               sku_type                 = 6;
    string                    q                        = 7;
    uint32                    request_data             = 8; // enum RequestData
    common.Filters.Bool       process                  = 9;
    Sku.NotPackageSubSkuType  not_package_sub_sku_type = 10;
    Sku.PackageSubSkuType     package_sub_sku_type     = 11;
    ceres.common.PagingParams paging                   = 15 [ (validate.rules).message = {required : true} ];
}

message ListSkuResponse {
    message SkuInfo {
        repeated CategoryInfo category_infos = 1; // [分类1, 分类2, spu]
        Sku                   sku            = 2;
        repeated SsuInfo      ssu_infos      = 3;
    }
    repeated SkuInfo          sku_infos          = 1;
    map<uint64, string>       quotation_name_map = 2; // key 是报价单id, value是报价单名字
    ceres.common.PagingResult paging             = 3;
};

message ExportSkuRequest {
    repeated uint64          category_ids             = 1;
    repeated uint64          spu_ids                  = 2;
    repeated uint64          sku_ids                  = 3;
    repeated string          customize_codes          = 4;
    Sku.SkuType              sku_type                 = 6;
    string                   q                        = 7;
    uint32                   request_data             = 8; // enum RequestData
    common.Filters.Bool      process                  = 9;
    Sku.NotPackageSubSkuType not_package_sub_sku_type = 10;
    Sku.PackageSubSkuType    package_sub_sku_type     = 11;
}

message ExportSkuResponse {
    asynctask.Task task = 1;
}

message ExportSsuRequest {
    repeated uint64          category_ids             = 1;
    repeated uint64          spu_ids                  = 2;
    repeated uint64          sku_ids                  = 3;
    string                   q                        = 4;
    common.Filters.Bool      has_image                = 5; // 1：有图片，2：没有图片
    common.Filters.Bool      on_sale                  = 6; // 1：在售，2：下架
    Sku.SkuType              sku_type                 = 7; // 1：有图片，2：没有图片
    Sku.NotPackageSubSkuType not_package_sub_sku_type = 8; // 1：在售，2：下架
    Sku.PackageSubSkuType    package_sub_sku_type     = 9; // 1：在售，2：下架
    repeated SsuId           ssu_ids                  = 10;
    uint64                   customer_id              = 11;
    uint64                   service_period_id        = 12;
    uint64                   station_id               = 13;
    uint64                   quotation_id             = 14 [ (validate.rules).uint64 = {gt : 0} ];
    common.Filters.Bool      process                  = 15; // 1：在售，2：下架
    bool                     need_delete_data         = 16; // 需要删除的数据
    repeated string          customize_codes          = 17;
    common.Filters.Bool      need_package_work        = 18; // 进入打包流程
}

message ExportSsuResponse {
    asynctask.Task task = 1;
}

// sort 没加，需要放到缓存里排序
message GetManySkuRequest {
    enum RequestData {
        RD_UNSPECIFIED = 0;
        SSU            = 256;  // 2^8 是否返回SSU
        PRICE          = 512;  // 2^9 是否返回价格
        CATEGORY       = 1024; // 2^10 是否返回分类
    }

    repeated uint64          category_ids             = 1;
    repeated uint64          spu_ids                  = 2;
    repeated uint64          sku_ids                  = 3;
    repeated string          customize_codes          = 4;
    Sku.SkuType              sku_type                 = 6;
    string                   q                        = 7;
    uint32                   request_data             = 8; // enum RequestData
    common.Filters.Bool      process                  = 9;
    Sku.NotPackageSubSkuType not_package_sub_sku_type = 10;
    Sku.PackageSubSkuType    package_sub_sku_type     = 11;
}

message GetManySkuResponse {
    message SkuInfo {
        repeated CategoryInfo category_infos = 41; // [分类1, 分类2, spu]
        Sku                   sku            = 2;
        map<uint64, SsuInfo>  ssu_map        = 3; // key是unit_id
    }
    map<uint64, SkuInfo>      sku_map = 1; // key是sku_id
    ceres.common.PagingResult paging  = 2;
}

message GetSkuSnapRequest {
    uint64 sku_id       = 1;
    uint64 sku_revision = 2;
}

message GetSkuSnapResponse {
    Sku sku = 1;
}

message SkuSnapID {
    uint64 sku_id       = 1;
    uint64 sku_revision = 2;
}

message GetManySkuSnapRequest {
    repeated SkuSnapID sku_snap_ids = 1;
}

message GetManySkuSnapResponse {
    map<string, Sku> sku_snap_map = 1; // key是 "{sku_id}-{sku_revision}"，例如 "1234111-1231111"
}

message CreateSkuRequest {
    Sku sku = 1 [ (validate.rules).message = {required : true} ];
}

message CreateSkuResponse {
    Sku sku = 1;
}

message UpdateSkuRequest {
    Sku sku = 1 [ (validate.rules).message = {required : true} ];
}

message UpdateSkuResponse {
    Sku sku = 1;
}

message CreateSsuRequest {
    Ssu                 ssu          = 1 [ (validate.rules).message = {required : true} ];
    repeated BasicPrice basic_prices = 2;
}

message CreateSsuResponse {
    Ssu                 ssu          = 1;
    repeated BasicPrice basic_prices = 2;
}

message GetSsuSnapRequest {
    uint64 sku_id       = 1;
    uint64 unit_id      = 2;
    uint64 ssu_revision = 3;
}

message GetSsuSnapResponse {
    Ssu ssu = 1;
}

message SsuSnapID {
    uint64 sku_id       = 1;
    uint64 unit_id      = 2;
    uint64 ssu_revision = 3;
}

message GetManySsuSnapRequest {
    repeated SsuSnapID ssu_snap_ids = 1;
}

message GetManySsuSnapResponse {
    map<string, Ssu> ssu_snap_map = 1; // key是 "{sku_id}_{unit_id}_{ssu_revision}"，例如 "1234111-2-1231111"
}

message DeleteSkuRequest {
    uint64 sku_id = 1 [ (validate.rules).uint64 = {gt : 0} ];
}

message DeleteSkuResponse {
    Sku sku = 1;
}

message SsuId {
    uint64 sku_id  = 1 [ (validate.rules).uint64 = {gt : 0} ];
    uint64 unit_id = 2 [ (validate.rules).uint64 = {gt : 0} ];
}

message GetSsuRequest {
    SsuId  ssu_id         = 1;
    string customize_code = 2; //
}

message GetSsuResponse {
    Ssu                 ssu          = 1;
    repeated BasicPrice basic_prices = 2;
}

message BasicPriceId {
    uint64 quotation_id = 1 [ (validate.rules).uint64 = {gt : 0} ]; //quotation_id,sku_id,unit_id确定一个价格
    uint64 sku_id       = 2 [ (validate.rules).uint64 = {gt : 0} ];
    uint64 unit_id      = 3 [ (validate.rules).uint64 = {gt : 0} ];
}

message UpdateSsuRequest {
    Ssu                 ssu          = 1 [ (validate.rules).message = {required : true} ];
    repeated BasicPrice basic_prices = 2; //新建或者修改的基本价格
}

message UpdateSsuResponse {
    Ssu                 ssu          = 1;
    repeated BasicPrice basic_prices = 2;
}

message DeleteSsuRequest {
    SsuId ssu_id = 1 [ (validate.rules).message = {required : true} ];
}

message DeleteSsuResponse {
    Ssu ssu = 1;
}

message BatchUpdateSkuSsuRequest {
    string file_url = 1 [ (validate.rules).string = {min_len : 1} ];
}

message BatchUpdateSkuSsuResponse {
    asynctask.Task task = 1;
}

message BatchCreateCategorySkuRequest {
    string file_url = 1 [ (validate.rules).string = {min_len : 1} ];
}

message BatchCreateCategorySkuResponse {
    asynctask.Task task = 1;
}

message BatchCreateSsuRequest {
    string file_url = 1 [ (validate.rules).string = {min_len : 1} ];
}

message BatchCreateSsuResponse {
    asynctask.Task task = 1;
}

message ListSsuRequest { //spu不算分类
    repeated uint64           category_ids             = 1;
    repeated uint64           spu_ids                  = 2;
    repeated uint64           sku_ids                  = 3;
    string                    q                        = 4;
    common.Filters.Bool       has_image                = 5; // 1：有图片，2：没有图片
    common.Filters.Bool       on_sale                  = 6; // 1：在售，2：下架
    Sku.SkuType               sku_type                 = 7; // 1：有图片，2：没有图片
    Sku.NotPackageSubSkuType  not_package_sub_sku_type = 8; // 1：在售，2：下架
    Sku.PackageSubSkuType     package_sub_sku_type     = 9; // 1：在售，2：下架
    repeated SsuId            ssu_ids                  = 10;
    common.Filters.Bool       process                  = 11; // 1：在售，2：下架
    repeated string           customize_codes          = 12;
    bool                      need_delete_data         = 13; // 需要删除的数据
    common.Filters.Bool       need_package_work        = 14; // 进入打包流程
    ceres.common.PagingParams paging                   = 20 [ (validate.rules).message = {required : true} ];
}

message CategoryInfo {
    string category_name = 1;
    uint64 category_id   = 2;
}

message ListSsuResponse { //spu不算分类
    repeated SsuInfo          ssu_infos = 1;
    ceres.common.PagingResult paging    = 2;
    message                   SsuInfo {
        Ssu                   ssu            = 1;
        repeated BasicPrice   basic_prices   = 2;
        Sku                   sku            = 3;
        repeated CategoryInfo category_infos = 4; // [分类1, 分类2, spu]
    }
}

message ListSsuByCustomerOrQuotationRequest { //spu不算分类
    repeated uint64           category_ids             = 1;
    repeated uint64           spu_ids                  = 2;
    repeated uint64           sku_ids                  = 3;
    string                    q                        = 4;
    common.Filters.Bool       has_image                = 5; // 1：有图片，2：没有图片
    common.Filters.Bool       on_sale                  = 6; // 1：在售，2：下架
    Sku.SkuType               sku_type                 = 7; // 1：有图片，2：没有图片
    Sku.NotPackageSubSkuType  not_package_sub_sku_type = 8; // 1：在售，2：下架
    Sku.PackageSubSkuType     package_sub_sku_type     = 9; // 1：在售，2：下架
    repeated SsuId            ssu_ids                  = 10;
    uint64                    customer_id              = 11;
    uint64                    service_period_id        = 12;
    uint64                    station_id               = 13;
    uint64                    quotation_id             = 14;
    common.Filters.Bool       process                  = 15; // 1：在售，2：下架
    bool                      need_delete_data         = 16; // 需要删除的数据
    repeated string           customize_codes          = 17;
    common.Filters.Bool       need_package_work        = 18; // 进入打包流程
    uint64                    group_id                 = 19;
    ceres.common.PagingParams paging                   = 40 [ (validate.rules).message = {required : true} ];
}

message ListSsuByCustomerOrQuotationResponse { //spu不算分类
    repeated SsuTotalInfo     ssu_infos = 1;
    ceres.common.PagingResult paging    = 2;
}

message ExportSsuData { //spu不算分类
    repeated SsuInfo ssu_infos = 1;
    message          SsuInfo {
        Ssu                   ssu                         = 1;
        string                price                       = 2;
        Sku                   sku                         = 3;
        BasicPrice            basic_price                 = 4;
        repeated CategoryInfo category_infos              = 5; // [分类1, 分类2, spu]
        string                purchase_ssu_customize_code = 6;
    }
}

message CreateRuleSetRequest {
    RuleSet rule_set        = 1 [ (validate.rules).message = {required : true} ];
    bool    ignore_conflict = 2; // TRUE: 发生冲突时，将老规则里冲突的ssu删除，新规则生成成功；FALSE：发生冲突时，返回冲突，新规则生成失败
}

message CreateRuleSetResponse {
    RuleSet                       rule_set          = 1;
    map<uint64, RuleConflictData> conflict_data_map = 2; // 规则冲突了。ssu在当前报价单下且当前运营时间下,已经有规则。key 是rule_set_id,value 是这个rule_set下冲突的ConflictData
}

message RuleConflictData {
    repeated SsuId  ssu_ids            = 1;
    repeated uint64 customer_ids       = 2;
    repeated uint64 service_period_ids = 3;
}

message UpdateRuleSetRequest {
    RuleSet rule_set        = 1 [ (validate.rules).message = {required : true} ];
    bool    ignore_conflict = 2; // TRUE: 发生冲突时，将老规则里冲突的ssu删除，新规则生成成功；FALSE：发生冲突时，返回冲突，新规则生成失败
}

message UpdateRuleSetResponse {
    RuleSet                       rule_set          = 1;
    map<uint64, RuleConflictData> conflict_data_map = 2; // 规则冲突了。ssu在当前报价单下且当前运营时间下,已经有规则。key 是rule_set_id,value 是这个rule_set下冲突的ConflictData
}

message DeleteRuleSetRequest {
    uint64 rule_set_id = 1 [ (validate.rules).uint64 = {gt : 0} ];
}

message DeleteRuleSetResponse {
    RuleSet rule_set = 1;
}

message GetRuleSetRequest {
    uint64 rule_set_id = 1 [ (validate.rules).uint64 = {gt : 0} ];
}

message GetRuleSetResponse {
    RuleSet rule_set = 1;
}

message ListRuleSetRequest {
    RuleSet.State             state  = 1; // 状态
    string                    q      = 2; // 搜索协议单名字
    ceres.common.PagingParams paging = 3;
}

message ListRuleSetResponse {
    repeated RuleSet          rule_set      = 1;
    map<uint64, Quotation>    quotation_map = 2; // 报价单map
    ceres.common.PagingResult paging        = 3;
}
message CreateUnitRequest {
    Unit unit = 1;
}

message CreateUnitResponse {
    Unit unit = 1;
}

message ListUnitRequest {
    uint64          related_unit_id = 1; // 找出这个单位对应type的所有单位。比如吨的type是重量，这个字段传吨的ID，会返回所有重量相关的unit
    repeated uint64 unit_ids        = 2; // 找到此id对应的单位
}

message ListUnitResponse {
    repeated Unit units = 1;
}

message GetUnitRateGroupRequest {
    message UnitIdGroup {
        uint64 unit_id_1 = 1 [ (validate.rules).uint64 = {gt : 0} ];
        uint64 unit_id_2 = 2 [ (validate.rules).uint64 = {gt : 0} ];
    }
    repeated UnitIdGroup unit_id_groups = 1 [ (validate.rules).repeated = {min_items : 1} ];
}

message GetUnitRateGroupResponse {
    message UnitRateGroup {
        uint64 unit_id_1 = 1;
        uint64 unit_id_2 = 2;
        string rate      = 3; // unit_id_1/unit_id_2
    }
    repeated UnitRateGroup unit_rate_groups = 1;
}

message InitUnitRequest {
}

message InitUnitResponse {
}

message InitCategoryImageRequest {
    bool testing = 1; // 如果 testing 为 true，则不会真的上传图片，用于单元测试的场景中。
}
message InitCategoryImageResponse {
}

message ListCategoryImageRequest {}
message ListCategoryImageResponse {
    repeated CategoryImage images = 1;
}

// Quotation 报价单
message GetQuotationRequest {
    uint64 quotation_id = 1 [ (validate.rules).uint64 = {gt : 0} ];
}

message GetQuotationResponse {
    Quotation quotation = 1;
}

message CreateQuotationRequest {
    Quotation quotation = 1 [ (validate.rules).message = {required : true} ];
}

message CreateQuotationResponse {
    Quotation quotation = 1;
}

message UpdateQuotationRequest {
    Quotation quotation = 1 [ (validate.rules).message = {required : true} ];
}

message UpdateQuotationResponse {
    Quotation quotation = 1;
}

message DeleteQuotationRequest {
    uint64 quotation_id = 1 [ (validate.rules).uint64 = {gt : 0} ];
}

message DeleteQuotationResponse {
    Quotation quotation = 1;
}

message ListQuotationRequest {
    string              q                    = 1; // 报价单名称和报价单id
    common.Filters.Bool is_active            = 2; // 是否激活
    common.Filters.Bool is_default           = 8; // 是否默认报价单
    bool                need_ssu_on_sale_num = 3; //需要在售商品数
    common.PagingParams paging               = 4 [ (validate.rules).message = {required : true} ];
}

message ListQuotationResponse {
    repeated Quotation  quotations          = 1;
    map<uint64, int32>  ssu_on_sale_num_map = 2; // key:quotation_id, value:在售商品数量
    common.PagingResult paging              = 3;
}

message GetManyQuotationRequest {
    repeated uint64 quotation_ids = 1 [ (validate.rules).repeated = {min_items : 0} ];
}

message GetManyQuotationResponse {
    map<uint64, Quotation> quotation_map = 1;
}

message SetCustomerQuotationRelationRequest {
    message RelationElement {
        uint64 customer_id  = 1;
        uint64 quotation_id = 2;
        uint64 station_id   = 3;
    }
    repeated RelationElement relations = 1;
}

message SetCustomerQuotationRelationResponse {
    // 不返回
}

message DeleteCustomerQuotationRelationRequest {
    repeated uint64 customer_ids = 1;
}

message DeleteCustomerQuotationRelationResponse {
    // 不返回
}

message GetCustomerIdsByQuotationIdRequest {
    uint64 quotation_id = 1 [ (validate.rules).uint64 = {gt : 0} ];
}

message GetCustomerIdsByQuotationIdResponse {
    repeated uint64 customer_ids = 1;
}

message GetQuotationByCustomerIdRequest {
    uint64 customer_id = 1 [ (validate.rules).uint64 = {gt : 0} ];
    uint64 station_id  = 2;
}

message GetQuotationByCustomerIdResponse {
    repeated Quotation quotation = 1;
}

message GetQuotationIdsByCustomerIdsRequest {
    repeated uint64 customer_ids = 1 [ (validate.rules).repeated = {min_items : 1} ];
}

message GetQuotationIdsByCustomerIdsResponse {
    map<uint64, common.Uint64Set> relation_map = 1; // key 是 CustomerId；value 是 QuotationIds
}

message GetCustomerQuotationRelationRequest {
    repeated uint64 quotation_ids = 1; // 如果不为空，则返回和这些 ID 有关的所有关系。quotation_ids 和 customer_ids 两个参数至少传一个。
    repeated uint64 customer_ids  = 2; // 如果不为空，则返回和这些 ID 有关的所有关系。quotation_ids 和 customer_ids 两个参数至少传一个。
}

message GetCustomerQuotationRelationResponse {
    message RelationElement {
        uint64 customer_id  = 1;
        uint64 quotation_id = 2;
        uint64 station_id   = 3;
    }
    repeated RelationElement relations = 1;
}

message DeleteBasicPriceRequest {
    BasicPriceId basic_price_id = 1;
}

message DeleteBasicPriceResponse {
    BasicPrice basic_price = 1;
}

// 所有模块存单位数量使用的结构体
message UnitQuantity {
    uint64 unit_id = 1;
    string amount  = 3;
}

message UnitPrice {
    uint64 unit_id = 1;
    string price   = 3;
}

/*

UnitValue 这个结构主要是方便获得某个单位的价格和数量的。
因为盘点了已知的场景，绝大多数的场景下是同时需要数量和价格的，那么和单位放在一起是最方便的结构
--------------
UnitValueSet 简单的理解就是一堆单位的数量价格的集合。
通常情况下，input只会有一个，calculate永远只会有一个
举例1：原商品定价是按斤定价，但是下单的时候，客户输入数量是按磅输入的，
那么此时的输入价格和输入数量都是按磅这个单位来，计算价格和计算数量按转换成斤的数量来

举例2：商品3斤/袋，按袋定价，10元/袋，客户下单1袋
那么此时的输入价格和输入数量都是按袋这个单位来，计算价格和计算数量也是袋
称重的时候称了4斤，那么输入价格和输入数量是按斤这个数量来，计算价格和计算数量是按斤转换的袋的数量来
input1.unit_id: 斤
input1.quantity: 4
input1.price: 3.33333333

calculate.unit_id: 袋
calculate.quantity: 4/3
calculate.price: 10

在称重客户需要输入两个单位的时候，input2就会发挥作用：
举例3：商品3斤/袋，按袋定价，10元/袋，客户下单1袋
那么此时的输入价格和输入数量都是按袋这个单位来，计算价格和计算数量也是袋
称重的时候称了1袋，4斤，那么输入价格和输入数量是按斤这个数量来，计算价格和计算数量是按斤转换的袋的数量来
input1.unit_id: 斤
input1.quantity: 4
input1.price: 3.33333333
input2.unit_id: 袋
input2.quantity: 1
input2.price: 10

calculate.unit_id: 袋
calculate.quantity: 1
calculate.price: 10

此时calculate的数量和价格是用更接近它的input单位转换而来的（转换路径更短）
--------------
此处顺便说一下四舍五入的设计。
目前的设计是后端保持10位整数，8位小数存储，前端展示的时候允许展示精度在8位及以下随意切换（初期默认2位，后期加配置）
因此前端需要关注三种数量/价格，用户输入的、后端传给前端的/前端回传后端的、页面展示的
1. 凡用户输入的数据，精度和前端展示精度一致，比如展示配置精度4位，那么用户输入的值就是4位精度
2. 前后端之间的传值都以string形式进行保持精度稳定不丢失
3. 在2的基础上，后端传给前端的数据始终保持8位精度，前端回传结构时应保持结构内的数据精度不变，还是8位（注意：这个区别于用户输入的数据）
4. 由于页面展示精度是会随着前端展示精度的修改而改变，因此后端不再计算和存储补差，补差的计算和展示变成纯前端展示行为

*/

message UnitValue {
    uint64 unit_id = 1 [ (validate.rules).uint64.gt = 0 ];
    // @inject_tag: type:"Decimal(18,8)"
    string quantity = 2;
    // @inject_tag: type:"Decimal(18,8)"
    string price = 3;
}

message UnitValueSet {
    UnitValue input     = 1; // 用户输入，前端填写
    UnitValue input2    = 2; // 用户输入2，目前只有订单中的出库数据和库存单据才会用到
    UnitValue calculate = 3; // 计价逻辑
}

message UnitStock {
    UnitValue base_unit = 1;
    UnitValue sku_unit  = 2;
}

message GetManySsuPriceRequest {
    message SsuIds {
        repeated SsuId ssu_id = 1;
    }
    map<uint64, SsuIds> ssu_id_map = 1; //key 是customer_id
}

message GetManySsuPriceResponse {
    map<string, string> price_map = 1; // key 是 "{customer_id}_{sku_id}_{unit_id}", value是价格
}
// 接口 返回值可选, 返回用map

message MerchandiseParam {
    message ElemMap {
        map<string, string> elem = 1;
    }
    repeated ElemMap ssus = 1;
    repeated ElemMap skus = 2;
}

message SyncSsuImageRequest {
    uint64 sku_id = 1 [ (validate.rules).uint64 = {gt : 0} ];
}

message SyncSsuImageResponse {
}

message CreateFavoriteRequest {
    Favorite favorite = 1;
}

message CreateFavoriteResponse {
    Favorite favorite = 1;
}

message UpdateFavoriteRequest {
    Favorite favorite = 1;
}

message UpdateFavoriteResponse {
    Favorite favorite = 1;
}

message DeleteFavoriteRequest {
    uint64 favorite_id = 1;
}

message DeleteFavoriteResponse {
    Favorite favorite = 1;
}

message ListFavoriteRequest {
}

message ListFavoriteResponse {
    repeated Favorite favorites = 1;
}

message CreateFavoriteSsuRequest {
    FavoriteSsu favorite_ssu = 1;
}

message CreateFavoriteSsuResponse {
    FavoriteSsu favorite_ssu = 1;
}

message DeleteFavoriteSsuRequest {
    uint64 favorite_ssu_id = 1;
}

message DeleteFavoriteSsuResponse {
    FavoriteSsu favorite_ssu = 1;
}

message ListFavoriteSsuRequest {
    uint64              favorite_id = 1;
    common.PagingParams paging            = 2 [ (validate.rules).message = {required : true} ];
}

message ListFavoriteSsuResponse {
    repeated SsuTotalInfo     ssu_infos = 1;
    ceres.common.PagingResult paging    = 2;
}