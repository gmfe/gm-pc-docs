// protolint:disable ENUM_FIELD_NAMES_ZERO_VALUE_END_WITH
syntax = "proto3";

package ceres.common;
option  java_multiple_files = true;
option  go_package          = "code.guanmai.cn/back_end/ceres/common/proto;proto";
import "./include/protoc-gen-validate/validate.proto";

// gRPC status code
message Status {
    enum Code {
        /********* 以下是 gRPC 官方预定义的状态码 *********/

        // OK is returned on success.
        OK = 0;

        // Canceled indicates the operation was canceled (typically by the caller).
        CANCELED = 1;

        // Unknown error. An example of where this error may be returned is
        // if a Status value received from another address space belongs to
        // an error-space that is not known in this address space. Also
        // errors raised by APIs that do not return enough error information
        // may be converted to this error.
        UNKNOWN = 2;

        // InvalidArgument indicates client specified an invalid argument.
        // Note that this differs from FailedPrecondition. It indicates arguments
        // that are problematic regardless of the state of the system
        // (e.g., a malformed file name).
        INVALID_ARGUMENT = 3;

        // DeadlineExceeded means operation expired before completion.
        // For operations that change the state of the system, this error may be
        // returned even if the operation has completed successfully. For
        // example, a successful response from a server could have been delayed
        // long enough for the deadline to expire.
        DEADLINE_EXCEEDED = 4;

        // NotFound means some requested entity (e.g., file or directory) was
        // not found.
        NOT_FOUND = 5;

        // AlreadyExists means an attempt to create an entity failed because one
        // already exists.
        ALREADY_EXISTS = 6;

        // PermissionDenied indicates the caller does not have permission to
        // execute the specified operation. It must not be used for rejections
        // caused by exhausting some resource (use ResourceExhausted
        // instead for those errors). It must not be
        // used if the caller cannot be identified (use Unauthenticated
        // instead for those errors).
        PERMISSION_DENIED = 7;

        // ResourceExhausted indicates some resource has been exhausted, perhaps
        // a per-user quota, or perhaps the entire file system is out of space.
        RESOURCE_EXHAUSTED = 8;

        // FailedPrecondition indicates operation was rejected because the
        // system is not in a state required for the operation's execution.
        // For example, directory to be deleted may be non-empty, an rmdir
        // operation is applied to a non-directory, etc.
        //
        // A litmus test that may help a service implementor in deciding
        // between FailedPrecondition, Aborted, and Unavailable:
        //  (a) Use Unavailable if the client can retry just the failing call.
        //  (b) Use Aborted if the client should retry at a higher-level
        //      (e.g., restarting a read-modify-write sequence).
        //  (c) Use FailedPrecondition if the client should not retry until
        //      the system state has been explicitly fixed. E.g., if an "rmdir"
        //      fails because the directory is non-empty, FailedPrecondition
        //      should be returned since the client should not retry unless
        //      they have first fixed up the directory by deleting files from it.
        //  (d) Use FailedPrecondition if the client performs conditional
        //      REST Get/Update/Delete on a resource and the resource on the
        //      server does not match the condition. E.g., conflicting
        //      read-modify-write on the same resource.
        FAILED_PRECONDITION = 9;

        // Aborted indicates the operation was aborted, typically due to a
        // concurrency issue like sequencer check failures, transaction aborts,
        // etc.
        //
        // See litmus test above for deciding between FailedPrecondition,
        // Aborted, and Unavailable.
        ABORTED = 10;

        // OutOfRange means operation was attempted past the valid range.
        // E.g., seeking or reading past end of file.
        //
        // Unlike InvalidArgument, this error indicates a problem that may
        // be fixed if the system state changes. For example, a 32-bit file
        // system will generate InvalidArgument if asked to read at an
        // offset that is not in the range [0,2^32-1], but it will generate
        // OutOfRange if asked to read from an offset past the current
        // file size.
        //
        // There is a fair bit of overlap between FailedPrecondition and
        // OutOfRange. We recommend using OutOfRange (the more specific
        // error) when it applies so that callers who are iterating through
        // a space can easily look for an OutOfRange error to detect when
        // they are done.
        OUT_OF_RANGE = 11;

        // Unimplemented indicates operation is not implemented or not
        // supported/enabled in this service.
        UNIMPLEMENTED = 12;

        // Internal errors. Means some invariants expected by underlying
        // system has been broken. If you see one of these errors,
        // something is very broken.
        INTERNAL = 13;

        // Unavailable indicates the service is currently unavailable.
        // This is a most likely a transient condition and may be corrected
        // by retrying with a backoff. Note that it is not always safe to retry
        // non-idempotent operations.
        //
        // See litmus test above for deciding between FailedPrecondition,
        // Aborted, and Unavailable.
        UNAVAILABLE = 14;

        // DataLoss indicates unrecoverable data loss or corruption.
        DATA_LOSS = 15;

        // Unauthenticated indicates the request does not have valid
        // authentication credentials for the operation.
        UNAUTHENTICATED = 16;

        /********* 以下是我们自定义的通用状态码，范围是 1001~1999 *********/

        // 数据库错误
        DATABASE_ERROR = 1001;

        // 异步错误
        ASYNC_ERROR = 1002;

        // 缓存不存在
        CACHE_NOT_EXISTED = 1003;

        // 数据过期
        DATA_EXPIRED = 1004;

        // 自定义编码重复
        DUPLICATE_CUSTOMIZED_CODE = 1005;

        // redis数据库错误
        REDIS_ERROR = 1006;
        // redis锁定中
        REDIS_LOCKED = 1007;
    }

    message InvalidArgumentDetail {
        string reason = 1;
    }
}

message Uint64Set {
    repeated uint64 values = 1;
}

message StringSet {
    repeated string values = 1;
}

message Model {
    enum Type {
        TYPE_UNSPECIFIED = 0;

        TYPE_ACCOUNT_ACCOUNT = 1; // 账号

        TYPE_PRODUCTION_PROCESSTYPE     = 2;  // 工序类型
        TYPE_PRODUCTION_PROCESSTEMPLATE = 3;  // 工序模板
        TYPE_PRODUCTION_PROCESSOR       = 4;  // 工厂模型
        TYPE_PRODUCTION_BOM             = 5;  // bom
        TYPE_PRODUCTION_TASK            = 6;  // 任务
        TYPE_PRODUCTION_TASKINPUT       = 7;  // 任务原料
        TYPE_PRODUCTION_TASKPROCESS     = 8;  // 任务工序
        TYPE_PRODUCTION_TASKWEIGHT      = 47; // 任务定重
        TYPE_PRODUCTION_TASKOUTPUT      = 66; // 任务产出

        TYPE_INVENTORY_STOCKSHEET       = 9;  // 库存单据
        TYPE_INVENTORY_STOCKLOG         = 10; // 库存记录
        TYPE_INVENTORY_BATCHLOG         = 11; // 批次记录
        TYPE_INVENTORY_SHELF            = 12; // 货位
        TYPE_INVENTORY_BATCH            = 13; // 批次
        TYPE_INVENTORY_SKUUNITSTOCK     = 14; // SSU库存
        TYPE_INVENTORY_SKUSTOCK         = 15; // SKU 库存
        TYPE_INVENTORY_STATEMENT        = 16; // 供应商结款单
        TYPE_INVENTORY_ADJUSTSHEET      = 17; // 调整单
        TYPE_INVENTORY_ADJUSTLOG        = 18; // 调整记录
        TYPE_INVENTORY_CUSTOMERTURNOVER = 19; // 商户周转物
        TYPE_INVENTORY_REPLACE          = 20; //  填充单

        TYPE_ORDER_ORDER                   = 21; //订单
        TYPE_ORDER_ORDER_DETAIL            = 22; //订单详情
        TYPE_ORDER_ORDER_IMPORT_TEMPLETE   = 23; //订单自定义导入模板
        TYPE_ORDER_ESHOP_ORDER             = 48; //eshop订单
        TYPE_ORDER_ESHOP_ORDER_DETAIL      = 49; //eshop订单详情
        TYPE_ORDER_ESHOP_MENU_PERIOD_GROUP = 70; //eshop餐次组
        TYPE_ORDER_ESHOP_LEAVE_APPLICATION = 71; //eshop请假
        TYPE_ORDER_ESHOP_MENU              = 72; //eshop菜谱
        TYPE_ORDER_ESHOP_MENU_DETAIL       = 73; //eshop菜谱详情

        TYPE_ENTERPRISE_GROUP                   = 24; // Group
        TYPE_ENTERPRISE_GROUP_USER              = 25; // Group 用户
        TYPE_ENTERPRISE_STATION                 = 26; // 站点
        TYPE_ENTERPRISE_CUSTOMER                = 27; // 商户
        TYPE_ENTERPRISE_CUSTOMER_USER           = 28; // 商户用户
        TYPE_ENTERPRISE_CUSTOMER_LABEL          = 45; // 商户标签
        TYPE_ENTERPRISE_SERVICE_PERIOD          = 29; // 运营周期
        TYPE_ENTERPRISE_SUPPLIER                = 30; // 供应商
        TYPE_ENTERPRISE_DISTRIBUTION_CONTRACTOR = 31; // 配送承包商
        TYPE_ENTERPRISE_ROLE                    = 32; // 角色
        TYPE_ENTERPRISE_INVITATION_CODE         = 34; // 邀请码
        TYPE_ENTERPRISE_SHOP_DIY_SETTING        = 46 [ deprecated = true ];

        TYPE_PURCHASE_TASK          = 35; //采购任务
        TYPE_PURCHASE_SHEET         = 36; //采购单
        TYPE_PURCHASE_BATCH         = 37; //采购波次
        TYPE_PURCHASE_INQUIRY_PRICE = 38; //采购询价
        TYPE_PURCHASE_SRC_RELATION  = 50; //采购来源关系表

        TYPE_OPERATION_OPERATION = 39; // 操作日志

        TYPE_MERCHANDISE_CATEGORY     = 40;  // 分类
        TYPE_MERCHANDISE_SPU          = 41;  // SPU
        TYPE_MERCHANDISE_SKU          = 42;  // SKU
        TYPE_MERCHANDISE_QUOTATION    = 43;  // 报价单
        TYPE_MERCHANDISE_FAVORITE     = 100; // 收藏夹
        TYPE_MERCHANDISE_FAVORITE_SSU = 101; // 被收藏的商品

        TYPE_ASYNCTASK_TASK = 44; // 异步任务

        TYPE_SORTING_TAG           = 51; //分拣标签
        TYPE_SORTING_SKU_GROUP     = 52; //分拣组
        TYPE_SORTING_BASKET        = 53; //分拣框
        TYPE_SORTING_SKU_GROUP_SKU = 65; // 分拣组所属的sku

        TYPE_ROUTE          = 54; // 路线
        TYPE_MENU           = 55; // 菜谱
        TYPE_MENU_DETAIL_ID = 56; // 菜谱详情id

        TYPE_PREFERENCE_PRINTING_TEMPLATE             = 57; // 采购打印模版
        TYPE_PREFERENCE_INNER_LABEL_PRINTING_TEMPLATE = 58; // 内标打印模版
        TYPE_PREFERENCE_SHOP                          = 59; // 商城
        TYPE_PREFERENCE_SHOP_LAYOUT_SETTINGS          = 60; // 商城首页配置（商城装修）
        TYPE_PREFERENCE_SHOP_BANNER                   = 67; // 商城 Banner

        TYPE_PURCHASE_SETTINGS     = 61; // 采购设置
        TYPE_INVENTORY_SETTINGS    = 62; // 进销存设置
        TYPE_APPOINT_TIME_SETTINGS = 63; // 交期设置
        TYPE_PRECISION_SETTINGS    = 64; // 精度设置
        TYPE_SORTING_SETTINGS      = 68; // 分拣设置
        TYPE_PRODUCTION_SETTINGS   = 74; // 生产设置

        // 售后
        TYPE_AFTER_SALE_ORDER        = 80; // 售后订单
        TYPE_AFTER_SALE_ORDER_DETAIL = 81; // 售后订单详情

        // BOSS
        TYPE_BOSS_PERMISSION_SET = 90; // 权限集合

        TYPE_DATA_SYNC_SEQUENCE       = 200; // 数据同步序列表
        TYPE_FINANCE_SETTLE           = 300; // 结算
        TYPE_FINANCE_AMOUNT_DISCOUNT  = 301; // 金额折让
        TYPE_FINANCE_TRANSACTION_FLOW = 302; // 交易流水
        TYPE_FINANCE_ACCOUNT_BALANCE  = 303; // 账户余额

        // 以下类型仅用于定义，不占用号段
        TYPE_FAKE_ANALYTICS_EXAMPLE        = 1000000; // 统计模块测试数据
        TYPE_FAKE_ANALYTICS_EXAMPLE_TYPE_B = 1000001; // 统计模块测试数据，另外一种ModelType
    }
}

message Filters {
    // 由于 Go 语言的限制，所有类型为 bool 的变量都默认为 false，导致我们无法直接使用类型为 bool 的字段表达「不限制、只搜索 true、只搜索 false」这种三元搜索条件。
    // 为了这种情况，专门写了一个名为 Bool 的枚举，可以表达这类搜索条件
    enum Bool {
        ALL   = 0;
        TRUE  = 1;
        FALSE = 2;
    }
}

message App {
    // 应用类型，第一方占用1-10000
    enum Type {
        TYPE_UNSPECIFIED = 0; // 未使用
        TYPE_STATION     = 1; // station
        TYPE_BSHOP       = 2; // bshop商城
        TYPE_CSHOP       = 3; // cshop商城
        TYPE_ESHOP       = 4; // eshop商城
        TYPE_CMD         = 5; // 命令行工具
    }
}

message Image {
    enum Type {
        TYPE_UNSPECIFIED = 0;
        TYPE_QINIU       = 1; // 七牛云
        TYPE_TENCENT_COS = 2; // 腾讯云静态储存
    }

    Type   type   = 1 [ (validate.rules).message = {required: true} ]; // 储存图片的云服务提供商
    uint32 height = 2;                                              // 图片高度（单位：像素）
    uint32 weight = 3;                                              // 图片宽度（单位：像素）
    string path   = 4 [ (validate.rules).string = {min_len : 3} ];  // 图片路径，比如 "group_123/merchandise/ssu/674b84671ccd6b14c.png"
}

//////////////////////////////// 排序 ////////////////////////////////

// SortBy 描述了一个排序字段的信息。
//
// 关于排序的更多信息，请查看本工程的 README.md
//
message SortBy {
    int32 field = 1; // 需要排序的字段对应的枚举值。每个接口需要使用 `enum PagingField` 显示声明支持哪些排序字段。请查看本工程 README.md 获得完整的例子。
    bool  desc  = 2; // desc 为 true 则是降序排序，desc 为 false 则是升序排序
}

//////////////////////////////// 分页 ////////////////////////////////

/*
下面是一个使用分页的接口的 proto 定义例子：

    import "./common/proto/common.proto";
    import "./include/protoc-gen-validate/validate.proto";

    rpc ListBook(ListBookRequest) returns (ListBookResponse) {};

    message ListBookRequest {
        enum PagingField {
            UNKNOW = 0;
            NAME   = 1;
            AUTHOR = 2;
        }

        ceres.common.PagingParams paging = 1 [ (validate.rules).message.required = true ];
    }
    message ListBookResponse {
        repeated Book books = 1;
        ceres.common.PagingParams paging = 2;
    }

List 接口原则上都需要 paging 参数，并将其设置为必填参数（通过 protoc-gen-validate 实现）。
*/

// PagingParams 用于在请求中描述需要的分页参数
message PagingParams {
    // 跳过多少条数据
    uint32 offset   = 1;
    uint64 sequence = 3;

    // 如果为 true，则返回所有结果。limit 和 all 必须传且只传一个。使用 all 的时候必须非常谨慎，不要给服务器和数据库造成过大的压力。
    // 不排除未来移除这个参数的可能。
    bool all = 5;

    // 每一页返回多少条数据（由于 protobuf 的限制，每一次传输有默认 4MB 的大小限制，所以 limit 不能太大）
    uint32 limit = 2 [ (validate.rules).uint32 = {lte : 1000} ];

    // 是否需要返回 count。处于性能考虑，只有当 offset 为 0 且 need_count 为 true 时才会返回 count。
    bool need_count = 4;
}

// PagingResult 用于在响应中描述服务返回的分页信息
message PagingResult {
    bool   has_more = 1; // 是否还有更多数据
    uint32 count    = 4; // 当前搜索条件下，所有的数据数量为多少。
}

// 增量同步参数
message SyncOptions {
    // 数据类型
    Model.Type model_type = 1;

    // 分区
    uint64 partition = 2;

    // 同步最小版本号，即客户端已同步的最大版本号
    uint64 sequence_min = 3;
    // 同步最大版本号，用于规避“后生成的数据先写入数据库后，新生成的数据写入数据库前，这个时间窗口恰好有同步请求，那么后者将无法同步”的问题，要求业务对“实时”要求较低
    uint64 sequence_max = 4;

    // 分页大小，请勿修改validate.rules的gte
    uint32 limit = 6 [ (validate.rules).uint32 = {gte : 2, lte : 1000} ];
}

// 性别
enum Gender {
    GENDER_UNSPECIFIED = 0;
    GENDER_FEMALE      = 1;
    GENDER_MALE        = 2;
}
