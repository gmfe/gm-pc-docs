syntax = "proto3";

package ceres.wechat;
option  java_multiple_files = true;
option  go_package          = "code.guanmai.cn/back_end/ceres/WechatService/proto;proto";

import "./google/api/annotations.proto";

import "./common/proto/common.proto";

service WechatService {
    rpc GetToken(GetTokenRequest) returns (GetTokenResponse) {
        option (google.api.http) = {
            post : "/ceres/wechat/WechatService/GetToken"
            body : "*"
        };
    };
    rpc GetTicket(GetTicketRequest) returns (GetTicketResponse) {
        option (google.api.http) = {
            post : "/ceres/wechat/WechatService/GetTicket"
            body : "*"
        };
    };

    rpc GetSnsAccessToken(GetSnsAccessTokenRequest) returns (GetSnsAccessTokenResponse) {
        option (google.api.http) = {
            post : "/ceres/wechat/WechatService/GetSnsAccessToken"
            body : "*"
        };
    };
    rpc GetSnsUserInfo(GetSnsUserInfoRequest) returns (GetSnsUserInfoResponse) {
        option (google.api.http) = {
            post : "/ceres/wechat/WechatService/GetSnsUserInfo"
            body : "*"
        };
    };

    rpc GetWxaSession(GetWxaSessionRequest) returns (GetWxaSessionResponse) {
        option (google.api.http) = {
            post : "/ceres/wechat/WechatService/GetWxaSession"
            body : "*"
        };
    };
    rpc GetWxaUserInfo(GetWxaUserInfoRequest) returns (GetWxaUserInfoResponse) {
        option (google.api.http) = {
            post : "/ceres/wechat/WechatService/GetWxaUserInfo"
            body : "*"
        };
    };
    rpc GetWxaPhoneNumber(GetWxaPhoneNumberRequest) returns (GetWxaPhoneNumberResponse) {
        option (google.api.http) = {
            post : "/ceres/wechat/WechatService/GetWxaPhoneNumber"
            body : "*"
        };
    };
    rpc EncodeWxaScene(EncodeWxaSceneRequest) returns (EncodeWxaSceneResponse) {
        option (google.api.http) = {
            post : "/ceres/wechat/WechatService/EncodeWxaScene"
            body : "*"
        };
    };
    rpc DecodeWxaScene(DecodeWxaSceneRequest) returns (DecodeWxaSceneResponse) {
        option (google.api.http) = {
            post : "/ceres/wechat/WechatService/DecodeWxaScene"
            body : "*"
        };
    };

    rpc GetWxaCodeUnlimit(GetWxaCodeUnlimitRequest) returns (GetWxaCodeUnlimitResponse) {
        option (google.api.http) = {
            post : "/ceres/wechat/WechatService/GetWxaCodeUnlimit"
            body : "*"
        };
    };

    rpc AddWxaFormId(AddWxaFormIdRequest) returns (AddWxaFormIdResponse) {
        option (google.api.http) = {
            post : "/ceres/wechat/WechatService/AddWxaFormId"
            body : "*"
        };
    };

    rpc GetWxaCustomMessageResponder(GetWxaCustomMessageResponderRequest) returns (GetWxaCustomMessageResponderResponse) {
        option (google.api.http) = {
            post : "/ceres/wechat/WechatService/GetWxaCustomMessageResponder"
            body : "*"
        };
    };
    rpc SetWxaCustomMessageResponder(SetWxaCustomMessageResponderRequest) returns (SetWxaCustomMessageResponderResponse) {
        option (google.api.http) = {
            post : "/ceres/wechat/WechatService/SetWxaCustomMessageResponder"
            body : "*"
        };
    };
    rpc RecvWxaCustomMessage(RecvWxaCustomMessageRequest) returns (RecvWxaCustomMessageResponse) {
        option (google.api.http) = {
            post : "/ceres/wechat/WechatService/RecvWxaCustomMessage"
            body : "*"
        };
    };
    rpc SendWxaCustomMessage(SendWxaCustomMessageRequest) returns (SendWxaCustomMessageResponse) {
        option (google.api.http) = {
            post : "/ceres/wechat/WechatService/SendWxaCustomMessage"
            body : "*"
        };
    };
}

// 微信应用
message WXApp {
    string app_id = 1; // 微信app_id
    string name   = 2;

    string secret = 10; // 授权secret

    // 支付
    string pay_key        = 20; // 支付key
    string pay_mch_id     = 21; // 商户号
    string pay_notify_url = 22; // 通知接口
    string pay_cert_pem   = 23;
    string pay_key_pem    = 24;

    // 票据
    WXToken  token  = 100;
    WXTicket ticket = 101;
}

// 通用头部
message WXHeader {
    uint32 errcode = 1;
    string errmsg  = 2;
}

// 公众号 https://mp.weixin.qq.com/wiki?t=resource/res_main&id=mp1421140183
// 小程序 https://developers.weixin.qq.com/miniprogram/dev/api/token.html#%E8%8E%B7%E5%8F%96-accesstoken
message WXToken {
    string access_token = 1;
    uint64 expires_in   = 2;
}

message WXTicket {
    string ticket     = 1;
    uint64 expires_in = 2;
}

// 微信网页授权 https://mp.weixin.qq.com/wiki?t=resource/res_main&id=mp1421140842
message SnsAccessToken {
    string access_token  = 1; // 接口调用凭证
    uint32 expires_in    = 2; // access_token接口调用凭证超时时间，单位（秒）
    string refresh_token = 3; // 用户刷新access_token
    string openid        = 4; // 授权用户唯一标识
    string scope         = 5; // 用户授权的作用域，使用逗号（,）分隔
    string unionid       = 6;
}

// 微信网页用户信息 https://mp.weixin.qq.com/wiki?t=resource/res_main&id=mp1421140842
message SnsUserInfo {
    string          openid     = 1; // 普通用户的标识，对当前开发者帐号唯一
    string          nickname   = 2; // 普通用户昵称
    uint32          sex        = 3; // 普通用户性别，1为男性，2为女性
    string          province   = 4; // 普通用户个人资料填写的省份
    string          city       = 5; // 普通用户个人资料填写的城市
    string          country    = 6; // 国家，如中国为CN
    string          headimgurl = 7; // 用户头像，最后一个数值代表正方形头像大小（有0、46、64、96、132数值可选，0代表640*640正方形头像），用户没有头像时该项为空
    repeated string privilege  = 8; // 用户特权信息，json数组，如微信沃卡用户为（chinaunicom）
    string          unionid    = 9; // 用户统一标识。针对一个微信开放平台帐号下的应用，同一用户的unionid是唯一的
    string          language   = 10;
}

// 小程序登录 https://developers.weixin.qq.com/miniprogram/dev/api/api-login.html#wxloginobject
message WxaSession {
    // @inject_tag: gorm:"PRIMARY_KEY"
    string openid      = 1; // 用户唯一标识
    string session_key = 2; // 会话密钥
    string unionid     = 3; // 用户统一标识。针对一个微信开放平台帐号下的应用，同一用户的unionid是唯一的
}

// 小程序用户信息 https://developers.weixin.qq.com/miniprogram/dev/api/open.html#wxgetuserinfoobject
// 加密算法 https://developers.weixin.qq.com/miniprogram/dev/api/signature.html#wxchecksessionobject
message WxaUserInfo {
    // 复制SnsUserInfo
    // 微信那帮傻逼，定义的格式不一样
    string openid     = 1 [ json_name = "openId" ];    // 普通用户的标识，对当前开发者帐号唯一
    string nickname   = 2 [ json_name = "nickName" ];  // 普通用户昵称
    uint32 gender     = 3;                             // 普通用户性别，1为男性，2为女性
    string province   = 4;                             // 普通用户个人资料填写的省份
    string city       = 5;                             // 普通用户个人资料填写的城市
    string country    = 6;                             // 国家，如中国为CN
    string avatar_url = 7 [ json_name = "avatarUrl" ]; // 用户头像，最后一个数值代表正方形头像大小（有0、46、64、96、132数值可选，0代表640*640正方形头像），用户没有头像时该项为空
    string unionid    = 9 [ json_name = "unionId" ];   // 用户统一标识。针对一个微信开放平台帐号下的应用，同一用户的unionid是唯一的
    string language   = 10;
}

// 小程序用户手机 https://developers.weixin.qq.com/miniprogram/dev/api/getPhoneNumber.html
message WxaPhoneNumber {
    string phone_number      = 1; // 用户绑定的手机号（国外手机号会有区号）
    string pure_phone_number = 2; // 没有区号的手机号
    string country_code      = 3; // 区号
}

message WxaFormId {
    // @inject_tag: gorm:"PRIMARY_KEY"
    string form_id    = 1;
    uint64 status     = 2;
    uint64 revision   = 3;
    uint64 created_at = 4;
    uint64 updated_at = 5;

    uint32 app_id     = 10; // 应用
    uint64 account_id = 11; // 作者帐号
    string openid     = 12;
}

message WxaTemplateMsg {
    // @inject_tag: gorm:"PRIMARY_KEY"
    uint64 msg_id     = 1;
    uint64 status     = 2;
    uint64 revision   = 3;
    uint64 created_at = 4;
    uint64 updated_at = 5;

    uint32 app_id      = 10; // 应用
    uint64 account_id  = 11; // 接收者account_id
    string template_id = 12; // 模板ID
    uint64 sender_id   = 13; // 发送者
}

message WxaTemplate {
    uint64              id          = 1;
    string              app_id      = 2;
    string              template_id = 3;
    map<string, string> keywords    = 4;
}

// 微信神一样的数据模型定义
message WxaMedia {
    string type       = 1;
    string media_id   = 2;
    uint32 created_at = 3;
}

// https://developers.weixin.qq.com/miniprogram/dev/api/custommsg/receive.html
message WxaCustomMessageRecvType {
    string to_user_name   = 1 [ json_name = "ToUserName" ];
    string from_user_name = 2 [ json_name = "FromUserName" ];
    uint64 create_time    = 3 [ json_name = "CreateTime" ];
    uint64 msg_id         = 4 [ json_name = "MsgId" ];
    string msg_type       = 5 [ json_name = "MsgType" ]; // text|image|link|miniprogrampage

    // text
    string content = 10 [ json_name = "Content" ];

    // image
    string pic_url  = 20 [ json_name = "PicUrl" ];
    string media_id = 21 [ json_name = "MediaId" ];

    // link

    // miniprogrampage
    string title          = 40 [ json_name = "Title" ];
    string ppp_id         = 41 [ json_name = "AppId" ];
    string page_path      = 42 [ json_name = "PagePath" ];
    string thumb_url      = 43 [ json_name = "ThumbUrl" ];
    string thumb_media_id = 44 [ json_name = "ThumbMediaId" ];

    // event
    string event        = 50 [ json_name = "Event" ];
    string session_from = 51 [ json_name = "SessionFrom" ];
}

// https://developers.weixin.qq.com/miniprogram/dev/api/custommsg/conversation.html
message WxaCustomMessageSendType {
    string touser  = 1;
    string msgtype = 2; // text|image|link|miniprogrampage

    // text
    message Text {
        string content = 1;
    }
    Text text = 10;

    // image
    message Image {
        string media_id = 1;
    }
    Image image = 20;

    // link
    message Link {
        string title       = 1;
        string description = 2;
        string url         = 3;
        string thumb_url   = 4;
    }
    Link link = 30;

    // miniprogrampage
    message Miniprogrampage {
        string title          = 1;
        string pagepath       = 2;
        string thumb_media_id = 3;
    }
    Miniprogrampage miniprogrampage = 40;
}

message WxaCustomMessageResponder {
    // @inject_tag: gorm:"PRIMARY_KEY"
    uint64 responder_id = 1; // 会话来源，譬如content_id
    uint64 status       = 2;
    uint64 revision     = 3;
    uint64 created_at   = 4;
    uint64 updated_at   = 5;

    uint32 app_id = 10;

    message Rule {
        enum Status {
            STATUS_UNSPECIFIED = 0;
            STATUS_DEFAULT     = 1; // 默认
            STATUS_REGEX       = 2; // 正则匹配
        }

        uint64                   status   = 1; // 状态
        string                   content  = 2; // 文本，目前只支持文本
        WxaCustomMessageSendType response = 3; // 回复的消息
    }
    message Responder {
        repeated Rule rules = 1;
    }
    Responder responder = 20;
}

message Payment {
    enum Status {
        STATUS_UNSPECIFIED = 0;
        STATUS_REFUNDED    = 256; // 2^8 已退款
    }
    // @inject_tag: gorm:"PRIMARY_KEY"
    uint64 payment_id = 1;
    uint64 status     = 2;
    uint64 revision   = 3;
    uint64 created_at = 4;
    uint64 updated_at = 5;

    uint32 app_id     = 10; // 应用
    uint64 account_id = 11; // 帐号

    // 支付时需填写body, total_fee, spbill_create_ip, trade_type, openid
    // 提现时需填写body, total_fee, spbill_create_ip, openid
    string mch_id           = 20; // 商户号
    string body             = 21; // 商品描述
    string nonce_str        = 22; // 运行时随机生成
    string out_trade_no     = 23; // 商户系统内部订单号uuid
    uint64 total_fee        = 24; // 标价金额
    string spbill_create_ip = 25; // 终端IP
    string notify_url       = 26; // 基本url/appId/
    string trade_type       = 27; // 交易类型
    string openid           = 28; // 用户标识
    string sign_type        = 29; // 签名类型
    string prepay_id        = 30; // 预支付交易会话标识
    string code_url         = 31; // 二维码链接
    string transaction_id   = 32; // 微信订单号
    string trade_state      = 33; // 交易状态
    uint64 refund_fee       = 34; // 退款金额
    string out_refund_no    = 35; // 商户系统内部的退款单号uuid
    string refund_desc      = 36; // 退款描述信息
    uint64 refunded_at      = 37; // 退款时间
}

message Transfer {
    // @inject_tag: gorm:"PRIMARY_KEY"
    uint64 transfer_id = 1;
    uint64 status      = 2;
    uint64 revision    = 3;
    uint64 created_at  = 4;
    uint64 updated_at  = 5;

    uint32 app_id       = 10; // 应用
    uint64 account_id   = 11; // 帐号
    uint64 reference_id = 12; // 来源ID

    string mch_id           = 20; // 商户号
    string description      = 21; // 企业付款描述信息
    string partner_trade_no = 22; // 商户订单号uuid
    uint64 amount           = 23; // 金额
    string openid           = 24; // 用户标识
    string spbill_create_ip = 25; // 终端IP
    string transfer_state   = 26; // 状态
    string check_name       = 27; // 校验用户姓名选项，NO_CHECK：不校验真实姓名，FORCE_CHECK：强校验真实姓名
    string nonce_str        = 28; // 运行时随机生成
    string payment_no       = 29; // 企业付款成功，返回的微信订单号
    string payment_time     = 30; // 企业付款成功时间
}

message GetTokenRequest {
    string app_id  = 1;
    bool   refresh = 2;
}

message GetTokenResponse {
    WXToken token = 1;
}

message GetTicketRequest {
    string app_id  = 1;
    bool   refresh = 2;
}

message GetTicketResponse {
    WXTicket ticket = 1;
}

message GetSnsAccessTokenRequest {
    string app_id = 1; // 应用唯一标识，在微信开放平台提交应用审核通过后获得
    string code   = 2; // 填写第一步获取的code参数
}

message GetSnsAccessTokenResponse {
    SnsAccessToken access_token = 1;
}

message GetSnsUserInfoRequest {
    string app_id       = 1; // 应用唯一标识
    string access_token = 2; // 调用凭证
    string openid       = 3; // 普通用户的标识，对当前开发者帐号唯一
    string lang         = 4; // 可选，国家地区语言版本，zh_CN 简体，zh_TW 繁体，en 英语，默认为zh-CN
}

message GetSnsUserInfoResponse {
    SnsUserInfo user_info = 1;
}

message GetWxaSessionRequest {
    string app_id = 1; // 应用唯一标识
    string code   = 2; // 授权code
}

message GetWxaSessionResponse {
    WxaSession session = 1;
}

message GetWxaUserInfoRequest {
    string app_id         = 1; // 应用唯一标识
    string openid         = 2;
    string encrypted_data = 3; // getUserInfo返回数据
    string iv             = 4;
}

message GetWxaUserInfoResponse {
    WxaUserInfo user_info = 1;
}

message GetWxaPhoneNumberRequest {
    string app_id         = 1; // 应用唯一标识
    string openid         = 2;
    string encrypted_data = 3; // getPhoneNumber返回数据
    string iv             = 4;
}

message GetWxaPhoneNumberResponse {
    WxaPhoneNumber phone_number = 1;
}

message EncodeWxaSceneRequest {
    repeated uint64 values = 1;
}

message EncodeWxaSceneResponse {
    string scene = 1;
}

message DecodeWxaSceneRequest {
    string scene = 1;
}

message DecodeWxaSceneResponse {
    repeated uint64 values = 1;
}

message GetWxaCodeUnlimitRequest {
    string app_id = 1; // 应用唯一标识
    string scene  = 2; // 最大32个可见字符，只支持数字，大小写英文以及部分特殊字符：!#$&'()*+,/:;=?@-._~，其它字符请自行编码为合法字符（因不支持%，中文无法使用 urlencode 处理，请使用其他编码方式）
    string page   = 3; // 必须是已经发布的小程序存在的页面（否则报错），例如 "pages/index/index" ,根路径前不要填加'/',不能携带参数（参数请放在scene字段里），如果不填写这个字段，默认跳主页面
    uint32 width  = 4; // 二维码的宽度，默认430
}

message GetWxaCodeUnlimitResponse {
    bytes image = 1;
}

message AddWxaFormIdRequest {
    WxaFormId form_id = 1;
}

message AddWxaFormIdResponse {
    WxaFormId form_id = 1;
}

message SendWxaTemplateRequest {
    enum TemplateId {
        TEMPLATE_ID_UNSPECIFIED = 0;
    }

    uint32                        app_id           = 1; // 应用唯一标识
    uint64                        account_id       = 2; // 接收者account_id
    uint64                        template_id      = 3;
    string                        page             = 4;
    map<string, common.StringSet> keywords         = 5;
    string                        emphasis_keyword = 6;
    uint64                        interval         = 7; // 发送间隔
    uint64                        sender_id        = 8; // 发送者
}

message SendWxaTemplateResponse {
    WxaTemplateMsg msg = 1;
}

message GetWxaCustomMessageResponderRequest {
    uint64 responder_id = 1;
}

message GetWxaCustomMessageResponderResponse {
    WxaCustomMessageResponder responder = 1;
}

message SetWxaCustomMessageResponderRequest {
    WxaCustomMessageResponder responder = 1;
}

message SetWxaCustomMessageResponderResponse {
    WxaCustomMessageResponder responder = 1;
}

message RecvWxaCustomMessageRequest {
    WxaCustomMessageRecvType message = 1;
}

message RecvWxaCustomMessageResponse {
    WxaCustomMessageSendType message = 1;
}

message SendWxaCustomMessageRequest {
    WxaCustomMessageSendType message = 1;
}

message SendWxaCustomMessageResponse {
    WxaCustomMessageSendType message = 1;
}

// 小程序微信支付 https://pay.weixin.qq.com/wiki/doc/api/wxa/wxa_api.php?chapter=9_1
message AddPaymentRequest {
    Payment payment = 1;
}

message AddPaymentResponse {
    Payment payment = 1;

    message Params {
        string time_stamp = 1; // 时间戳从1970年1月1日00:00:00至今的秒数,即当前的时间
        string nonce_str  = 2;
        string pkg        = 3; // 统一下单接口返回的 prepay_id 参数值，提交格式如：prepay_id=*
        string sign_type  = 4; // 签名类型，默认为MD5，支持HMAC-SHA256和MD5。注意此处需与统一下单的签名类型一致
        string pay_sign   = 5; // 签名,
    }
    Params params = 2;
}

message SetPaymentRequest {
    Payment payment = 1;
}

message SetPaymentResponse {
    Payment payment = 1;
}

message GetPaymentRequest {
    uint64 payment_id = 1;
}

message GetPaymentResponse {
    Payment payment = 1;
}

message ListPaymentRequest {
    uint64 account_id = 1;
}

message ListPaymentResponse {
    repeated Payment payments = 1;
    uint32           count    = 2;
    bool             has_next = 3;
}

message TransferRequest {
    Transfer transfer = 1;
}

message TransferResponse {
    Transfer transfer = 1;
}

message RefundRequest {
    uint64 payment_id          = 1;
    uint64 refund_fee          = 2;
    uint64 refund_desc_note_id = 3;
    bool auto                  = 4; // 是否自动退款
}

message RefundResponse {
    Payment payment = 1;
}
