import * as order from '../order'
import * as common from '../common'
import * as enterprise from '../enterprise'
import * as account from '../account'
import * as dao from '../dao'
import * as idgenerator from '../idgenerator'
import * as merchandise from '../merchandise'
import * as asynctask from '../asynctask'
import * as oauth from '../oauth'
import * as inventory from '../inventory'
import * as preference from '../preference'
export interface Route {
  route_id: string
  creator_id?: string
  group_id?: string
  station_id?: string
  route_name: string
  create_time?: string
  update_time?: string
  delete_time?: string
  customers?: RouteCustomer[]
}
export interface ReqCreateRoute {
  // route_id: string
  creator_id?: string
  // group_id?: string
  station_id?: string
  route_name: string
  // create_time?: string
  // update_time?: string
  // delete_time?: string
  customers?: RouteCustomer[]
}
export interface RouteCustomer {
  route_customer_id: string
  route_id?: string
  customer_id: string
  group_id?: string
  station_id?: string
  create_time?: string
  update_time?: string
  delete_time?: string
}
export interface CreateRouteRequest {
  route?: ReqCreateRoute
}
export interface CreateRouteResponse {
  route: Route
}
export interface UpdateRouteRequest {
  route?: Route
}
export interface UpdateRouteResponse {
  route: Route
}
export interface GetRouteRequest {
  route_id?: string
  need_customer?: boolean
  need_district?: boolean
}
export interface GetRouteResponse {
  route: Route
  customers?: { [key: string]: enterprise.Customer }
  districts?: { [key: string]: enterprise.District }
}
export interface ListRouteRequest {
  q?: string
  paging: common.PagingParams
  need_group_user?: boolean
}
export interface ListRouteResponse {
  routes: Route[]
  paging: common.PagingResult
  group_users?: { [key: string]: enterprise.GroupUser }
}
export interface DeleteRouteRequest {
  route_id?: string
}
export interface DeleteRouteResponse {
  route: Route
}
export interface GetManyRouteRequest {
  route_ids?: string[]
}
export interface GetManyRouteResponse {
  routes: { [key: string]: Route }
}
export interface GetManyCustomerRouteRequest {
  customer_ids?: string[]
}
export interface GetManyCustomerRouteResponse {
  customer_routes?: { [key: string]: string }
  routes?: { [key: string]: Route }
}
export interface ListDriverDeliveryTaskRequest {
  common_list_order?: order.CommonListOrder
  q?: string
  paging: common.PagingParams
  need_distribution_contractor?: boolean
}
export interface ListDriverDeliveryTaskResponse_DriverDeliveryTask {
  driver?: enterprise.GroupUser
  customer_count?: number
  order_count?: number
  total_amount?: string
  order_ids?: string[]
}
export interface ListDriverDeliveryTaskResponse {
  driver_delivery_tasks: ListDriverDeliveryTaskResponse_DriverDeliveryTask[]
  paging: common.PagingResult
  distribution_contractors?: { [key: string]: enterprise.DistributionContractor }
}
export interface UpdateDeliveryTaskRequest {
  delivery_tasks?: order.Order[]
}
export interface UpdateDeliveryTaskResponse {
  delivery_tasks?: order.Order[]
}