import * as common from '../common'
import * as dao from '../dao'
import * as idgenerator from '../idgenerator'
import * as order from '../order'
import * as enterprise from '../enterprise'
import * as account from '../account'
import * as merchandise from '../merchandise'
import * as asynctask from '../asynctask'
import * as oauth from '../oauth'
import * as inventory from '../inventory'
import * as preference from '../preference'
import * as delivery from '../delivery'
export enum Status_Code {
  CODE_UNSPECIFIED = 0,
  SORTCONFLICT = 88480001,
  CANOTREVERT = 88480002,
  INVALIDMARKID = 88480003,
  DUPLICATE_SORTNG_SKU_GROUP_NAME = 88480004,
  DUPLICATE_SORTNG_BASKET_NAME = 88480005,
  SORTLOCK = 8848006,
}
export interface Status {
}
export enum OpType {
  OPTYPE_UNSPECIFIED = 0,
  SETWEIGHT = 1,
  CANCELWEIGHT = 2,
  SETOUTOFSTOCK = 3,
  CANCELOUTOFSTOCK = 4,
  SETSORTMARK = 5,
  CANCELSORTMARK = 6,
  REVERTLASTWEIGHT = 7,
}
export enum SortingTag_Type {
  TYPE_UNSPECIFIED = 0,
  NORMAL = 1,
  PRE = 2,
}
export interface SortingTag {
  sorting_tag_id?: string
  group_id?: string
  station_id?: string
  order_id?: string
  order_detail_id?: string
  sku_id?: string
  parent_id?: string
  type: SortingTag_Type
  sorting_quantity?: merchandise.UnitValueSet
  sorting_status?: order.SortingStatus
  create_time?: string
  update_time?: string
  delete_time?: string
}
export interface SortingLog_SortingQuantity {
  before_sorting_quantity?: merchandise.UnitValueSet
  after_sorting_quantity?: merchandise.UnitValueSet
}
export interface SortingLog {
  sorting_log_id: string
  order_id?: string
  group_id?: string
  station_id?: string
  order_detail_id?: string
  op_type: OpType
  before_status?: order.SortingStatus
  after_status?: order.SortingStatus
  sorting_operater_id?: string
  sorting_version?: string
  sorting_quantity?: SortingLog_SortingQuantity
  last?: boolean
  order_quantity?: merchandise.UnitValueSet
  create_time?: string
  update_time?: string
  delete_time?: string
}
export interface SortingSkuGroup {
  sorting_sku_group_id: string
  create_time?: string
  update_time?: string
  delete_time?: string
  skus?: SortingSkuGroupSku[]
  group_id?: string
  station_id?: string
  name?: string
}
export interface ReqCreateSortingSkuGroup {
  // sorting_sku_group_id: string
  // create_time?: string
  // update_time?: string
  // delete_time?: string
  skus?: SortingSkuGroupSku[]
  // group_id?: string
  station_id?: string
  name?: string
}
export interface SortingSkuGroupSku {
  sorting_sku_group_sku_id: string
  create_time?: string
  update_time?: string
  delete_time?: string
  sku_id?: string
  sorting_sku_group_id?: string
  group_id?: string
  station_id?: string
}
export interface SortingBasket {
  sorting_basket_id: string
  create_time?: string
  update_time?: string
  delete_time?: string
  basket_weight: string
  group_id?: string
  station_id?: string
  basket_name?: string
}
export interface ReqCreateSortingBasket {
  // sorting_basket_id: string
  // create_time?: string
  // update_time?: string
  // delete_time?: string
  basket_weight: string
  // group_id?: string
  station_id?: string
  basket_name?: string
}
export enum Weight {
  WEIGHT_UNSPECIFIED = 0,
  WEIGHT = 1,
  UNWEIGHT = 2,
}
export interface ListCategoryTreeRequest {
  service_period_id: string
  receive_date: string
  weight: Weight
}
export interface ListCategoryTreeResponse {
  categories?: merchandise.Category[]
  spus?: merchandise.Spu[]
  skus?: merchandise.Sku[]
}
export interface ListSortingSsuRequest {
  service_period_id: string
  receive_date: string
  sku_ids: string[]
  weight?: Weight
  paging: common.PagingParams
  q?: string
  order_state?: order.Order_State
}
export interface ListSortingSsuResponse {
  ssus?: merchandise.Ssu[]
  skus?: { [key: string]: merchandise.Sku }
  paging: common.PagingResult
}
export interface ListSortingTaskRequest {
  ssu_ids?: merchandise.SsuId[]
  service_period_id?: string
  receive_date?: string
  order_ids?: string[]
  order_detail_ids?: string[]
  paging: common.PagingParams
  need_customer_info?: boolean
  need_route_info?: boolean
  need_sku_info?: boolean
  weight?: Weight
  order_state?: order.Order_State
}
export interface ListSortingTaskResponse {
  sorting_tasks?: order.OrderDetail[]
  paging: common.PagingResult
  order_customer_info?: { [key: string]: string }
  customer_info?: { [key: string]: enterprise.Customer }
  customer_route_info?: { [key: string]: string }
  route_info?: { [key: string]: delivery.Route }
  sku_info?: { [key: string]: merchandise.Sku }
  sorting_num_info?: { [key: string]: string }
  category_info?: { [key: string]: string }
  category_relation?: { [key: string]: string }
}
export interface ListSsuSortingTaskRequest {
  quotation_ids?: string[]
  service_period_id?: string
  create_begin_time?: string
  create_end_time?: string
  receive_begin_tmie?: string
  receive_end_time?: string
  category_ids_1?: string[]
  category_ids_2?: string[]
  spu_ids?: string[]
  customize_code?: string
  ssu_name?: string
  paging: common.PagingParams
}
export interface ListSsuSortingTaskResponse_SsuSortingTask {
  ssu?: merchandise.Ssu
  sorting_tasks?: order.OrderDetail[]
}
export interface ListSsuSortingTaskResponse {
  ssu_sorting_tasks: ListSsuSortingTaskResponse_SsuSortingTask[]
  paging: common.PagingResult
  order_info?: { [key: string]: order.Order }
  customer_info?: { [key: string]: enterprise.Customer }
  quotation_info?: { [key: string]: merchandise.Quotation }
  category_info?: { [key: string]: string }
}
export interface GetLastSortingLogRequest {
  order_detail_id?: string
}
export interface GetLastSortingLogResponse {
  sorting_log?: SortingLog
}
export interface ListLastSortingLogRequest {
  order_detail_ids?: string[]
  paging: common.PagingParams
}
export interface ListLastSortingLogResponse {
  sorting_logs?: SortingLog[]
  paging: common.PagingResult
}
export interface UpdateSortingTaskRequest {
  sorting_tasks: order.OrderDetail[]
  op_type: OpType
}
export interface UpdateSortingTaskResponse {
  sorting_conflict?: boolean
  sorting_tasks?: order.OrderDetail[]
}
export interface CreatePreSortingTagRequest {
  sorting_tag: SortingTag
}
export interface CreatePreSortingTagResponse {
  sorting_tag?: SortingTag
}
export interface DeletePreSortingTagRequest {
  tag_id: string
}
export interface DeletePreSortingTagResponse {
  sorting_tag?: SortingTag
}
export interface GetPreSortingTagRequest {
  tag_id: string
}
export interface GetPreSortingTagResponse {
  sorting_tag?: SortingTag
}
export interface ListPreSortingTagRequest {
  paging: common.PagingParams
}
export interface ListPreSortingTagResponse {
  sorting_tags?: SortingTag[]
  paging: common.PagingResult
}
export interface UpdatePreSortingTagRequest {
  sorting_tag: SortingTag
}
export interface UpdatePreSortingTagResponse {
  sorting_tag?: SortingTag
}
export interface CreateSortingBasketRequest {
  sorting_basket: ReqCreateSortingBasket
}
export interface CreateSortingBasketResponse {
  sorting_basket: SortingBasket
}
export interface UpdateSortingBasketRequest {
  sorting_basket: SortingBasket
}
export interface UpdateSortingBasketResponse {
  sorting_basket: SortingBasket
}
export interface ListSortingBasketRequest {
  paging: common.PagingParams
}
export interface ListSortingBasketResponse {
  sorting_baskets: SortingBasket[]
  paging: common.PagingResult
}
export interface DeleteSortingBasketRequest {
  basket_id: string
}
export interface DeleteSortingBasketResponse {
  sorting_basket: SortingBasket
}
export interface CreateSortingSkuGroupRequest {
  sorting_sku_group: ReqCreateSortingSkuGroup
}
export interface CreateSortingSkuGroupResponse {
  sorting_sku_group: SortingSkuGroup
}
export interface UpdateSortingSkuGroupRequest {
  sorting_sku_group: SortingSkuGroup
}
export interface UpdateSortingSkuGroupResponse {
  sorting_sku_group: SortingSkuGroup
}
export interface ListSortingSkuGroupRequest {
  paging: common.PagingParams
}
export interface ListSortingSkuGroupResponse {
  sorting_sku_groups: SortingSkuGroup[]
  paging: common.PagingResult
}
export interface DeleteSortingSkuGroupRequest {
  sorting_group_id: string
}
export interface DeleteSortingSkuGroupResponse {
  sorting_sku_group: SortingSkuGroup
}
export interface GetSortingInfoRequest {
  service_period_id: string
  receive_date: string
}
export interface GetSortingInfoResponse_SortingInfoUnit {
  total_count?: number
  weight_count?: number
  out_stock_count?: number
  unweight_count?: number
}
export interface GetSortingInfoResponse_RelationInfo {
  customize_code?: string
  name?: string
}
export interface GetSortingInfoResponse {
  total_sorting_info?: GetSortingInfoResponse_SortingInfoUnit
  weight_task_count?: number
  unweight_task_count?: number
  ssu_count?: number
  customer_count?: number
  order_count?: number
  order_finish_count?: number
  order_sorting_info?: { [key: string]: GetSortingInfoResponse_SortingInfoUnit }
  category_sorting_info?: { [key: string]: GetSortingInfoResponse_SortingInfoUnit }
  ssu_sorting_info?: { [key: string]: GetSortingInfoResponse_SortingInfoUnit }
  order_customer_info?: { [key: string]: string }
  customer_info?: { [key: string]: GetSortingInfoResponse_RelationInfo }
  category_info?: { [key: string]: GetSortingInfoResponse_RelationInfo }
  ssu_info?: { [key: string]: GetSortingInfoResponse_RelationInfo }
}