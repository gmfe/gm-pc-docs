syntax = "proto3";

package ceres.sorting;
option java_multiple_files = true;
option go_package = "code.guanmai.cn/back_end/ceres/sorting/proto;proto";

import "./google/api/annotations.proto";
import "./common/proto/common.proto";
import "./cmd/protoc-gen-dao/proto/dao.proto";
import "./order/proto/order.proto";
import "./merchandise/proto/merchandise.proto";
import "./enterprise/proto/enterprise.proto";
import "./delivery/proto/delivery.proto";
import "./include/protoc-gen-validate/validate.proto";


service SortingService {
    // 分拣
    rpc ListCategoryTree(ListCategoryTreeRequest) returns (ListCategoryTreeResponse) {
        option (google.api.http) = {
            post : "/ceres/sorting/SortingService/ListCategoryTree"
        };
    };
    rpc ListSortingSsu(ListSortingSsuRequest) returns (ListSortingSsuResponse) {
        option (google.api.http) = {
            post : "/ceres/sorting/SortingService/ListSortingSsu"
        };
    };
    rpc ListSortingTask(ListSortingTaskRequest) returns (ListSortingTaskResponse) {
        option (google.api.http) = {
            post : "/ceres/sorting/SortingService/ListSortingTask"
        };
    };
    rpc ListSsuSortingTask(ListSsuSortingTaskRequest) returns (ListSsuSortingTaskResponse) {
        option (google.api.http) = {
            post : "/ceres/sorting/SortingService/ListSsuSortingTask"
        };
    };
    rpc GetLastSortingLog(GetLastSortingLogRequest) returns (GetLastSortingLogResponse) {
        option (google.api.http) = {
            post : "/ceres/sorting/SortingService/GetLastSortingLog"
        };
    };
    rpc ListLastSortingLog(ListLastSortingLogRequest) returns (ListLastSortingLogResponse) {
        option (google.api.http) = {
            post : "/ceres/sorting/SortingService/ListLastSortingLog"
        };
    };
    rpc UpdateSortingTask(UpdateSortingTaskRequest) returns (UpdateSortingTaskResponse) {
        option (google.api.http) = {
            post : "/ceres/sorting/SortingService/UpdateSortingTask"
        };
    };

    // 预分拣
    rpc CreatePreSortingTag(CreatePreSortingTagRequest) returns (CreatePreSortingTagResponse) {
        option (google.api.http) = {
            post : "/ceres/sorting/SortingService/CreatePreSortingTag"
        };
    };
    rpc DeletePreSortingTag(DeletePreSortingTagRequest) returns (DeletePreSortingTagResponse) {
        option (google.api.http) = {
            post : "/ceres/sorting/SortingService/DeletePreSortingTag"
        };
    };
    rpc GetPreSortingTag(GetPreSortingTagRequest) returns (GetPreSortingTagResponse) {
        option (google.api.http) = {
            post : "/ceres/sorting/SortingService/GetPreSortingTag"
        };
    };
    rpc ListPreSortingTag(ListPreSortingTagRequest) returns (ListPreSortingTagResponse) {
        option (google.api.http) = {
            post : "/ceres/sorting/SortingService/ListPreSortingTag"
        };
    };
    rpc UpdatePreSortingTag(UpdatePreSortingTagRequest) returns (UpdatePreSortingTagResponse) {
        option (google.api.http) = {
            post : "/ceres/sorting/SortingService/UpdatePreSortingTag"
        };
    };

    // 分拣框
    rpc CreateSortingBasket(CreateSortingBasketRequest) returns (CreateSortingBasketResponse) {
        option (google.api.http) = {
            post : "/ceres/sorting/SortingService/CreateSortingBasket"
        };
    };
    rpc UpdateSortingBasket(UpdateSortingBasketRequest) returns (UpdateSortingBasketResponse) {
        option (google.api.http) = {
            post : "/ceres/sorting/SortingService/UpdateSortingBasket"
        };
    };
    rpc ListSortingBasket(ListSortingBasketRequest) returns (ListSortingBasketResponse) {
        option (google.api.http) = {
            post : "/ceres/sorting/SortingService/ListSortingBasket"
        };
    };
    rpc DeleteSortingBasket(DeleteSortingBasketRequest) returns (DeleteSortingBasketResponse) {
        option (google.api.http) = {
            post : "/ceres/sorting/SortingService/DeleteSortingBasket"
        };
    };

    // 分拣组
    rpc CreateSortingSkuGroup(CreateSortingSkuGroupRequest) returns (CreateSortingSkuGroupResponse) {
        option (google.api.http) = {
            post : "/ceres/sorting/SortingService/CreateSortingSkuGroup"
        };
    };
    rpc UpdateSortingSkuGroup(UpdateSortingSkuGroupRequest) returns (UpdateSortingSkuGroupResponse) {
        option (google.api.http) = {
            post : "/ceres/sorting/SortingService/UpdateSortingSkuGroup"
        };
    };
    rpc ListSortingSkuGroup(ListSortingSkuGroupRequest) returns (ListSortingSkuGroupResponse) {
        option (google.api.http) = {
            post : "/ceres/sorting/SortingService/ListSortingSkuGroup"
        };
    };
    rpc DeleteSortingSkuGroup(DeleteSortingSkuGroupRequest) returns (DeleteSortingSkuGroupResponse) {
        option (google.api.http) = {
            post : "/ceres/sorting/SortingService/DeleteSortingSkuGroup"
        };
    };

    // 分拣统计
    rpc GetSortingInfo(GetSortingInfoRequest) returns (GetSortingInfoResponse) {
        option (google.api.http) = {
            post : "/ceres/sorting/SortingService/GetSortingInfo"
        };
    };
}

// gRPC status code
message Status {
    enum Code {
        CODE_UNSPECIFIED = 0;
        SORTCONFLICT     = 88480001; //存在分拣冲突
        CANOTREVERT      = 88480002; //不能revert称重数，原因是上一次操作不为称重操作
        INVALIDMARKID    = 88480003; //无效的分拣标记

        DUPLICATE_SORTNG_SKU_GROUP_NAME  = 88480004; // 分拣组name 重复
        DUPLICATE_SORTNG_BASKET_NAME     = 88480005; // 分拣包name 重复

        SORTLOCK         = 8848006; // 分拣锁定，分拣状态为分拣中外的订单时会报这个
    }
}

enum OpType {
    OPTYPE_UNSPECIFIED = 0;
    SETWEIGHT          = 1; // 称重
    CANCELWEIGHT       = 2; // 取消称重
    SETOUTOFSTOCK      = 3; // 缺货
    CANCELOUTOFSTOCK   = 4; // 取消缺货
    SETSORTMARK        = 5; // 设置分拣标记
    CANCELSORTMARK     = 6; // 取消分拣标记
    REVERTLASTWEIGHT   = 7; // 仅回滚称重操作
}

/*
分拣标签 包含预分拣和分拣打出的标签
*/
message SortingTag {
    option (dao.partition_count) = 100;
    option (dao.model_type)      = TYPE_SORTING_TAG;

    enum Type {
        TYPE_UNSPECIFIED = 0;
        NORMAL           = 1; // 常规分拣
        PRE              = 2; // 预分拣
    }

    // @inject_tag: gorm:"PRIMARY_KEY"
    uint64                   sorting_tag_id   = 11;
    uint64                   group_id         = 12;
    uint64                   station_id       = 13;
    uint64                   order_id         = 14;
    uint64                   order_detail_id  = 15;
    uint64                   sku_id           = 16; // 新建包装时的ssu_id，可与分拣时的ssu_id不一致
    uint64                   parent_id        = 17;
    Type                     type             = 18 [ (validate.rules).message = {required: true} ];
    merchandise.UnitValueSet sorting_quantity = 19;
    order.SortingStatus      sorting_status   = 20;

    uint64 create_time = 4;
    uint64 update_time = 5;
    uint64 delete_time = 6;
}

/*
分拣日志，用来记录分拣过程数据
*/
message SortingLog {
    option (dao.partition_count) = 100;
    
    message SortingQuantity {
        merchandise.UnitValueSet before_sorting_quantity = 1; //称重数
        merchandise.UnitValueSet after_sorting_quantity  = 2; //称重数
    }

    // @inject_tag: gorm:"PRIMARY_KEY"
    uint64                   sorting_log_id      = 1;
    uint64                   order_id            = 11;
    uint64                   group_id            = 12;
    uint64                   station_id          = 13;
    uint64                   order_detail_id     = 14;
    OpType                   op_type             = 15 [ (validate.rules).message = {required: true} ]; // 操作类型
    order.SortingStatus      before_status       = 16;
    order.SortingStatus      after_status        = 17;
    uint64                   sorting_operater_id = 18; // 分拣操作员 GroupUser
    uint64                   sorting_version     = 19; // 分拣任务的分拣版本
    SortingQuantity          sorting_quantity    = 20;
    bool                     last                = 21; // 标识是否为最后一条分拣日志，方便差异分拣时拉取
    merchandise.UnitValueSet order_quantity      = 22; // 称重时的下单信息

    uint64 create_time = 4;
    uint64 update_time = 5;
    uint64 delete_time = 6;
}

message SortingSkuGroup {
    option (dao.partition_count) = 1;
    option (dao.model_type)      = TYPE_SORTING_SKU_GROUP;

    // @inject_tag: gorm:"PRIMARY_KEY"
    uint64 sorting_sku_group_id = 1;
    uint64 create_time      = 4;
    uint64 update_time      = 5;
    uint64 delete_time      = 6;

    // @inject_tag: gorm:"-"
    repeated SortingSkuGroupSku skus = 11;
    uint64 group_id                  = 12;
    uint64 station_id                = 13;
    string name                      = 14;
}

message SortingSkuGroupSku {
    option (dao.partition_count) = 1;
    option (dao.model_type)      = TYPE_SORTING_SKU_GROUP_SKU;

    // @inject_tag: gorm:"PRIMARY_KEY"
    uint64 sorting_sku_group_sku_id = 1;
    uint64 create_time      = 4;
    uint64 update_time      = 5;
    uint64 delete_time      = 6;

    uint64 sku_id               = 11;
    uint64 sorting_sku_group_id = 12;
    uint64 group_id             = 13;
    uint64 station_id           = 14;
}

message SortingBasket {
    option (dao.partition_count) = 1;
    option (dao.model_type)      = TYPE_SORTING_BASKET;
    // @inject_tag: gorm:"PRIMARY_KEY"
    uint64 sorting_basket_id     = 1;
    uint64 create_time   = 4;
    uint64 update_time   = 5;
    uint64 delete_time   = 6;
    string basket_weight = 11 [ (validate.rules).string.min_len = 1 ]; // 单位斤 TODO 是否需要灵活设置单位
    uint64 group_id      = 12;
    uint64 station_id    = 13;
    string basket_name   = 14;
}

enum Weight {
    WEIGHT_UNSPECIFIED = 0;
    WEIGHT             = 1;
    UNWEIGHT           = 2;
}

message ListCategoryTreeRequest {
    uint64 service_period_id = 1 [ (validate.rules).uint64.gt = 0 ];
    uint64 receive_date      = 2 [ (validate.rules).uint64.gt = 0 ]; // 收货起始日期
    Weight weight = 3 [ (validate.rules).message = {required: true} ]; //是否记重 ,目前用不到0，但可以留着
}

message ListCategoryTreeResponse {
    repeated merchandise.Category categories = 1;
    repeated merchandise.Spu spus            = 2;
    repeated merchandise.Sku skus            = 3;
}

message ListSortingSsuRequest {
    uint64              service_period_id = 1 [ (validate.rules).uint64.gt = 0 ];
    uint64              receive_date      = 2 [ (validate.rules).uint64.gt = 0 ]; // 收货起始日期
    repeated uint64     sku_ids           = 3 [ (validate.rules).repeated = {min_items : 1} ];
    Weight              weight            = 4;
    common.PagingParams paging            = 5 [ (validate.rules).message.required = true ]; // 分页信息
    string              q                 = 6; // 商品名 
    order.Order.State   order_state       = 7; // 订单状态
}

message ListSortingSsuResponse {
    repeated merchandise.Ssu     ssus   = 1;
    map<uint64, merchandise.Sku> skus   = 2;
    common.PagingResult          paging = 3; // 分页信息
}

message ListSortingTaskRequest {
    repeated merchandise.SsuId ssu_ids            = 1;
    uint64                     service_period_id  = 2;
    uint64                     receive_date       = 3; // 收货起始日期
    repeated uint64            order_ids          = 4;
    repeated uint64            order_detail_ids   = 5;
    common.PagingParams        paging             = 6 [ (validate.rules).message.required = true ]; // 分页信息
    bool                       need_customer_info = 7;
    bool                       need_route_info    = 8;
    bool                       need_sku_info      = 9;
    Weight                     weight             = 10;
    order.Order.State          order_state        = 11; // 订单状态
}

message ListSortingTaskResponse {
    repeated order.OrderDetail       sorting_tasks       = 1;
    common.PagingResult              paging              = 2; // 分页信息
    map<uint64, uint64>              order_customer_info = 3; // order_id : customer_id
    map<uint64, enterprise.Customer> customer_info       = 4;
    map<uint64, uint64>              customer_route_info = 5; // customer_id : route_id
    map<uint64, delivery.Route>      route_info          = 6;
    map<uint64, merchandise.Sku>     sku_info            = 7;
    map<uint64, string>              sorting_num_info    = 8; // order_id: sorting_num
    map<uint64, string>              category_info       = 9; // 与sku_info一起返回
    map<uint64, uint64>              category_relation   = 10; // category2_id: category1_id 与sku_info一起返回
}

message ListSsuSortingTaskRequest {
    repeated uint64 quotation_ids      = 1;
    uint64          service_period_id  = 2;
    uint64          create_begin_time  = 3; // 下单起始时间
    uint64          create_end_time    = 4; // 下单截止时间
    uint64          receive_begin_tmie = 5; // 收货起始时间
    uint64          receive_end_time   = 6; // 收货截止时间
    repeated uint64 category_ids_1     = 7;
    repeated uint64 category_ids_2     = 8;
    repeated uint64 spu_ids            = 9; // 品类
    string          customize_code     = 10; // ssu自定义编码
    string          ssu_name           = 11; // ssu名字

    common.PagingParams paging         = 1000 [ (validate.rules).message.required = true ];
}

message ListSsuSortingTaskResponse {
    message SsuSortingTask {
        merchandise.Ssu ssu = 1;
        repeated order.OrderDetail sorting_tasks = 2;
    }
    repeated SsuSortingTask ssu_sorting_tasks = 1;

    common.PagingResult paging = 2; // 分页信息

    map<uint64, order.Order>           order_info     = 3;
    map<uint64, enterprise.Customer>   customer_info  = 4;
    map<uint64, merchandise.Quotation> quotation_info = 5;
    map<uint64, string>                category_info  = 6; // category_id: category_name
}

message GetLastSortingLogRequest {
    uint64 order_detail_id = 1;
}

message GetLastSortingLogResponse {
    SortingLog sorting_log = 1;
}

message ListLastSortingLogRequest {
    repeated uint64     order_detail_ids = 1;
    common.PagingParams paging           = 2 [ (validate.rules).message.required = true ]; // 分页信息
}

message ListLastSortingLogResponse {
    repeated SortingLog sorting_logs = 1;
    common.PagingResult paging       = 2; // 分页信息
}

message UpdateSortingTaskRequest {
    repeated order.OrderDetail sorting_tasks     = 1 [ (validate.rules).repeated = {min_items : 1} ];
    OpType                     op_type           = 2 [ (validate.rules).message = {required: true} ];
}

message UpdateSortingTaskResponse {
    bool     sorting_conflict                = 1; // 是否存在分拣冲突
    repeated order.OrderDetail sorting_tasks = 2; // 存在冲突时，返回最新的分拣任务数据
}

message CreatePreSortingTagRequest {
    SortingTag sorting_tag = 1 [ (validate.rules).message.required = true ];
}

message CreatePreSortingTagResponse {
    SortingTag sorting_tag = 1;
}

message DeletePreSortingTagRequest {
    uint64 tag_id = 1 [ (validate.rules).uint64.gt = 0 ];
}

message DeletePreSortingTagResponse {
    SortingTag sorting_tag = 1;
}

message GetPreSortingTagRequest {
    uint64 tag_id = 1 [ (validate.rules).uint64.gt = 0 ];
}

message GetPreSortingTagResponse {
    SortingTag sorting_tag = 1;
}

message ListPreSortingTagRequest {
    common.PagingParams paging = 1 [ (validate.rules).message.required = true ]; // 分页信息
}

message ListPreSortingTagResponse {
    repeated SortingTag sorting_tags = 1;
    common.PagingResult paging       = 2; // 分页信息
}

message UpdatePreSortingTagRequest {
    SortingTag sorting_tag = 1 [ (validate.rules).message.required = true ];
}

message UpdatePreSortingTagResponse {
    SortingTag sorting_tag = 1;
}

message CreateSortingBasketRequest {
    SortingBasket sorting_basket = 1 [ (validate.rules).message.required = true ];
}

message CreateSortingBasketResponse {
    SortingBasket sorting_basket = 1;
}

message UpdateSortingBasketRequest {
    SortingBasket sorting_basket = 1 [ (validate.rules).message.required = true ];
}

message UpdateSortingBasketResponse {
    SortingBasket sorting_basket = 1;
}

message ListSortingBasketRequest {
    common.PagingParams paging = 1 [ (validate.rules).message.required = true ]; // 分页信息
}

message ListSortingBasketResponse {
    repeated SortingBasket sorting_baskets = 1;
    common.PagingResult    paging          = 2; // 分页信息
}

message DeleteSortingBasketRequest {
    uint64 basket_id = 1 [ (validate.rules).uint64.gt = 0 ];
}

message DeleteSortingBasketResponse {
    SortingBasket sorting_basket = 1;
}

message CreateSortingSkuGroupRequest {
    SortingSkuGroup sorting_sku_group = 1 [ (validate.rules).message.required = true ];
}

message CreateSortingSkuGroupResponse {
    SortingSkuGroup sorting_sku_group = 1;
}

message UpdateSortingSkuGroupRequest {
    SortingSkuGroup sorting_sku_group = 1 [ (validate.rules).message.required = true ];
}

message UpdateSortingSkuGroupResponse {
    SortingSkuGroup sorting_sku_group = 1;
}

message ListSortingSkuGroupRequest {
    common.PagingParams paging = 1 [ (validate.rules).message.required = true ]; // 分页信息
}

message ListSortingSkuGroupResponse {
    repeated SortingSkuGroup sorting_sku_groups = 1;
    common.PagingResult      paging             = 2; // 分页信息
}

message DeleteSortingSkuGroupRequest {
    uint64 sorting_group_id = 1 [ (validate.rules).uint64.gt = 0 ];
}

message DeleteSortingSkuGroupResponse {
    SortingSkuGroup sorting_sku_group = 1;
}

message GetSortingInfoRequest {
    uint64 service_period_id = 1 [ (validate.rules).uint64.gt = 0 ];
    uint64 receive_date      = 2 [ (validate.rules).uint64.gt = 0 ];
}

message GetSortingInfoResponse {
    message SortingInfoUnit {
        uint32 total_count     = 1; //总分拣任务数
        uint32 weight_count    = 2; // 已称重任务数
        uint32 out_stock_count = 3; // 缺货任务数
        uint32 unweight_count  = 4; // 未称重任务数
    }

    // 减小返回体大小
    message RelationInfo {
        string customize_code = 1; // 自定义编码
        string name           = 2; // 名字
    }

    SortingInfoUnit total_sorting_info = 1; // 总分拣统计信息
    uint32 weight_task_count           = 2; // 记重任务数
    uint32 unweight_task_count         = 3; // 不记重任务数
    uint32 ssu_count                   = 4; // 商品数
    uint32 customer_count              = 5; // 商户数
    uint32 order_count                 = 6; // 订单总数
    uint32 order_finish_count          = 7; // 完成分拣订单数

    map<string, SortingInfoUnit> order_sorting_info    = 8; // 订单分拣统计 key:customize_code
    map<uint64, SortingInfoUnit> category_sorting_info = 9; // 分类分拣统计
    map<string, SortingInfoUnit> ssu_sorting_info      = 10; // ssu分拣统计

    map<string, uint64> order_customer_info = 11; // order_customize_code: customer_id
    map<uint64, RelationInfo> customer_info = 12; // 商户信息
    map<uint64, RelationInfo> category_info = 13; // 分类信息
    map<string, RelationInfo> ssu_info      = 14; // 商品信息 
}
