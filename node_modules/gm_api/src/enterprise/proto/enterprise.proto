syntax = "proto3";

package ceres.enterprise;
option  java_multiple_files = true;

import "./include/protoc-gen-validate/validate.proto";
import "./account/proto/account.proto";
import "./common/proto/common.proto";
import "./common/proto/options.proto";
import "./google/api/annotations.proto";
import "./cmd/protoc-gen-dao/proto/dao.proto";

option go_package = "code.guanmai.cn/back_end/ceres/enterprise/proto;proto";

service EnterpriseService {
    // 初始化地区基础数据
    rpc InitializeRegion(InitializeRegionRequest) returns (InitializeRegionResponse);

    // Group
    rpc GetGroup(GetGroupRequest) returns (GetGroupResponse) {
        option (google.api.http) = {
            post : "/ceres/enterprise/EnterpriseService/GetGroup"
        };
    }
    rpc ListGroup(ListGroupRequest) returns (ListGroupResponse) {
        option (google.api.http) = {
            post : "/ceres/enterprise/EnterpriseService/ListGroup"
        };
    }
    rpc CreateGroup(CreateGroupRequest) returns (CreateGroupResponse) {
        option (google.api.http) = {
            post : "/ceres/enterprise/EnterpriseService/CreateGroup"
        };
        option (common.options.annotation) = {
            codes : "DUPLICATE_GROUP_NAME"
        };
    }
    rpc UpdateGroup(UpdateGroupRequest) returns (UpdateGroupResponse) {
        option (google.api.http) = {
            post : "/ceres/enterprise/EnterpriseService/UpdateGroup"
        };
        option (common.options.annotation) = {
            codes : "DUPLICATE_GROUP_NAME"
        };
    }
    rpc GetGroupExtraInfo(GetGroupExtraInfoRequest) returns (GetGroupExtraInfoResponse) {
        option (google.api.http) = {
            post : "/ceres/enterprise/EnterpriseService/GetGroupExtraInfo"
        };
    }
    rpc UpdateGroupExtraInfo(UpdateGroupExtraInfoRequest) returns (UpdateGroupExtraInfoResponse) {
        option (google.api.http) = {
            post : "/ceres/enterprise/EnterpriseService/UpdateGroupExtraInfo"
        };
    }
    // 获取所有 group 的 timezone。用于在全局统计时获取相关信息。
    rpc ListGroupTimeZone(ListGroupTimeZoneRequest) returns (ListGroupTimeZoneResponse) {
        option (google.api.http) = {
            post : "/ceres/enterprise/EnterpriseService/ListGroupTimeZone"
        };
    }
    // 获取某些 Permission 所绑定的 Group
    rpc ListPermissionGroup(ListPermissionGroupRequest) returns (ListPermissionGroupResponse) {
        option (google.api.http) = {
            post : "/ceres/enterprise/EnterpriseService/ListPermissionGroup"
        };
    }
    // 获取某个 Permission 所绑定的 Group
    rpc GetPermissionGroup(GetPermissionGroupRequest) returns (GetPermissionGroupResponse) {
        option (google.api.http) = {
            post : "/ceres/enterprise/EnterpriseService/GetPermissionGroup"
        };
    }
    // 更新某个 Permission 所绑定的 Group
    rpc UpdatePermissionGroup(UpdatePermissionGroupRequest) returns (UpdatePermissionGroupResponse) {
        option (google.api.http) = {
            post : "/ceres/enterprise/EnterpriseService/UpdatePermissionGroup"
        };
    }
    // 获取某个 Group 所绑定的 Permission
    rpc GetGroupPermission(GetGroupPermissionRequest) returns (GetGroupPermissionResponse) {
        option (google.api.http) = {
            post : "/ceres/enterprise/EnterpriseService/GetGroupPermission"
        };
    }
    // 更新某个 Permission 所绑定的 Group
    rpc UpdateGroupPermission(UpdateGroupPermissionRequest) returns (UpdateGroupPermissionResponse) {
        option (google.api.http) = {
            post : "/ceres/enterprise/EnterpriseService/UpdateGroupPermission"
        };
    }

    // Station
    rpc GetStation(GetStationRequest) returns (GetStationResponse) {
        option (google.api.http) = {
            post : "/ceres/enterprise/EnterpriseService/GetStation"
        };
    }
    rpc ListStation(ListStationRequest) returns (ListStationResponse) {
        option (google.api.http) = {
            post : "/ceres/enterprise/EnterpriseService/ListStation"
        };
    }
    rpc CreateStation(CreateStationRequest) returns (CreateStationResponse) {
        option (google.api.http) = {
            post : "/ceres/enterprise/EnterpriseService/CreateStation"
        };
    }
    rpc UpdateStation(UpdateStationRequest) returns (UpdateStationResponse) {
        option (google.api.http) = {
            post : "/ceres/enterprise/EnterpriseService/UpdateStation"
        };
    }
    rpc UpdateStationAvailableCity(UpdateStationAvailableCityRequest) returns (UpdateStationAvailableCityResponse) {
        option (google.api.http) = {
            post : "/ceres/enterprise/EnterpriseService/UpdateStationAvailableCity"
        };
    }

    // Supplier
    rpc GetSupplier(GetSupplierRequest) returns (GetSupplierResponse) {
        option (google.api.http) = {
            post : "/ceres/enterprise/EnterpriseService/GetSupplier"
        };
    }
    rpc GetManySupplier(GetManySupplierRequest) returns (GetManySupplierResponse) {
        option (google.api.http) = {
            post : "/ceres/enterprise/EnterpriseService/GetManySupplier"
        };
    }
    rpc ListSupplier(ListSupplierRequest) returns (ListSupplierResponse) {
        option (google.api.http) = {
            post : "/ceres/enterprise/EnterpriseService/ListSupplier"
        };
    }
    rpc CreateSupplier(CreateSupplierRequest) returns (CreateSupplierResponse) {
        option (google.api.http) = {
            post : "/ceres/enterprise/EnterpriseService/CreateSupplier"
        };
    }
    rpc UpdateSupplier(UpdateSupplierRequest) returns (UpdateSupplierResponse) {
        option (google.api.http) = {
            post : "/ceres/enterprise/EnterpriseService/UpdateSupplier"
        };
    }
    rpc DeleteSupplier(DeleteSupplierRequest) returns (DeleteSupplierResponse) {
        option (google.api.http) = {
            post : "/ceres/enterprise/EnterpriseService/DeleteSupplier"
        };
    }
    // 删除某个 Group 下的所有 Supplier
    rpc CleanSupplier(CleanSupplierRequest) returns (CleanSupplierResponse);
    // 批量导出供应商
    rpc BatchExportSupplier(BatchExportSupplierRequest) returns (BatchExportSupplierResponse) {
        option (google.api.http) = {
            post : "/ceres/enterprise/EnterpriseService/BatchExportSupplier"
        };
    }

    // GroupUser
    // GetGroupUser 会返回已删除的 GroupUser。
    rpc GetGroupUser(GetGroupUserRequest) returns (GetGroupUserResponse) {
        option (google.api.http) = {
            post : "/ceres/enterprise/EnterpriseService/GetGroupUser"
        };
    }
    // GetManyGroupUser 会返回已删除的 GroupUser。
    rpc GetManyGroupUser(GetManyGroupUserRequest) returns (GetManyGroupUserResponse) {
        option (google.api.http) = {
            post : "/ceres/enterprise/EnterpriseService/GetManyGroupUser"
        };
    }
    // ListGroupUser 不会返回已删除的 GroupUser。
    rpc ListGroupUser(ListGroupUserRequest) returns (ListGroupUserResponse) {
        option (google.api.http) = {
            post : "/ceres/enterprise/EnterpriseService/ListGroupUser"
        };
    }
    rpc CreateGroupUser(CreateGroupUserRequest) returns (CreateGroupUserResponse) {
        option (google.api.http) = {
            post : "/ceres/enterprise/EnterpriseService/CreateGroupUser"
        };
        option (common.options.annotation) = {
            codes : "DUPLICATE_USER_NAME,DUPLICATE_USER_USERNAME,DUPLICATE_USER_PHONE"
        };
    }
    rpc UpdateGroupUser(UpdateGroupUserRequest) returns (UpdateGroupUserResponse) {
        option (google.api.http) = {
            post : "/ceres/enterprise/EnterpriseService/UpdateGroupUser"
        };
    }
    // 更新当前登录用户的密码（如果要修改其他用户的密码，请使用 UpdateGroupUser 接口）
    // 如果参数中的 account.origin_password 不正确，会返回 GRPC status code PERMISSION_DENIED
    rpc UpdateGroupUserPassword(UpdateGroupUserPasswordRequest) returns (UpdateGroupUserPasswordResponse) {
        option (google.api.http) = {
            post : "/ceres/enterprise/EnterpriseService/UpdateGroupUserPassword"
        };
    }
    rpc DeleteGroupUser(DeleteGroupUserRequest) returns (DeleteGroupUserResponse) {
        option (google.api.http) = {
            post : "/ceres/enterprise/EnterpriseService/DeleteGroupUser"
        };
    }
    // 更新某个用户绑定的所有角色
    rpc UpdateGroupUserRole(UpdateGroupUserRoleRequest) returns (UpdateGroupUserRoleResponse) {
        option (google.api.http) = {
            post : "/ceres/enterprise/EnterpriseService/UpdateGroupUserRole"
        };
    }

    // Role
    rpc GetRole(GetRoleRequest) returns (GetRoleResponse) {
        option (google.api.http) = {
            post : "/ceres/enterprise/EnterpriseService/GetRole"
        };
    }
    rpc ListRole(ListRoleRequest) returns (ListRoleResponse) {
        option (google.api.http) = {
            post : "/ceres/enterprise/EnterpriseService/ListRole"
        };
    }
    rpc CreateRole(CreateRoleRequest) returns (CreateRoleResponse) {
        option (google.api.http) = {
            post : "/ceres/enterprise/EnterpriseService/CreateRole"
        };
        option (common.options.annotation) = {
            codes : "DUPLICATE_ROLE_NAME"
        };
    }
    rpc UpdateRole(UpdateRoleRequest) returns (UpdateRoleResponse) {
        option (google.api.http) = {
            post : "/ceres/enterprise/EnterpriseService/UpdateRole"
        };
        option (common.options.annotation) = {
            codes : "DUPLICATE_ROLE_NAME"
        };
    }
    rpc DeleteRole(DeleteRoleRequest) returns (DeleteRoleResponse) {
        option (google.api.http) = {
            post : "/ceres/enterprise/EnterpriseService/DeleteRole"
        };
    }
    // 更新某个角色拥有的所有权限
    rpc UpdateRolePermission(UpdateRolePermissionRequest) returns (UpdateRolePermissionResponse) {
        option (google.api.http) = {
            post : "/ceres/enterprise/EnterpriseService/UpdateRolePermission"
        };
    }
    // 更新某个角色绑定的所有用户
    rpc UpdateRoleGroupUser(UpdateRoleGroupUserRequest) returns (UpdateRoleGroupUserResponse) {
        option (google.api.http) = {
            post : "/ceres/enterprise/EnterpriseService/UpdateRoleGroupUser"
        };
    }

    // service period
    rpc GetServicePeriod(GetServicePeriodRequest) returns (GetServicePeriodResponse) {
        option (google.api.http) = {
            post : "/ceres/enterprise/EnterpriseService/GetServicePeriod"
        };
    }
    rpc GetManyServicePeriod(GetManyServicePeriodRequest) returns (GetManyServicePeriodResponse) {
        option (google.api.http) = {
            post : "/ceres/enterprise/EnterpriseService/GetManyServicePeriod"
        };
    }
    rpc ListServicePeriod(ListServicePeriodRequest) returns (ListServicePeriodResponse) {
        option (google.api.http) = {
            post : "/ceres/enterprise/EnterpriseService/ListServicePeriod"
        };
    }
    rpc CreateServicePeriod(CreateServicePeriodRequest) returns (CreateServicePeriodResponse) {
        option (google.api.http) = {
            post : "/ceres/enterprise/EnterpriseService/CreateServicePeriod"
        };
    }
    rpc UpdateServicePeriod(UpdateServicePeriodRequest) returns (UpdateServicePeriodResponse) {
        option (google.api.http) = {
            post : "/ceres/enterprise/EnterpriseService/UpdateServicePeriod"
        };
    }
    rpc DeleteServicePeriod(DeleteServicePeriodRequest) returns (DeleteServicePeriodResponse) {
        option (google.api.http) = {
            post : "/ceres/enterprise/EnterpriseService/DeleteServicePeriod"
        };
    }
    // 删除某个 Group 下的所有 ServicePeriod
    rpc CleanServicePeriod(CleanServicePeriodRequest) returns (CleanServicePeriodResponse);

    // Customer
    rpc GetCustomer(GetCustomerRequest) returns (GetCustomerResponse) {
        option (google.api.http) = {
            post : "/ceres/enterprise/EnterpriseService/GetCustomer"
        };
    }
    rpc GetManyCustomer(GetManyCustomerRequest) returns (GetManyCustomerResponse) {
        option (google.api.http) = {
            post : "/ceres/enterprise/EnterpriseService/GetManyCustomer"
        };
    }
    rpc ListCustomer(ListCustomerRequest) returns (ListCustomerResponse) {
        option (google.api.http) = {
            post : "/ceres/enterprise/EnterpriseService/ListCustomer"
        };
    }
    rpc CreateCustomer(CreateCustomerRequest) returns (CreateCustomerResponse) {
        option (google.api.http) = {
            post : "/ceres/enterprise/EnterpriseService/CreateCustomer"
        };
    }
    // 这个接口可以通过调用一次接口同时创建多个 Customer 和 CustomerUser
    rpc CreateCustomerTree(CreateCustomerTreeRequest) returns (CreateCustomerTreeResponse) {
        option (google.api.http) = {
            post : "/ceres/enterprise/EnterpriseService/CreateCustomerTree"
        };
    }
    rpc UpdateCustomer(UpdateCustomerRequest) returns (UpdateCustomerResponse) {
        option (google.api.http) = {
            post : "/ceres/enterprise/EnterpriseService/UpdateCustomer"
        };
    }
    rpc DeleteCustomer(DeleteCustomerRequest) returns (DeleteCustomerResponse) {
        option (google.api.http) = {
            post : "/ceres/enterprise/EnterpriseService/DeleteCustomer"
        };
    }
    // 删除某个 Group 下的所有 Customer
    rpc CleanCustomer(CleanCustomerRequest) returns (CleanCustomerResponse);
    // 批量导出商户（目前支持社会餐饮商户、学校、班级共三种类型的商户）
    rpc BatchExportCustomer(BatchExportCustomerRequest) returns (BatchExportCustomerResponse) {
        option (google.api.http) = {
            post : "/ceres/enterprise/EnterpriseService/BatchExportCustomer"
        };
    }
    // 批量导入商户（目前支持社会餐饮商户、学校、班级共三种类型的商户）
    rpc BatchImportCustomer(BatchImportCustomerRequest) returns (BatchImportCustomerResponse) {
        option (google.api.http) = {
            post : "/ceres/enterprise/EnterpriseService/BatchImportCustomer"
        };
    }
    // 下载用于批量导入商户的模版（目前支持社会餐饮商户、学校、班级共三种类型的商户）
    rpc GetBatchImportCustomerTemplate(GetBatchImportCustomerTemplateRequest) returns (GetBatchImportCustomerTemplateResponse) {
        option (google.api.http) = {
            post : "/ceres/enterprise/EnterpriseService/GetBatchImportCustomerTemplate"
        };
    }
    // 获取一段时间范围内每天新建的 Customer 的数量
    rpc CountNewCustomer(CountNewCustomerRequest) returns (CountNewCustomerResponse) {
        option (google.api.http) = {
            post : "/ceres/enterprise/EnterpriseService/CountNewCustomer"
        };
    }

    // CustomerUser
    rpc GetCustomerUser(GetCustomerUserRequest) returns (GetCustomerUserResponse) {
        option (google.api.http) = {
            post : "/ceres/enterprise/EnterpriseService/GetCustomerUser"
        };
    }
    rpc InternalGetCustomerUser(InternalGetCustomerUserRequest) returns (InternalGetCustomerUserResponse); // 内部接口，不对外暴露
    rpc GetManyCustomerUser(GetManyCustomerUserRequest) returns (GetManyCustomerUserResponse) {
        option (google.api.http) = {
            post : "/ceres/enterprise/EnterpriseService/GetManyCustomerUser"
        };
    }
    rpc ListCustomerUser(ListCustomerUserRequest) returns (ListCustomerUserResponse) {
        option (google.api.http) = {
            post : "/ceres/enterprise/EnterpriseService/ListCustomerUser"
        };
    }
    rpc CreateCustomerUser(CreateCustomerUserRequest) returns (CreateCustomerUserResponse) {
        option (google.api.http) = {
            post : "/ceres/enterprise/EnterpriseService/CreateCustomerUser"
        };
        option (common.options.annotation) = {
            codes : "DUPLICATE_USER_NAME,DUPLICATE_USER_USERNAME,DUPLICATE_USER_PHONE"
        };
    }
    rpc UpdateCustomerUser(UpdateCustomerUserRequest) returns (UpdateCustomerUserResponse) {
        option (google.api.http) = {
            post : "/ceres/enterprise/EnterpriseService/UpdateCustomerUser"
        };
    }
    // 更新当前登录用户的密码（如果要修改其他用户的密码，请使用 UpdateCustomerUser 接口）。
    // 如果参数中的 account.origin_password 不正确，会返回 GRPC status code PERMISSION_DENIED
    rpc UpdateCustomerUserPassword(UpdateCustomerUserPasswordRequest) returns (UpdateCustomerUserPasswordResponse) {
        option (google.api.http) = {
            post : "/ceres/enterprise/EnterpriseService/UpdateCustomerUserPassword"
        };
    }
    rpc DeleteCustomerUser(DeleteCustomerUserRequest) returns (DeleteCustomerUserResponse) {
        option (google.api.http) = {
            post : "/ceres/enterprise/EnterpriseService/DeleteCustomerUser"
        };
    }
    // 删除某个 Group 下的所有 CustomerUser
    rpc CleanCustomerUser(CleanCustomerUserRequest) returns (CleanCustomerUserResponse);

    // CustomerLabel
    rpc GetCustomerLabel(GetCustomerLabelRequest) returns (GetCustomerLabelResponse) {
        option (google.api.http) = {
            post : "/ceres/enterprise/EnterpriseService/GetCustomerLabel"
        };
    }
    rpc ListCustomerLabel(ListCustomerLabelRequest) returns (ListCustomerLabelResponse) {
        option (google.api.http) = {
            post : "/ceres/enterprise/EnterpriseService/ListCustomerLabel"
        };
    }
    rpc CreateCustomerLabel(CreateCustomerLabelRequest) returns (CreateCustomerLabelResponse) {
        option (google.api.http) = {
            post : "/ceres/enterprise/EnterpriseService/CreateCustomerLabel"
        };
    }
    rpc UpdateCustomerLabel(UpdateCustomerLabelRequest) returns (UpdateCustomerLabelResponse) {
        option (google.api.http) = {
            post : "/ceres/enterprise/EnterpriseService/UpdateCustomerLabel"
        };
    }
    rpc DeleteCustomerLabel(DeleteCustomerLabelRequest) returns (DeleteCustomerLabelResponse) {
        option (google.api.http) = {
            post : "/ceres/enterprise/EnterpriseService/DeleteCustomerLabel"
        };
    }

    // DistributionContractor
    rpc GetDistributionContractor(GetDistributionContractorRequest) returns (GetDistributionContractorResponse) {
        option (google.api.http) = {
            post : "/ceres/enterprise/EnterpriseService/GetDistributionContractor"
        };
    }
    rpc ListDistributionContractor(ListDistributionContractorRequest) returns (ListDistributionContractorResponse) {
        option (google.api.http) = {
            post : "/ceres/enterprise/EnterpriseService/ListDistributionContractor"
        };
    }
    rpc CreateDistributionContractor(CreateDistributionContractorRequest) returns (CreateDistributionContractorResponse) {
        option (google.api.http) = {
            post : "/ceres/enterprise/EnterpriseService/CreateDistributionContractor"
        };
    }
    rpc UpdateDistributionContractor(UpdateDistributionContractorRequest) returns (UpdateDistributionContractorResponse) {
        option (google.api.http) = {
            post : "/ceres/enterprise/EnterpriseService/UpdateDistributionContractor"
        };
    }
    rpc DeleteDistributionContractor(DeleteDistributionContractorRequest) returns (DeleteDistributionContractorResponse) {
        option (google.api.http) = {
            post : "/ceres/enterprise/EnterpriseService/DeleteDistributionContractor"
        };
    }

    // Region 地区
    rpc ListCountry(ListCountryRequest) returns (ListCountryResponse) {
        option (google.api.http) = {
            post : "/ceres/enterprise/EnterpriseService/ListCountry"
        };
    }
    rpc ListProvince(ListProvinceRequest) returns (ListProvinceResponse) {
        option (google.api.http) = {
            post : "/ceres/enterprise/EnterpriseService/ListProvince"
        };
    }
    rpc ListCity(ListCityRequest) returns (ListCityResponse) {
        option (google.api.http) = {
            post : "/ceres/enterprise/EnterpriseService/ListCity"
        };
    }
    rpc ListDistrict(ListDistrictRequest) returns (ListDistrictResponse) {
        option (google.api.http) = {
            post : "/ceres/enterprise/EnterpriseService/ListDistrict"
        };
    }
    rpc ListStreet(ListStreetRequest) returns (ListStreetResponse) {
        option (google.api.http) = {
            post : "/ceres/enterprise/EnterpriseService/ListStreet"
        };
    }

    // InvitationCode 邀请码
    rpc ListInvitationCode(ListInvitationCodeRequest) returns (ListInvitationCodeResponse) {
        option (google.api.http) = {
            post : "/ceres/enterprise/EnterpriseService/ListInvitationCode"
        };
    }
    rpc GetInvitationCode(GetInvitationCodeRequest) returns (GetInvitationCodeResponse) {
        option (google.api.http) = {
            post : "/ceres/enterprise/EnterpriseService/GetInvitationCode"
        };
    }
    rpc CreateInvitationCode(CreateInvitationCodeRequest) returns (CreateInvitationCodeResponse) {
        option (google.api.http) = {
            post : "/ceres/enterprise/EnterpriseService/CreateInvitationCode"
        };
    }
    rpc DeleteInvitationCode(DeleteInvitationCodeRequest) returns (DeleteInvitationCodeResponse) {
        option (google.api.http) = {
            post : "/ceres/enterprise/EnterpriseService/DeleteInvitationCode"
        };
    }
    // 删除某个 Group 下的所有 InvitationCode
    rpc CleanInvitationCode(CleanInvitationCodeRequest) returns (CleanInvitationCodeResponse);

    // 内部单元测试使用的接口，不对外暴露。
    // 从当前 context 中获取用户信息，并返回
    rpc GetUserInfo(GetUserInfoRequest) returns (GetUserInfoResponse) {
        option (google.api.http) = {
            post : "/ceres/enterprise/EnterpriseService/GetUserInfo"
        };
    }
}

// gRPC status code
message Status {
    enum Code {
        CODE_UNSPECIFIED        = 0;
        DUPLICATE_ROLE_NAME     = 23330001; // role.name 重复
        DUPLICATE_USER_NAME     = 23330002; // user.name 重复
        DUPLICATE_USER_USERNAME = 23330004; // user.username 重复
        DUPLICATE_USER_PHONE    = 23330005; // user.phone 重复
        DUPLICATE_GROUP_NAME    = 23330003; // group.name 重复
    }

    message DuplicateRoleNameDetail {
        // 和哪一个角色的名字相同
        uint64 role_id = 1;
    }
    message DuplicateUserNameDetail {
        // 和哪一个用户的名字相同
        uint64 user_id = 1;
    }
    message DuplicateUserUsernameDetail {
        // 和哪一个用户的 username 相同
        uint64 user_id = 1;
    }
    message DuplicateUserPhoneDetail {
        // 和哪一个用户的 phone 相同
        uint64 user_id = 1;
    }
}

// 企业
message Group {
    enum Type {
        TYPE_UNSPECIFIED = 0;
        INTERNAL         = 1; // 内部 group（用于测试、演示等目的）
        EXTERNAL         = 2; // 外部 group
    }

    // @inject_tag: gorm:"PRIMARY_KEY"
    uint64 group_id = 1;

    uint64 create_time = 4;
    uint64 update_time = 5;

    bool    is_valid  = 20;                                              // 是否是合法用户。如果客户解约，这个字段会设置成 false。
    string  name      = 21 [ (validate.rules).string = {min_len : 1} ];  // 名字
    Address address   = 22 [ deprecated = true ];                        // 地址（已废弃，请使用 GroupExtraInfo.address）
    string  time_zone = 23;                                              // 时区，比如 "America/New_York", "Asia/Shanghai" // TODO: 设置为必填字段
    Type    type      = 29 [ (validate.rules).message = {required: true} ]; // 类型
}

// 一些额外的 Group 信息，不会直接参与到业务逻辑中
message GroupExtraInfo {

    option (dao.partition_count) = 1;
    option (dao.primary_key)     = "group_id";

    enum Source {
        SOURCE_UNSPECIFIED    = 0;
        SOURCE_PROMOTION      = 1; // 推广
        SOURCE_REFERRAL       = 2; // 转介绍
        SOURCE_SELF_EXPANSION = 3; // 自开扩
    }

    enum Target {
        TARGET_UNSPECIFIED       = 0;
        TARGET_STORES            = 1; // 门店
        TARGET_RESTAURANT        = 2; // 餐厅
        TARGET_HOTEL             = 3; // 酒店
        TARGET_GROUP_MEALS       = 4; // 团餐
        TARGET_NUTRITIONAL_MEALS = 5; // 营养餐
        TARGET_INDIVIDUAL        = 6; // 个人
        TARGET_RETAIL            = 7; // 零售
        TARGET_OTHER             = 8; // 其他
    }

    enum AnnualSalesAmount {
        ANNUAL_SALES_AMOUNT_UNSPECIFIED = 0;
        ANNUAL_SALES_AMOUNT_0_1000      = 1; // 0-1000万
        ANNUAL_SALES_AMOUNT_1000_3000   = 2; // 1000-3000万
        ANNUAL_SALES_AMOUNT_3000_5000   = 3; // 3000-5000万
        ANNUAL_SALES_AMOUNT_5000_10000  = 4; // 5000-10000万
        ANNUAL_SALES_AMOUNT_10000_INF   = 5; // > 10000万
    }

    enum MonthlySalesAmount {
        MONTHLY_SALES_AMOUNT_UNSPECIFIED = 0;
        MONTHLY_SALES_AMOUNT_0_50        = 1; // 0-50万
        MONTHLY_SALES_AMOUNT_50_100      = 2; // 50-100万
        MONTHLY_SALES_AMOUNT_100_200     = 3; // 100-200万
        MONTHLY_SALES_AMOUNT_200_500     = 4; // 200-500万
        MONTHLY_SALES_AMOUNT_500_1000    = 5; // 500-1000万
        MONTHLY_SALES_AMOUNT_1000_INF    = 6; // > 1000万
    }

    enum Type {
        TYPE_UNSPECIFIED = 0;
        TYPE_NORMAL      = 1;
        TYPE_KA          = 2;
    }

    enum Version {
        VERSION_UNSPECIFIED = 0;
        VERSION_STANDARD    = 1; // 标准版
    }

    enum State {
        STATE_UNSPECIFIED = 0;
        STATE_NORMAL      = 1; // 正常
        STATE_ONLINE      = 2; // 上线中
        STATE_OFFLINE     = 3; // 下线
        STATE_STOP        = 4; // 停用
    }

    message Attrs {
        repeated Target targets = 4; // 服务对象
    }

    // @inject_tag: gorm:"PRIMARY_KEY"
    uint64 group_id    = 1;
    uint64 create_time = 4;
    uint64 update_time = 5;

    Attrs attrs = 20;

    Address            address              = 21; // 联系地址和联系人
    Source             source               = 22; // 线索来源
    AnnualSalesAmount  annual_sales_amount  = 25; // 年销售额
    MonthlySalesAmount monthly_sales_amount = 26; // 月销售额
    Type               type                 = 27; // 类型
    Version            version              = 28; // 版本
    State              state                = 29; // 客户状态
    string             saler                = 30; // 销售负责人
    uint64             contract_amount      = 31; // 合同金额
    uint64             maintenance_amount   = 32; // 维护金额
    string             remark               = 33; // 备注
    uint64             up_time              = 34; // 上线日期
    uint64             downline_time        = 35; // 下线日期
    uint64             renewal_time         = 36; // 续费日期
    uint64             handover_time        = 37; // 交接日期
}

// 站点
message Station {
    option (dao.partition_count) = 1;
    option (dao.model_type)      = TYPE_ENTERPRISE_STATION;

    enum Type {
        TYPE_UNSPECIFIED = 0;
        NORMAL           = 1; // 普通站点
    }

    message Attrs {
        repeated uint64 available_city_ids = 1; // 可配送城市
    }

    // @inject_tag: gorm:"PRIMARY_KEY"
    uint64 station_id  = 1;
    uint64 create_time = 5;
    uint64 update_time = 6;

    uint64 group_id             = 12; // 站点所属的 group id
    uint64 default_quotation_id = 13; // 站点绑定的默认报价单

    Attrs   attrs       = 20;                                                  // 额外属性
    string  name        = 23 [ (validate.rules).string = {min_len : 1} ];      // 站点名称
    string  description = 24;                                                  // 站点描述
    bool    is_valid    = 28;                                                  // 是否启用站点
    Type    type        = 21 [ (validate.rules).message = {required: true} ];     // 站点类型
    Address address     = 22 [ (validate.rules).message = {required : true} ]; // 地址
}

// 账期计算方式
enum CreditType {
    CREDIT_TYPE_UNSPECIFIED  = 0;
    CREDIT_TYPE_AMOUNT       = 1; // 按照授信额度
    CREDIT_TYPE_DAILY        = 3; // 日结
    CREDIT_TYPE_WEEKLY       = 4; // 周结
    CREDIT_TYPE_MONTHLY      = 5; // 月结
    CREDIT_TYPE_CUSTOMIZED   = 6; // 自定义
    CREDIT_TYPE_HALF_MONTHLY = 8; // 半月结
}

// 供应商
message Supplier {
    option (dao.partition_count) = 1;
    option (dao.model_type)      = TYPE_ENTERPRISE_SUPPLIER;

    //    // 账期计算方式
    //    enum CreditType {
    //        CREDIT_TYPE_UNSPECIFIED  = 0;
    //        CREDIT_TYPE_DAILY        = 3; // 日结
    //        CREDIT_TYPE_WEEKLY       = 4; // 周结
    //        CREDIT_TYPE_MONTHLY      = 5; // 月结
    //        CREDIT_TYPE_HALF_MONTHLY = 8; // 半月结
    //    }

    message Attrs {
        ChinaVatInvoice china_vat_invoice            = 1;
        repeated common.Image qualification_images   = 2;
        repeated uint64       available_category_ids = 3; // 可供应商品分类 ID。供应商和商品之间的关系是松散的，只是提供一个提示的作用。同时只会通过供应商找到商品分类，不会通过商品分类去找供应商。
    }

    // @inject_tag: gorm:"PRIMARY_KEY"
    uint64 supplier_id = 1; // 主键
    uint64 status      = 2; // 状态bitmap // 目前未使用
    uint64 create_time = 4; // 创建时间
    uint64 update_time = 5; // 修改时间
    uint64 delete_time = 6; // 删除时间，非0表示已删除

    uint64 group_id            = 10;
    uint64 default_purchase_id = 11 [ deprecated = true ]; //  默认采购员 ID（实际上是一个 group user id），可能为空。// 2020-10-15: 产品说这个字段不需要了

    string     name            = 20 [ (validate.rules).string = {min_len : 1} ];
    string     description     = 21;
    bool       is_valid        = 22; // 是否启用供应商
    Address    address         = 23; // 地址 // TODO: address 应该设置为必填
    CreditType credit_type     = 24;
    string     phone           = 26;                                             // 联系电话
    string     customized_code = 27 [ (validate.rules).string = {min_len : 1} ]; // 供应商自定义编码（供应商编号）

    Attrs attrs = 30; // 其他属性
}

// 配送承包商
message DistributionContractor {
    option (dao.partition_count) = 10;
    option (dao.model_type)      = TYPE_ENTERPRISE_DISTRIBUTION_CONTRACTOR;

    // @inject_tag: gorm:"PRIMARY_KEY"
    uint64 distribution_contractor_id = 1;
    uint64 create_time                = 2;
    uint64 update_time                = 3;
    uint64 delete_time                = 4;

    uint64 group_id = 10;

    string name = 20 [ (validate.rules).string = {min_len : 1} ]; // 承包商名字，Group 内部唯一
}

// 权限
//
// 权限的定义枚举。由前端维护分类的中英文名称、权限的中英文名称、权限分类和权限的映射关系、权限的排列顺序。
// 这个枚举中会使用注释标记分类和权限，但是以前端代码中的为准。如果产品经理对分类或权限名称有修改，应当同步
// 修改这个枚举中的注释。
//
// 枚举的命名规范：
//      PERMISSION_<模块名>_<操作名>_<数据结构名> （<模块名>使用后台的服务名，而不是前端显示的权限分类名）
// 比如：
//      PERMISSION_MERCHANDISE_VIEW_QUOTATION   = 10; // 查看报价单
//      PERMISSION_MERCHANDISE_CREATE_QUOTATION = 11; // 新建报价单
//      PERMISSION_MERCHANDISE_UPDATE_QUOTATION = 12; // 编辑报价单
//      PERMISSION_MERCHANDISE_DELETE_QUOTATION = 13; // 删除报价单
//
// 枚举的值规范：
//      枚举值不要超过 1023，受 auth.UserInfo 的压缩格式表达限制。
//      一般情况下每种数据结构分配 10 或 20 个数字。方便后续更多权限填充时，可以做到相同的数据结构数字连续。
//
enum Permission {
    PERMISSION_UNSPECIFIED = 0;

    // 商品	报价单管理
    PERMISSION_MERCHANDISE_VIEW_QUOTATION   = 10; // 查看报价单
    PERMISSION_MERCHANDISE_CREATE_QUOTATION = 11; // 新建报价单
    PERMISSION_MERCHANDISE_UPDATE_QUOTATION = 12; // 编辑报价单
    PERMISSION_MERCHANDISE_DELETE_QUOTATION = 13; // 删除报价单

    // 商品	商品管理
    PERMISSION_MERCHANDISE_VIEW_NOT_PACKAGE_SKU_SSU   = 20; // 查看商品
    PERMISSION_MERCHANDISE_CREATE_NOT_PACKAGE_SKU_SSU = 21; // 新建商品
    PERMISSION_MERCHANDISE_UPDATE_NOT_PACKAGE_SKU_SSU = 22; // 编辑商品
    PERMISSION_MERCHANDISE_DELETE_NOT_PACKAGE_SKU_SSU = 23; // 删除商品

    // 商品	包材管理
    PERMISSION_MERCHANDISE_VIEW_PACKAGE_SKU_SSU   = 30; // 查看包材
    PERMISSION_MERCHANDISE_CREATE_PACKAGE_SKU_SSU = 31; // 新建包材
    PERMISSION_MERCHANDISE_UPDATE_PACKAGE_SKU_SSU = 32; // 编辑包材
    PERMISSION_MERCHANDISE_DELETE_PACKAGE_SKU_SSU = 33; // 删除包材

    // 商品	生产BOM管理
    PERMISSION_PRODUCTION_VIEW_BOM   = 40; // 查看生产BOM
    PERMISSION_PRODUCTION_CREATE_BOM = 41; // 新建生产BOM
    PERMISSION_PRODUCTION_UPDATE_BOM = 42; // 编辑生产BOM
    PERMISSION_PRODUCTION_DELETE_BOM = 43; // 删除生产BOM

    // 商品	分类管理
    PERMISSION_MERCHANDISE_VIEW_CATEGORY   = 50; // 查看分类
    PERMISSION_MERCHANDISE_CREATE_CATEGORY = 51; // 新建分类
    PERMISSION_MERCHANDISE_UPDATE_CATEGORY = 52; // 编辑分类
    PERMISSION_MERCHANDISE_DELETE_CATEGORY = 53; // 删除分类

    // 菜谱 菜谱设置
    PERMISSION_ESHOP_VIEW_MENU          = 500;                       // 查看菜谱
    PERMISSION_ESHOP_UPDATE_MENU        = 502;                       // 编辑菜谱设置
    PERMISSION_ESHOP_VIEW_MENU_DETAIL   = 504 [ deprecated = true ]; // 查看菜谱详情
    PERMISSION_ESHOP_UPDATE_MENU_DETAIL = 505;                       // 编辑菜谱详情
    PERMISSION_ESHOP_CREATE_MENU        = 501;                       // 新建菜谱
    PERMISSION_ESHOP_DELETE_MENU        = 503;                       // 删除菜谱

    // 菜谱 菜谱餐次管理
    PERMISSION_ESHOP_VIEW_MENU_PERIOD   = 510; // 查看菜谱餐次
    PERMISSION_ESHOP_CREATE_MENU_PERIOD = 511; // 新建菜谱餐次
    PERMISSION_ESHOP_UPDATE_MENU_PERIOD = 512; // 编辑菜谱餐次
    PERMISSION_ESHOP_DELETE_MENU_PERIOD = 513; // 删除菜谱餐次

    // 订单	订单列表
    PERMISSION_ORDER_VIEW_ORDER              = 60; // 查看订单
    PERMISSION_ORDER_CREATE_ORDER            = 61; // 新建订单
    PERMISSION_ORDER_UPDATE_ORDER            = 62; // 编辑订单
    PERMISSION_ORDER_DELETE_ORDER            = 63; // 删除订单
    PERMISSION_ORDER_AMEND_ORDER             = 64; // 补录订单
    PERMISSION_ORDER_RELEASE_PROCESS_PLAN    = 65; // 发布加工品计划
    PERMISSION_ORDER_RELEASE_NONPROCESS_PLAN = 66; // 发布非加工品计划

    // 订单 团餐订单
    PERMISSION_ORDER_VIEW_ESHOP_STUDENT_ORDER   = 530; // 查看学生订单
    PERMISSION_ORDER_DELETE_ESHOP_STUDENT_ORDER = 531; // 删除学生订单
    PERMISSION_ORDER_VIEW_ESHOP_STUFF_ORDER     = 532; // 查看职工订单
    PERMISSION_ORDER_DELETE_ESHOP_STUFF_ORDER   = 533; // 删除职工订单
    PERMISSION_ORDER_VIEW_LEAVE_APPLICATION     = 539; // 查看请假管理

    // 采购	采购计划
    PERMISSION_PURCHASE_VIEW_PURCHASE_TASK   = 70; // 查看计划
    PERMISSION_PURCHASE_CREATE_PURCHASE_TASK = 71; // 新建采购计划
    PERMISSION_PURCHASE_UPDATE_PURCHASE_TASK = 72; // 编辑计划
    PERMISSION_PURCHASE_DELETE_PURCHASE_TASK = 73; // 删除计划

    // 采购	采购单据
    PERMISSION_PURCHASE_VIEW_PURCHASE_SHEET   = 80; // 查看采购单据
    PERMISSION_PURCHASE_CREATE_PURCHASE_SHEET = 81; // 新建采购单据
    PERMISSION_PURCHASE_UPDATE_PURCHASE_SHEET = 82; // 编辑采购单据
    PERMISSION_PURCHASE_DELETE_PURCHASE_SHEET = 83; // 删除采购单据

    // 采购	采购员
    PERMISSION_ENTERPRISE_VIEW_PURCHASER   = 90; // 查看采购员
    PERMISSION_ENTERPRISE_CREATE_PURCHASER = 91; // 新建采购员
    PERMISSION_ENTERPRISE_UPDATE_PURCHASER = 92; // 编辑采购员
    PERMISSION_ENTERPRISE_DELETE_PURCHASER = 93; // 删除采购员

    // 采购	询价记录
    PERMISSION_PURCHASE_VIEW_INQUIRY_PRICE   = 100; // 查看询价记录
    PERMISSION_PURCHASE_IMPORT_INQUIRY_PRICE = 101; // 导入询价

    // 生产	计划管理
    PERMISSION_PRODUCTION_LIST_PRODUCETASK   = 110; // 查看生产计划
    PERMISSION_PRODUCTION_CREATE_PRODUCETASK = 111; // 新建生产计划
    PERMISSION_PRODUCTION_UPDATE_PRODUCETASK = 112; // 编辑生产计划
    PERMISSION_PRODUCTION_DELETE_PRODUCETASK = 113; // 删除生产计划
    PERMISSION_PRODUCTION_LIST_PACKTASK      = 120; // 查看包装计划
    PERMISSION_PRODUCTION_CREATE_PACKTASK    = 121; // 新建包装计划
    PERMISSION_PRODUCTION_UPDATE_PACKTASK    = 122; // 编辑包装计划
    PERMISSION_PRODUCTION_DELETE_PACKTASK    = 123; // 删除包装计划

    // 生产	生产分析
    PERMISSION_PRODUCTION_VIEW_PRODUCEPROGRESS  = 130; // 查看生产进度
    PERMISSION_PRODUCTION_VIEW_PACKPROGRESS     = 131; // 查看包装进度
    PERMISSION_PRODUCTION_VIEW_PRODUCEANALYTICS = 132; // 查看生产报表
    PERMISSION_PRODUCTION_VIEW_PACKANALYTICS    = 133; // 查看包装报表
    PERMISSION_PRODUCTION_PRINT_BOX_LABLE       = 134; // 打印箱签

    // 配送	配送任务
    PERMISSION_DELIVERY_VIEW_TASK   = 140; // 查看配送任务
    PERMISSION_DELIVERY_UPDATE_TASK = 141; // 编辑配送任务
    PERMISSION_DELIVERY_PRINT_TASK  = 142; // 打印配送任务	包括单据打印和批量打印

    // 配送	司机管理
    PERMISSION_ENTERPRISE_VIEW_DRIVER   = 150; // 查看司机
    PERMISSION_ENTERPRISE_CREATE_DRIVER = 151; // 新建司机
    PERMISSION_ENTERPRISE_UPDATE_DRIVER = 152; // 编辑司机
    PERMISSION_ENTERPRISE_DELETE_DRIVER = 153; // 删除司机

    PERMISSION_ENTERPRISE_CREATE_DISTRIBUTION_CONTRACTOR = 160; // 新建承运商
    PERMISSION_ENTERPRISE_UPDATE_DISTRIBUTION_CONTRACTOR = 161; // 编辑承运商
    PERMISSION_ENTERPRISE_DELETE_DISTRIBUTION_CONTRACTOR = 162; // 删除承运商

    // 配送	线路管理
    PERMISSION_DELIVERY_VIEW_ROUTE   = 170; // 查看线路
    PERMISSION_DELIVERY_CREATE_ROUTE = 171; // 新建线路
    PERMISSION_DELIVERY_UPDATE_ROUTE = 172; // 编辑线路	包括商户配置
    PERMISSION_DELIVERY_DELETE_ROUTE = 173; // 删除线路

    // 仓储	采购库存
    PERMISSION_INVENTORY_VIEW_PURCHASE_IN_SHEET           = 180; // 查看采购入库
    PERMISSION_INVENTORY_CREATE_PURCHASE_IN_SHEET         = 181; // 新建采购入库
    PERMISSION_INVENTORY_UPDATE_PURCHASE_IN_SHEET         = 182; // 编辑采购入库
    PERMISSION_INVENTORY_SUBMIT_PURCHASE_IN_SHEET         = 183; // 提交采购入库
    PERMISSION_INVENTORY_APPROVE_PURCHASE_IN_SHEET        = 184; // 审核采购入库
    PERMISSION_INVENTORY_NOT_APPROVE_PURCHASE_IN_SHEET    = 185; // 驳回采购入库
    PERMISSION_INVENTORY_CANCEL_APPROVE_PURCHASE_IN_SHEET = 186; // 反审核采购入库
    PERMISSION_INVENTORY_DELETE_PURCHASE_IN_SHEET         = 187; // 删除采购入库
    PERMISSION_INVENTORY_EXPORT_PURCHASE_IN_SHEET         = 188; // 导出采购入库	包括单据导出和批量导出
    PERMISSION_INVENTORY_PRINT_PURCHASE_IN_SHEET          = 189; // 打印采购入库	包括单据打印和批量打印

    PERMISSION_INVENTORY_VIEW_REFUND_OUT_SHEET           = 200; // 查看采购退货出库
    PERMISSION_INVENTORY_CREATE_REFUND_OUT_SHEET         = 201; // 新建采购退货出库
    PERMISSION_INVENTORY_UPDATE_REFUND_OUT_SHEET         = 202; // 编辑采购退货出库
    PERMISSION_INVENTORY_SUBMIT_REFUND_OUT_SHEET         = 203; // 提交采购退货出库
    PERMISSION_INVENTORY_APPROVE_REFUND_OUT_SHEET        = 204; // 审核采购退货出库
    PERMISSION_INVENTORY_NOT_APPROVE_REFUND_OUT_SHEET    = 205; // 驳回采购退货出库
    PERMISSION_INVENTORY_CANCEL_APPROVE_REFUND_OUT_SHEET = 206; // 反审核采购退货出库
    PERMISSION_INVENTORY_DELETE_REFUND_OUT_SHEET         = 207; // 删除采购退货出库
    PERMISSION_INVENTORY_EXPORT_REFUND_OUT_SHEET         = 208; // 导出采购退货出库	包括单据导出和批量导出
    PERMISSION_INVENTORY_PRINT_REFUND_OUT_SHEET          = 209; // 打印采购退货出库	包括单据打印和批量打印

    // 仓储	销售库存
    PERMISSION_INVENTORY_VIEW_SALE_OUT_SHEET           = 220; // 查看销售出库
    PERMISSION_INVENTORY_CREATE_SALE_OUT_SHEET         = 221; // 新建销售出库
    PERMISSION_INVENTORY_UPDATE_SALE_OUT_SHEET         = 222; // 编辑销售出库
    PERMISSION_INVENTORY_SUBMIT_SALE_OUT_SHEET         = 223; // 提交销售出库
    PERMISSION_INVENTORY_APPROVE_SALE_OUT_SHEET        = 224; // 审核销售出库
    PERMISSION_INVENTORY_NOT_APPROVE_SALE_OUT_SHEET    = 225; // 驳回销售出库
    PERMISSION_INVENTORY_CANCEL_APPROVE_SALE_OUT_SHEET = 226; // 反审核销售出库
    PERMISSION_INVENTORY_DELETE_SALE_OUT_SHEET         = 227; // 删除销售出库
    PERMISSION_INVENTORY_EXPORT_SALE_OUT_SHEET         = 228; // 导出销售出库	包括单据导出和批量导出
    PERMISSION_INVENTORY_PRINT_SALE_OUT_SHEET          = 229; // 打印销售出库	包括单据打印和批量打印

    // 仓储	生产库存
    PERMISSION_INVENTORY_VIEW_PRODUCT_IN           = 230; // 查看生产入库
    PERMISSION_INVENTORY_CREATE_PRODUCT_IN         = 231; // 新建生产入库
    PERMISSION_INVENTORY_UPDATE_PRODUCT_IN         = 232; // 编辑生产入库
    PERMISSION_INVENTORY_SUBMIT_PRODUCT_IN         = 233; // 提交生产入库
    PERMISSION_INVENTORY_APPROVE_PRODUCT_IN        = 234; // 审核生产入库
    PERMISSION_INVENTORY_NOT_APPROVE_PRODUCT_IN    = 235; // 驳回生产入库
    PERMISSION_INVENTORY_CANCEL_APPROVE_PRODUCT_IN = 236; // 反审核生产入库
    PERMISSION_INVENTORY_DELETE_PRODUCT_IN         = 237; // 删除生产入库
    PERMISSION_INVENTORY_EXPORT_PRODUCT_IN         = 238; // 导出生产入库	包括单据导出和批量导出
    PERMISSION_INVENTORY_PRINT_PRODUCT_IN          = 239; // 打印生产入库	包括单据打印和批量打印

    PERMISSION_INVENTORY_VIEW_MATERIAL_IN_250           = 250; // 查看退料入库
    PERMISSION_INVENTORY_CREATE_MATERIAL_IN_251         = 251; // 新建退料入库
    PERMISSION_INVENTORY_UPDATE_MATERIAL_IN_252         = 252; // 编辑退料入库
    PERMISSION_INVENTORY_SUBMIT_MATERIAL_IN_253         = 253; // 提交退料入库
    PERMISSION_INVENTORY_APPROVE_MATERIAL_IN_254        = 254; // 审核退料入库
    PERMISSION_INVENTORY_NOT_APPROVE_MATERIAL_IN_255    = 255; // 驳回退料入库
    PERMISSION_INVENTORY_CANCEL_APPROVE_MATERIAL_IN_256 = 256; // 反审核退料入库
    PERMISSION_INVENTORY_DELETE_MATERIAL_IN_257         = 257; // 删除退料入库
    PERMISSION_INVENTORY_EXPORT_MATERIAL_IN_258         = 258; // 导出退料入库	包括单据导出和批量导出
    PERMISSION_INVENTORY_PRINT_MATERIAL_IN_259          = 259; // 打印退料入库	包括单据打印和批量打印

    PERMISSION_INVENTORY_VIEW_MATERIAL_OUT           = 270; // 查看领料出库
    PERMISSION_INVENTORY_CREATE_MATERIAL_OUT         = 271; // 新建领料出库
    PERMISSION_INVENTORY_UPDATE_MATERIAL_OUT         = 272; // 编辑领料出库
    PERMISSION_INVENTORY_SUBMIT_MATERIAL_OUT         = 273; // 提交领料出库
    PERMISSION_INVENTORY_APPROVE_MATERIAL_OUT        = 274; // 审核领料出库
    PERMISSION_INVENTORY_NOT_APPROVE_MATERIAL_OUT    = 275; // 驳回领料出库
    PERMISSION_INVENTORY_CANCEL_APPROVE_MATERIAL_OUT = 276; // 反审核领料出库
    PERMISSION_INVENTORY_DELETE_MATERIAL_OUT         = 277; // 删除领料出库
    PERMISSION_INVENTORY_EXPORT_MATERIAL_OUT         = 278; // 导出领料出库	包括单据导出和批量导出
    PERMISSION_INVENTORY_PRINT_MATERIAL_OUT          = 279; // 打印领料出库	包括单据打印和批量打印

    // 仓储	其他库存
    PERMISSION_INVENTORY_VIEW_OTHER_IN           = 290; // 查看其他入库
    PERMISSION_INVENTORY_CREATE_OTHER_IN         = 291; // 新建其他入库
    PERMISSION_INVENTORY_UPDATE_OTHER_IN         = 292; // 编辑其他入库
    PERMISSION_INVENTORY_SUBMIT_OTHER_IN         = 293; // 提交其他入库
    PERMISSION_INVENTORY_APPROVE_OTHER_IN        = 294; // 审核其他入库
    PERMISSION_INVENTORY_NOT_APPROVE_OTHER_IN    = 295; // 驳回其他入库
    PERMISSION_INVENTORY_CANCEL_APPROVE_OTHER_IN = 296; // 反审核其他入库
    PERMISSION_INVENTORY_DELETE_OTHER_IN         = 297; // 删除其他入库
    PERMISSION_INVENTORY_EXPORT_OTHER_IN         = 298; // 导出其他入库	包括单据导出和批量导出
    PERMISSION_INVENTORY_PRINT_OTHER_IN          = 299; // 打印其他入库	包括单据打印和批量打印

    PERMISSION_INVENTORY_VIEW_OTHER_OUT           = 310; // 查看其他出库
    PERMISSION_INVENTORY_CREATE_OTHER_OUT         = 311; // 新建其他出库
    PERMISSION_INVENTORY_UPDATE_OTHER_OUT         = 312; // 编辑其他出库
    PERMISSION_INVENTORY_SUBMIT_OTHER_OUT         = 313; // 提交其他出库
    PERMISSION_INVENTORY_APPROVE_OTHER_OUT        = 314; // 审核其他出库
    PERMISSION_INVENTORY_NOT_APPROVE_OTHER_OUT    = 315; // 驳回其他出库
    PERMISSION_INVENTORY_CANCEL_APPROVE_OTHER_OUT = 316; // 反审核其他出库
    PERMISSION_INVENTORY_DELETE_OTHER_OUT         = 317; // 删除其他出库
    PERMISSION_INVENTORY_EXPORT_OTHER_OUT         = 318; // 导出其他出库	包括单据导出和批量导出
    PERMISSION_INVENTORY_PRINT_OTHER_OUT          = 319; // 打印其他出库	包括单据打印和批量打印

    PERMISSION_INVENTORY_VIEW_ADJUST_SHEET = 330; // 查看货值调整单

    PERMISSION_INVENTORY_VIEW_INVENTORY_SHEET           = 340; // 查看盘点单
    PERMISSION_INVENTORY_CREATE_INVENTORY_SHEET         = 341; // 新建盘点单
    PERMISSION_INVENTORY_UPDATE_INVENTORY_SHEET         = 342; // 编辑盘点单
    PERMISSION_INVENTORY_SUBMIT_INVENTORY_SHEET         = 343; // 提交盘点单
    PERMISSION_INVENTORY_APPROVE_INVENTORY_SHEET        = 344; // 审核盘点单
    PERMISSION_INVENTORY_NOT_APPROVE_INVENTORY_SHEET    = 345; // 驳回盘点单
    PERMISSION_INVENTORY_CANCEL_APPROVE_INVENTORY_SHEET = 346; // 反审核盘点单
    PERMISSION_INVENTORY_EXPORT_INVENTORY_SHEET         = 347; // 导出盘点单	包括单据导出和批量导出
    PERMISSION_INVENTORY_PRINT_INVENTORY_SHEET          = 348; // 打印盘点单	包括单据打印和批量打印
    PERMISSION_INVENTORY_DELETE_INVENTORY_SHEET         = 349; // 删除盘点单

    PERMISSION_INVENTORY_VIEW_STOCK              = 360; // 库存账表
    PERMISSION_INVENTORY_VIEW_STOCK_LIST         = 361; // 查看库存总览
    PERMISSION_INVENTORY_EXPORT_STOCK_LIST       = 362; // 导出库存总览
    PERMISSION_INVENTORY_VIEW_IN_STOCK_LOG       = 363; // 查看入库明细
    PERMISSION_INVENTORY_EXPORT_IN_STOCK_LOG     = 364; // 导出入库明细
    PERMISSION_INVENTORY_VIEW_OUT_STOCK_LOG      = 365; // 查看出库明细
    PERMISSION_INVENTORY_EXPORT_OUT_STOCK_LOG    = 366; // 导出出库明细
    PERMISSION_INVENTORY_VIEW_CHANGE_STOCK_LOG   = 367; // 查看商品台账
    PERMISSION_INVENTORY_EXPORT_CHANGE_STOCK_LOG = 368; // 导出商品台账

    // 客户	餐饮客户管理
    PERMISSION_ENTERPRISE_VIEW_CUSTOMER   = 380; // 查看客户
    PERMISSION_ENTERPRISE_CREATE_CUSTOMER = 381; // 新建客户
    PERMISSION_ENTERPRISE_UPDATE_CUSTOMER = 382; // 编辑客户
    PERMISSION_ENTERPRISE_DELETE_CUSTOMER = 383; // 删除客户

    // 客户	餐饮客户邀请码
    PERMISSION_ENTERPRISE_VIEW_INVITATION_CODE = 390; // 查看餐饮客户邀请码

    // 客户	学校班级管理
    PERMISSION_ENTERPRISE_VIEW_SCHOOL_CLASS   = 520; // 查看学校班级
    PERMISSION_ENTERPRISE_CREATE_SCHOOL_CLASS = 521; // 新建学校班级
    PERMISSION_ENTERPRISE_UPDATE_SCHOOL_CLASS = 522; // 编辑学校班级
    PERMISSION_ENTERPRISE_DELETE_SCHOOL_CLASS = 523; // 删除学校班级

    // 客户	学生信息管理
    PERMISSION_ENTERPRISE_VIEW_STUDENT = 540; // 查看学生信息

    // 客户	职工信息管理
    PERMISSION_ENTERPRISE_VIEW_STUFF = 541; // 查看职工信息

    // 客户	学校邀请码
    PERMISSION_ENTERPRISE_VIEW_ESHOP_INVITATION_CODE = 391; // 查看学校邀请码

    // 财务 团餐结算
    PERMISSION_ANALYTICS_VIEW_MENU_SETTLEMENT = 550; // 查看团餐对账单

    // 设置	运营时间
    PERMISSION_ENTERPRISE_VIEW_SERVICE_PERIOD   = 400; // 查看运营时间
    PERMISSION_ENTERPRISE_CREATE_SERVICE_PERIOD = 401; // 新建运营时间
    PERMISSION_ENTERPRISE_UPDATE_SERVICE_PERIOD = 402; // 编辑运营时间
    PERMISSION_ENTERPRISE_DELETE_SERVICE_PERIOD = 403; // 删除运营时间

    // 设置	计划交期设置
    PERMISSION_PREFERENCE_VIEW_APPOINT_TIME_SETTINGS   = 410; // 查看计划交期
    PERMISSION_PREFERENCE_UPDATE_APPOINT_TIME_SETTINGS = 411; // 编辑计划交期

    // 设置	采购设置
    PERMISSION_PREFERENCE_VIEW_PURCHASE_SETTINGS   = 420; // 查看采购设置
    PERMISSION_PREFERENCE_UPDATE_PURCHASE_SETTINGS = 421; // 编辑采购设置

    // 设置	生产设置
    PERMISSION_PRODUCTION_VIEW_SETTINGS   = 430; // 查看生产设置
    PERMISSION_PRODUCTION_UPDATE_SETTINGS = 431; // 编辑生产设置

    // 设置	进销存设置
    PERMISSION_PREFERENCE_INVENTORY_SETTINGS  = 440; // 查看进销存设置
    PERMISSION_PREFERENCE_PRODUCTION_SETTINGS = 441; // 编辑生产设置

    // 设置	导入模板设置
    PERMISSION_PREFERENCE_VIEW_IMPORT_TEMPLATE   = 450; // 查看导入模板
    PERMISSION_PREFERENCE_CREATE_IMPORT_TEMPLATE = 451; // 新建导入模板
    PERMISSION_PREFERENCE_UPDATE_IMPORT_TEMPLATE = 452; // 编辑导入模板
    PERMISSION_PREFERENCE_DELETE_IMPORT_TEMPLATE = 453; // 删除导入模板

    // 设置	打印模板设置
    PERMISSION_PREFERENCE_VIEW_PRINTING_TEMPLATE   = 460; // 查看打印模板
    PERMISSION_PREFERENCE_CREATE_PRINTING_TEMPLATE = 461; // 新建打印模板
    PERMISSION_PREFERENCE_UPDATE_PRINTING_TEMPLATE = 462; // 编辑打印模板
    PERMISSION_PREFERENCE_DELETE_PRINTING_TEMPLATE = 463; // 删除打印模板

    // 设置	店铺装修
    PERMISSION_PREFERENCE_UPDATE_SOCIAL_SHOP_LAYOUT    = 490; // B端商城设置
    PERMISSION_PREFERENCE_UPDATE_EDUCATION_SHOP_LAYOUT = 491; // 学生餐商城设置

    // 工位屏	工位屏
    PERMISSION_MES_VIEW_PRODUCE = 470; // 查看生产模块
    PERMISSION_MES_VIEW_PACK    = 471; // 查看包装模块
    PERMISSION_MES_VIEW_SORTING = 472; // 查看分拣模块

    // 分拣
    PERMISSION_SORTING_VIEW_SORTING_INFO          = 480; // 查看分拣进度
    PERMISSION_SORTING_VIEW_SORTING_TASK          = 481; // 查看分拣明细
    PERMISSION_SORTING_EDIT_SORTING_TASK          = 482; // 修改分拣明细
    PERMISSION_SORTING_EXPORT_SORTING_PERFORMANCE = 483; // 导出分拣绩效
}

// 内部员工用户
message GroupUser {
    option (dao.partition_count) = 10;
    option (dao.model_type)      = TYPE_ENTERPRISE_GROUP_USER;

    enum Type {
        UNSPECIFIED = 0;
        GROUP_ADMIN = 8; // Group 管理员
        NORMAL      = 9; // 普通用户
    }

    enum Status {
        STATUS_UNSPECIFIED            = 0;
        STATUS_CAN_LOGIN_PURCHASE_APP = 256; // 是否可以登录采购 App。只有用户绑定了角色类型为 Role.Type.BUILT_IN_PURCHASER 的角色时，这个字段才有意义。
        STATUS_CAN_LOGIN_DRIVER_APP   = 512; // 是否可以登录司机 App。只有用户绑定了角色类型为 Role.Type.BUILT_IN_DRIVER 的角色时，这个字段才有意义。
    }

    message Attrs {
        bool            visable_all_stations = 1; // 是否可见所属 group 下的所有站点
        repeated uint64 visable_station_ids  = 2; // 如果 visable_all_stations 为 false，那么这个字段表示员工可见站点
        repeated uint64 permission_ids       = 3; // 用户所拥有的权限。这个字段是冗余字段。

        // 用户绑定供应商 ID。只有用户绑定了角色类型为 Role.Type.BUILT_IN_PURCHASER 的角色时，这个字段才有意义。
        //
        // 前端需要注意，这个字段中储存的 customer_id 未必是合法的，因为 customer 被删除后这个字段
        // 中储存的 customer_id 并不会被删除等原因。
        repeated uint64 bounded_customer_ids = 4;

        // 用户绑定的配送承包商 ID。只有用户绑定了角色类型为 Role.Type.BUILT_IN_DRIVER 的角色时，这个字段才有意义。
        //
        // 前端需要注意，这个字段中储存的 distribution_contractor_id 未必是合法的，
        repeated uint64 distribution_contractor_ids = 5;

        // 司机车牌号。只有用户绑定了角色类型为 Role.Type.BUILT_IN_DRIVER 的角色时，这个字段才有意义。
        string car_license_plate_number = 6;

        // 身份证号
        string id_number = 7;
    }

    // @inject_tag: gorm:"PRIMARY_KEY"
    uint64 group_user_id = 1;
    uint64 status        = 2; // 状态bitmap
    uint64 create_time   = 4; // 创建时间
    uint64 update_time   = 5; // 修改时间
    uint64 delete_time   = 6; // 删除时间，非0表示已删除

    uint64 group_id   = 10;
    uint64 account_id = 11;

    // 配送承包商的 id。只有用户绑定了角色类型为 Role.Type.BUILT_IN_DRIVER 的角色时，这个字段才有意义。
    uint64 distribution_contractor_id = 12;

    string name     = 20 [ (validate.rules).string = {min_len : 1} ]; // 用户名字，Group 内部唯一
    bool   is_valid = 21;                                             // 是否有效
    Type   type     = 27 [ (validate.rules).message = {required: true} ];
    Attrs  attrs    = 28;

    // 以下是冗余 account 当中的字段，由后台维护，对于前端来说是只读的
    string username = 40;
    string phone    = 41;
    string email    = 42;
}

// 内部员工角色
message Role {
    option (dao.partition_count) = 10;
    option (dao.model_type)      = TYPE_ENTERPRISE_ROLE;

    enum Type {
        UNSPECIFIED = 0;
        NORMAL      = 1; // 普通角色，可以由用户去管理
        // 以下内置角色无法被用户删除，而且强制绑定了部分权限
        BUILT_IN_DRIVER    = 2; // 内建角色 - 司机
        BUILT_IN_PURCHASER = 3; // 内建角色 - 采购员
        BUILT_IN_ADMIN     = 4; // 内建角色 - 管理员
    }

    // @inject_tag: gorm:"PRIMARY_KEY"
    uint64 role_id     = 1;
    uint64 create_time = 2;
    uint64 update_time = 3;
    uint64 delete_time = 4;

    uint64 group_id = 15;

    string name        = 20 [ (validate.rules).string = {min_len : 1} ];
    string description = 21;
    Type   type        = 23 [ (validate.rules).message = {required: true} ];

    reserved 24;
}

// 记录 group 和 permission 的多对多关系
message GroupPermissionRelation {
    option (dao.partition_count) = 1;
    option (dao.primary_key)     = "relation_id";

    // @inject_tag: gorm:"PRIMARY_KEY"
    uint64 relation_id = 1;
    uint64 create_time = 2;
    uint64 update_time = 3;
    uint64 delete_time = 4;

    uint64 group_id      = 11;
    uint64 permission_id = 12;
}

// 记录 role 和 permission 的多对多关系
message RolePermissionRelation {
    option (dao.partition_count) = 100;
    option (dao.primary_key)     = "relation_id";

    // @inject_tag: gorm:"PRIMARY_KEY"
    uint64 relation_id = 1;
    uint64 create_time = 2;
    uint64 update_time = 3;
    uint64 delete_time = 4;

    uint64 role_id       = 11;
    uint64 permission_id = 12;
    uint64 group_id      = 13;
}

/* ROLE_EMPLOYEE_RELATION 记录 role 和 group_user 的多对多关系 */
message GroupUserRoleRelation {
    option (dao.partition_count) = 100;
    option (dao.primary_key)     = "relation_id";

    // @inject_tag: gorm:"PRIMARY_KEY"
    uint64 relation_id = 1;
    uint64 create_time = 2;
    uint64 update_time = 3;
    uint64 delete_time = 4;

    uint64 role_id       = 11;
    uint64 group_user_id = 12;
    uint64 group_id      = 13;
}

/*

运营周期（也称作 运营时间）

# 运营周期是什么？

运营周期是用于限制「下单」和「收货」的时间范围的一种数据结构。

想象一下，你在美团/饿了么上点开了一家餐厅，这家餐厅的上班时间是每天 10:00 ~ 18:00，所以你也只能在这段时间
内下单。由于外卖骑手需要一个小时的送货时间，那么你在下单时，可以选择的收货时间就是 11:00 ~ 19:00。这就是一
个最简单的运营周期的例子。

在上面这个简单的例子中，我们会使用下面的数据去表达这个运营周期：

    order_create_min_time  = 10:00
    order_create_max_time  = 18:00
    order_receive_min_time = 11:00
    order_receive_max_time = 19:00
    order_receive_min_date = 0
    order_receive_max_date = 0

我们会在接下来详细解释每个字段的含义。

# 运营周期中的术语和概念

想象一下，在外卖平台上有一家蛋糕店，营业时间和上面的例子一样依然是 10:00 ~ 18:00。不过由于蛋糕制作起来非常
麻烦，所以蛋糕店收到订单后，需要第二天才能做好。外卖骑手会在营业时间内取货，并经过一个小时的送货后将蛋糕送到你
手上。这个例子中，下单的时间范围是 10:00 ~ 18:00，而收货的时间范围是「次日」的 11:00 ~ 19:00。所以运营时间
的数据结构是：

    order_create_min_time  = 10:00
    order_create_max_time  = 18:00
    order_receive_min_time = 11:00
    order_receive_max_time = 19:00
    order_receive_min_date = 1
    order_receive_max_date = 1

其中 order_receive_min_date 和 order_receive_max_date 为 1，表示收货日期是下单日期的第二天（也就是
下单日 + 1）

----

进一步地，我们假设蛋糕有三天的保质期，制作好之后可以在蛋糕店的冰箱中存放三天。具体来说，如果顾客在星期一下单，那么
顾客可以选择在星期二、星期三或者星期四让外卖骑手取回蛋糕。这种场景下，我们就会将 order_receive_max_date 设置
为 3，最终的数据结构就是：

    order_create_min_time  = 10:00
    order_create_max_time  = 18:00
    order_receive_min_time = 11:00
    order_receive_max_time = 19:00
    order_receive_min_date = 1
    order_receive_max_date = 3

用中文表达就是：下单时间为每日 10:00 ~ 18:00，收货日期为下单日期的第二天、第三天、第四天的 11:00 ~ 19:00。

----

看到这里，你应该对运营周期中的这六个字段有了基本的感性认识。接下来我们讨论运营周期中一个非常重要的话题：跨天。

还是外卖平台的例子，有些店铺的营业时间可能跨越了两天，比如大排档、酒吧和深夜食堂等。我们假设一个大排档，它的营业时间是每天
的 20:00 ~ 第二天 04:00，共营业八个小时。

对于这家大排档来说，顾客在 3月1日 23:00 下单和在 3月2日 01:00 下单其实都属于同一段营业时间中，然而顾客在
3月2日 01:00 下单和在 3月2日 23:00 下单就是在完全不同的两个营业时间段中了。所以我们发现，对于餐厅来说，两次营业
之间的分割和自然日的分割并不相同。于是我们让 order_create_max_time 最大可以到达 48 小时从而解决这个问题。

顺便一提，在一些需要跨天营业的行业中，比如火车运输和深夜电视台中，有一种「三十小时制」的时刻表示法。以下摘抄至
维基百科：

> 30小时制是一种以上午6时为开始的时刻表示法，沒有24小時制之0點到6點，而是標記為24點至30點，這是為了對應日期
> 進位的印象（在半夜生活的人不習慣在半夜換日期）。 又用做廣泛地稱呼所有跨至隔日的時間制，如28小時制、36小時制等。
> 在 三十小时制 中，3月1日的 25:00 实际上就表示 3月2日的凌晨 01:00。我们其实使用了类似的思路去处理跨天的问题。

回到大排档的例子中，我们会使用下面这种写法描述这家餐厅的下单时间范围：

    order_create_min_time = 20:00
    order_create_max_time = 28:00

通过这种方式，我们就能表达营业时间为「20:00 至次日 04:00」的含义。

值得注意的一点，虽然 order_create_max_time 的可选范围为 00:00 ~ 48:00，但是我们要保证 order_create_min_time
和 order_create_max_time 相隔时间小于 24 个小时，不然就会出现一个时间点同时出现在两个周期中的问题。

在跨天的场景中，另一个重要的概念就是「日期」。考虑到「在半夜生活的人不习惯在半夜换日期」，当大排档老板从 3月1日 20:00
开始营业，并在 3月2日 04:00 打烊收摊的这段时期内，其实老板一直认为这是 3月1日。我们称 3月1日 为「周期日期」，表示这个
周期开始的那个时刻所处在的日期。

在代码中执行计算的时候，我们也要处理好实际的「自然日日期」和「周期日期」之间的关系。如果顾客在 3月2日 00:01 下了一笔订单，
我们在计算日期的时候要使用「周期日期」，也就是 3月1日 进行计算。在下面的文字中，我会明确地使用「周期日期」而不是有歧义
的「天」作为单位。

在大排档的例子中，考虑到一小时的配送时间，完整的运营周期的数据结构是：

    order_create_min_time  = 20:00
    order_create_max_time  = 28:00
    order_receive_min_time = 21:00
    order_receive_max_time = 29:00
    order_receive_min_date = 0
    order_receive_max_date = 0

如果顾客在 3月2日 00:01 下了一笔订单，那么下单的「周期日期」就是 3月1日。收货时间范围就是收货的「周期日期」分别加上
order_receive_min_time 和 order_receive_max_time。在这个例子中，下单的「周期日期」为 3月1日，那么收货的时间
范围就是 3月1日的 21:00 到 3月1日的 29:00（也就是自然日 3月2日的凌晨 04:00）。

----

下面我们终于可以明确地描述运营周期六个字段的定义了：

    order_create_min_time:  在下单的「周期日期」中最早的下单时间
    order_create_max_time:  在下单的「周期日期」中最晚的下单时间
    order_receive_min_time: 在收货的「周期日期」中最早的收货时间
    order_receive_max_time: 在收货的「周期日期」中最晚的收货时间
    order_receive_min_date: 下单的「周期日期」和收货的「周期日期」之间最短可以间隔几个「周期日期」
    order_receive_max_date: 下单的「周期日期」和收货的「周期日期」之间最多可以间隔几个「周期日期」

    在一个包含开始和结束的时间区间中，无论跨天还是不跨天，「周期日期」都表示开始时间所在的自然日。
    「下单的『周期日期』」就是 order_create_min_time 所在的日期


----

最后，我们可以假设一个极端的例子，看看大家是否理解了运营周期的概念：

一个跨天营业的深夜蛋糕店。这家店每天营业的时间（可供下单的时间）是 20:00 ~ 次日04:00，而和前面的例子一样，蛋糕需要
在第二天（准确来说是第二个「周期日期」）才能取出，并有三天的保质期，外卖骑手需要一个小时的配送时间。那么，它的运营周期
数据就是：

    order_create_min_time: 20:00
    order_create_max_time: 28:00
    order_create_max_time: 21:00
    order_create_max_time: 29:00
    order_receive_min_date = 1
    order_receive_max_date = 3

如果我们在 3月2日 凌晨 02:00 下单，所属的下单时间区间是 3月1日20:00 ~ 3月1日28:00，那么我们的下单「周期日期」
就是3月1日，所以我们收货「周期日期」就分别是 3月2日、3月3日和 3月4日。在每个取货的「周期周期」，我们可以在
21:00 ~ 29:00 收到货物，于是我们最终可以选择的收货时间就是：

    周期日期 周期日期时间
    03-02   21:00 ~ 29:00
    03-03   21:00 ~ 29:00
    03-04   21:00 ~ 29:00

翻译成自然日时间，就是：

    自然日日期  自然日时间
    03-02   21:00 ~ 23:59
    03-03   00:00 ~ 04:00
    03-03   21:00 ~ 23:59
    03-04   00:00 ~ 04:00
    03-04   21:00 ~ 23:59
    03-05   00:00 ~ 04:00

希望这个例子可以更好地让读者们理解运营周期的概念。
*/
message ServicePeriod {
    option (dao.partition_count) = 10;
    option (dao.model_type)      = TYPE_ENTERPRISE_SERVICE_PERIOD;

    enum Type {
        TYPE_UNSPECIFIED            = 0; // 普通服务周期。用于 Customer 向 Group 下单的场景。
        TYPE_DEFAULT_MENU_PERIOD    = 3; // 餐次服务周期。用于学生向学校/班级下单的场景。适用于通用的 MenuPeriod
        TYPE_CUSTOMIZED_MENU_PERIOD = 4; // 餐次服务周期。用于学生向学校/班级下单的场景。适用于学校/班级自定义的 MenuPeriod
    }

    // @inject_tag: gorm:"PRIMARY_KEY;AUTO_INCREMENT:false"
    uint64 service_period_id = 1;
    // @inject_tag: gorm:"PRIMARY_KEY;AUTO_INCREMENT:false"
    uint64 revision    = 3; // 版本 // TODO: 增加校验条件
    uint64 create_time = 4; // 创建时间
    uint64 update_time = 5; // 修改时间
    uint64 delete_time = 6; // 删除时间，非0表示已删除

    uint64 group_id             = 10; // 运营周期的 group_id。运营周期是属于 group 内共享的数据。
    uint64 menu_period_group_id = 11; // 关联 eshop.MenuPeriodGroupId.menu_period_group_id，仅在 type 为 TYPE_CUSTOMIZED_MENU_PERIOD 是有意义。

    string name        = 20 [ (validate.rules).string.min_len = 1 ];
    string description = 21; // 描述
    Type   type        = 30;

    // 允许订单创建的最早时间和最晚时间，表示从下单时间所在的「周期日期」 00:00:00 以来的毫秒数。
    //
    // 需要满足下面的条件：
    //      0 <= order_create_min_time < 24 hours
    //      0 <= order_create_max_time < 48 hours
    //      0 < order_create_max_time - order_create_min_time < 24 hours
    //
    // 这两个时间组成一个闭区间，意味着在下单时，需要满足 order_create_min_time <= 下单时间 <= order_create_max_time。
    //
    int64 order_create_min_time = 22 [ (validate.rules).int64 = {gte : 0, lt : 86400000} ];
    int64 order_create_max_time = 23 [ (validate.rules).int64 = {gte : 0, lt : 172800000} ];

    // 允许订单收货的最早时间和最晚时间。表示从收货时间所在的「周期日期」 00:00:00 以来的毫秒数
    //
    // 需要满足下面的条件：
    //      0 <= order_receive_min_time < 24 hours
    //      0 <= order_receive_max_time < 48 hours
    //      0 < order_receive_max_time - order_receive_min_time < 24 hours
    //
    // 这两个时间组成一个闭区间，意味着在收货时，需要满足 order_receive_min_time <= 收货时间 <= order_receive_max_time。
    //
    int64 order_receive_min_time = 28 [ (validate.rules).int64 = {gte : 0, lt : 86400000} ];
    int64 order_receive_max_time = 29 [ (validate.rules).int64 = {gte : 0, lt : 172800000} ];

    // 允许订单收货的最早日期和最晚日期，表示从下单「周期日期」和收货「周期日期」之间相间隔的天数
    //
    // 如果 order_receive_min_date 为 0，则表示最早在下单的当天就可以收货
    // 如果 order_receive_min_date 为 1，则表示最早在下单的次日就可以收货
    // 如果 order_receive_min_date 为 N，则表示最早在下单日 + N 天就可以收货
    //
    // 如果 order_receive_max_date 为 0，则表示最晚在下单的当天就必须收货
    // 如果 order_receive_max_date 为 1，则表示最晚在下单的次日就必须收货
    // 如果 order_receive_max_date 为 N，则表示最晚在下单日 + N 天就必须收货
    //
    // 需要满足下面的条件
    //
    // 0 <= order_receive_min_date <= order_receive_max_date
    //
    // 如果不跨天，那么下单时间必须要早于或等于收货时间
    // IF order_receive_min_date == 0 THEN order_create_min_time <= order_receive_min_time
    // IF order_receive_min_date == 0 THEN order_create_max_time <= order_receive_max_time
    //
    int64 order_receive_min_date = 24 [ (validate.rules).int64 = {gte : 0, lte : 60} ];
    int64 order_receive_max_date = 25 [ (validate.rules).int64 = {gte : 0, lte : 60} ];
}

// 国家及地区
message Country {
    option (dao.partition_count) = 1;

    // @inject_tag: gorm:"PRIMARY_KEY"
    uint64 country_id  = 1; // 主键
    uint64 create_time = 4; // 创建时间
    uint64 update_time = 5; // 修改时间
    uint64 delete_time = 6; // 删除时间，非0表示已删除

    // 国家代码
    //
    // 使用《ISO 3166-1两位字母代码》（英語：ISO 3166-1 alpha-2）规范
    // 举例：CN中国；HK香港；IE爱尔兰；JP日本
    string iso_code = 20 [ (validate.rules).string = {len : 2} ];

    // 法定货币代码
    //
    // 使用 ISO 4217 规范
    // 举例：CNY人民币；HKD港元；EUR欧元；JPY日圆
    string currency_iso_code = 21 [ (validate.rules).string = {len : 3} ];
}

// 省级行政分区，比如中国广东省、中国澳门特别行政区、美国加州
message Province {
    option (dao.partition_count) = 1;

    // @inject_tag: gorm:"PRIMARY_KEY"
    uint64 province_id = 1; // 主键
    uint64 revision    = 3; // 版本
    uint64 create_time = 4; // 创建时间
    uint64 update_time = 5; // 修改时间
    uint64 delete_time = 6; // 删除时间，非0表示已删除

    uint64 country_id = 10 [ (validate.rules).uint64 = {gt : 0} ];

    // 城市代码
    //
    // 使用国家统计局《统计用区划代码和城乡划分代码》规范，未包括我国台湾省、香港特别行政区、澳门特别行政区。规范未包含的地区使用空字符串
    // 举例：
    //
    // 44           广东省
    // 4403         广东省 深圳市
    // 440305       广东省 深圳市 南山区
    // 4403050090   广东省 深圳市 南山区 西丽街道
    // 440305009013 广东省 深圳市 南山区 西丽街道 留仙社区居委会
    //
    string gov_code   = 21;
    string local_name = 23 [ (validate.rules).string = {min_len : 1} ]; // 按照当地语言的名字

    // TODO: 省份要储存 ISO code
}

// 市级行政分区，比如中国广州市、美国纽约市
message City {
    option (dao.partition_count) = 1;

    // @inject_tag: gorm:"PRIMARY_KEY"
    uint64 city_id     = 1; // 主键
    uint64 revision    = 3; // 版本
    uint64 create_time = 4; // 创建时间
    uint64 update_time = 5; // 修改时间
    uint64 delete_time = 6; // 删除时间，非0表示已删除

    uint64 country_id  = 10 [ (validate.rules).uint64 = {gt : 0} ];
    uint64 province_id = 11 [ (validate.rules).uint64 = {gt : 0} ];

    string gov_code   = 21;                                             // 中华人民共和国国家统计局《统计用区划代码和城乡划分代码》代码
    string local_name = 23 [ (validate.rules).string = {min_len : 1} ]; // 按照当地语言的名字
}

// 区级行政分区，比如中国荔湾区、美国皇后区
message District {
    option (dao.partition_count) = 1;

    // @inject_tag: gorm:"PRIMARY_KEY"
    uint64 district_id = 1; // 主键
    uint64 revision    = 3; // 版本
    uint64 create_time = 4; // 创建时间
    uint64 update_time = 5; // 修改时间
    uint64 delete_time = 6; // 删除时间，非0表示已删除

    uint64 country_id = 10 [ (validate.rules).uint64 = {gt : 0} ];
    uint64 city_id    = 11 [ (validate.rules).uint64 = {gt : 0} ];

    string gov_code   = 21;                                             // 中华人民共和国国家统计局《统计用区划代码和城乡划分代码》代码
    string local_name = 23 [ (validate.rules).string = {min_len : 1} ]; // 按照当地语言的名字
}

// 街道级行政分区，比如粤海街道
message Street {
    option (dao.partition_count) = 1;

    // @inject_tag: gorm:"PRIMARY_KEY"
    uint64 street_id   = 1; // 主键
    uint64 revision    = 3; // 版本
    uint64 create_time = 4; // 创建时间
    uint64 update_time = 5; // 修改时间
    uint64 delete_time = 6; // 删除时间，非0表示已删除

    uint64 country_id  = 10 [ (validate.rules).uint64 = {gt : 0} ];
    uint64 district_id = 11 [ (validate.rules).uint64 = {gt : 0} ];

    string gov_code   = 21;                                             // 中华人民共和国国家统计局《统计用区划代码和城乡划分代码》代码
    string local_name = 23 [ (validate.rules).string = {min_len : 1} ]; // 按照当地语言的名字
}

// 地址
//
// 根据不同的业务场景，部分地址可能只有 geotag，部分地址可能只有 city_id 和 district_id。所以对 Address 中的字段不做强制校验。
message Address {
    reserved 11, 12;
    uint64 city_id     = 13; // 市级行政区
    uint64 district_id = 14; // 县级行政区
    uint64 street_id   = 15; // 街道级行政区

    string receiver    = 20; // 收货人名称
    string phone       = 21; // 收货人电话
    string address     = 22; // 门牌号，由用户人工填写。比如 "14楼1402房"。
    string poi_title   = 25; // 由客户端的地图组件根据经纬度生成的 POI 地址位置的名称，原则上不允许用户人工填写。比如 "科兴科学园B3栋"。
    string poi_address = 26; // 由客户端的地图组件根据经纬度生成的 POI 地址位置的地址，原则上不允许用户人工填写。比如 "深圳市南山区科苑路15号"。

    Geotag geotag = 23; // 经纬度

    bool is_default = 24; // 是否是默认地址（需要根据具体使用本结构的业务来看这个字段是否被使用）
}

// 财务信息（税务和发票）
//
// 这里的英文命名参考了 SAP ERP 系统 https://help.sap.com/viewer/f046f5272cbb4c77a54ab4373b88d957/6.05.17/en-US/4b52998f328a70d3e10000000a42189b.html
message ChinaVatInvoice {
    enum InvoiceType {
        UNSPECIFIED = 0;
        VAT_NORMAL  = 1; // 增值税普通发票 value added tax invoice (Normal)
        VAT_SPECIAL = 2; // 增值税专用发票 value added tax invoice (Special)
    }

    // 纳税人类型 https://baike.baidu.com/item/增值税暂行条例实施细则/6041684
    enum TaxpayerType {
        TAXPAYER_TYPE_UNSPECIFIED = 0;
        TAXPAYER_TYPE_NORMAL      = 1; // 一般纳税人
        TAXPAYER_TYPE_SMALL       = 2; // 小规模纳税人
        TAXPAYER_TYPE_NONE        = 3; // 非增值税专用发票（增值税普通发票或者无发票）
    }

    string       company_name             = 1;  // 公司名称
    string       company_address          = 2;  // 公司地址
    string       company_phone            = 3;  // 公司电话
    InvoiceType  invoice_type             = 4;  // 发票类型
    string       taxpayer_identity_number = 5;  // 纳税人识别号
    string       bank_name                = 7;  // 开户银行名称
    string       bank_account             = 8;  // 开户银行账号
    string       bank_card_owner_name     = 11; // 银行卡持有人名称
    string       max_invoice_amount       = 9;  // 最大发票金额
    string       business_license_number  = 10; // 营业执照号
    string       financial_contact_name   = 12; // 财务联系人名称
    string       financial_contact_phone  = 13; // 财务联系人电话
    TaxpayerType taxpayer_type            = 14; // 纳税人类型
}

// 地理标签（经纬度）
message Geotag {
    string latitude  = 1; // GPS 纬度，格式为 Decimal 数字。举例："12.3456"
    string longitude = 2; // GPS 经度，格式为 Decimal 数字。举例："–98.7654"
}

// Customer 和 CustomerLabel 之间的多对多关系
message CustomerLabelRelation {
    option (dao.partition_count) = 100;
    option (dao.primary_key)     = "relation_id";

    // @inject_tag: gorm:"PRIMARY_KEY"
    uint64 relation_id = 1; // 主键
    uint64 create_time = 4; // 创建时间
    uint64 update_time = 5; // 修改时间
    uint64 delete_time = 6; // 删除时间，非0表示已删除

    uint64 group_id          = 10;
    uint64 customer_id       = 11;
    uint64 customer_label_id = 12;
}

// 商户自定义标签
message CustomerLabel {
    option (dao.partition_count) = 100;
    option (dao.model_type)      = TYPE_ENTERPRISE_CUSTOMER_LABEL;

    // @inject_tag: gorm:"PRIMARY_KEY"
    uint64 customer_label_id = 1; // 主键
    uint64 revision          = 3; // 版本
    uint64 create_time       = 4; // 创建时间
    uint64 update_time       = 5; // 修改时间
    uint64 delete_time       = 6; // 删除时间，非0表示已删除

    uint64 group_id = 10;

    string name = 20 [ (validate.rules).string = {min_len : 1} ];
}

// Customer 表示客户中的一个机构
message Customer {
    option (dao.partition_count) = 100;
    option (dao.model_type)      = TYPE_ENTERPRISE_CUSTOMER;

    reserved 14;

    enum Status {
        STATUS_UNSPECIFIED    = 0;
        STATUS_IS_BILL_TARGET = 256; // 是否是可支付的。Customer 创建后不可修改。
        STATUS_IS_SHIP_TARGET = 512; // 是否是可下单/可收货。Customer 创建后不可修改
    }
    message Attrs {
        repeated Address addresses = 1; // 可选的收货地址

        // 所有的父 customer 的 id 列表。这个字段的目的是优化检索性能，对于调用者来说是只读的。
        //
        // 这个列表中的第一项是根节点，最后一项是当前 customer 的父节点。比如 孙子.attrs.parent_ids = [ 爷爷.customer_id, 爸爸.customer_id, 儿子.customer_id ]。
        repeated uint64 parent_ids      = 2;
        uint32          children_number = 5 [ deprecated = true ]; // 已废弃，使用 Customer.child_number 代替。

        map<uint64, uint64> menu_period_relation = 6; // 当前班级/学校绑定的餐次信息。key 是 menu_period_group.menu_period_group_id, value 是类型为 ServicePeriod.Type.TYPE_CUSTOMIZED_MENU_PERIOD 的 service_period_id。
    }
    enum Type {
        TYPE_UNSPECIFIED = 0;

        TYPE_VIRTUAL              = 1; // 表示虚拟的 customer，对用户不可见。比如用于承载个人的 customer 以及用于统计的 customer。
        TYPE_VIRTUAL_STUDENT      = 3; // 虚拟学生 customer
        TYPE_VIRTUAL_SCHOOL_STAFF = 4; // 虚拟教职工 customer

        TYPE_SOCIAL = 2; // 实体的社会餐饮类型（公司、店铺）

        TYPE_SCHOOL = 5; // 实体的学生餐饮类型（学校）
        TYPE_CLASS  = 6; // 实体的学生餐饮类型（班级）
    }
    // 结算方式
    enum SettlementMethod {
        SETTLEMENT_METHOD_UNSPECIFIED      = 0;
        SETTLEMENT_METHOD_ADVANCE_PAYMENT  = 1; // 先款后货
        SETTLEMENT_METHOD_DEFERRED_PAYMENT = 2; // 先货后款
    }
    //    // 账期计算方式
    //    enum CreditType {
    //        CREDIT_TYPE_UNSPECIFIED = 0;
    //        CREDIT_TYPE_AMOUNT      = 1; // 按照授信额度
    //        CREDIT_TYPE_DAILY       = 3; // 日结
    //        CREDIT_TYPE_WEEKLY      = 4; // 周结
    //        CREDIT_TYPE_MONTHLY     = 5; // 月结
    //        CREDIT_TYPE_CUSTOMIZED  = 6; // 自定义
    //    }
    // 结款配置
    message Settlement {
        reserved 6, 7;

        int32 weekly_or_monthly_credit_start_day  = 12; // 周结/月结起始日。如果是周结，使用 1～7 代表周一到周日；如果是月结，使用 1～31 代表每月几号；其他情况下这个字段没有含义
        int32 weekly_or_monthly_credit_settle_day = 13; // 周结/月结结算日。如果是周结，使用 1～7 代表周一到周日；如果是月结，使用 1～31 代表每月几号；其他情况下这个字段没有含义
        int32 customized_credit_start_time        = 19; // 自定义结算开始时间。单位为 UTC Timestamp 毫秒数
        int32 customized_credit_proied_days       = 16; // 自定义结算周期长度，单位为天
        int32 customized_credit_deley_days        = 17; // 自定义结算的结算日相对于 customized_credit_start_time 的延长时间，单位为天
        // uint32 credit_amount                       = 18; // 授信额度

        ChinaVatInvoice china_vat_invoice = 20; // 税务和发票信息
    }

    // @inject_tag: gorm:"PRIMARY_KEY"
    uint64 customer_id = 1; // 主键
    uint64 status      = 2; // bitmap
    uint64 create_time = 4; // 创建时间
    uint64 update_time = 5; // 修改时间
    uint64 delete_time = 6; // 删除时间，非0表示已删除

    uint64 group_id             = 10;
    uint64 parent_id            = 11; // 父级别的 customer 的 customer_id。顶层的 customer 的 parent_id 为 0。
    uint64 create_group_user_id = 12; // 开户经理
    uint64 sales_group_user_id  = 13; // 销售经理

    // 绑定的 station id。
    //
    // 在总分仓的场景中，同一个 group 中的一个 station 会向另一个 station 下单。这种场景下，下单方会绑定一个 customer，通过这个 customer
    // 完成下单的操作。bound_station_id 就用来表达 station 和 customer 的绑定关系。
    //
    // 如果 bound_station_id 为 0，则表示这个 customer 并没有和 station 进行绑定。
    uint64 bound_station_id = 15;

    string name            = 23 [ (validate.rules).string = {min_len : 1} ];  // 商户名称
    string remark          = 24;                                              // 商户备注。由 group 填写，对 customer 不可见。
    string customized_code = 25;                                              // 商户自定义编码。由 group 填写，对 customer 不可见。
    Type   type            = 26 [ (validate.rules).message = {required: true} ]; // 类型
    bool   is_reviewed     = 27;                                              // 是否审核通过
    bool   is_in_whitelist = 28;                                              // 是否在白名单中
    bool   is_frozen       = 22;                                              // 是否被冻结
    uint32 level           = 33;                                              // 等级。顶层的商户的 level 为 1，次级的商户 level 为 2，以此类推。由后台维护
    uint32 child_number    = 34;                                              // 直系子 Customer 的数量

    // 以下是财务相关的属性
    Settlement       settlement        = 29; // 结款配置
    SettlementMethod settlement_method = 31; // 结算方式
    CreditType       credit_type       = 32; // 账期计算方式（可能为 UNSPECIFIED）

    // 以下属性仅当 Customer 表示一个个人（type 为 TYPE_VIRTUAL_STUDENT / TYPE_VIRTUAL_SCHOOL_STAFF）时会用到
    string        phone        = 50; // 电话号码
    common.Gender gender       = 51; // 性别
    string        parent_phone = 52; // 家长电话号码
    string        parent_name  = 53; // 家长姓名

    // 以下是为了优化搜索的字段，由后端维护。调用者请无视这些字段
    uint64 city_id     = 40; // 等价于 customer.attrs.addresses[0].city_id
    uint64 district_id = 41; // 等价于 customer.attrs.addresses[0].district_id
    uint64 street_id   = 42; // 等价于 customer.attrs.addresses[0].street_id

    // 额外属性
    Attrs attrs = 30;
}

// CustomerUser 表示 Customer 中的一个用户
message CustomerUser {
    option (dao.partition_count) = 1; // 这张表不分表是因为在登录时不知道 group_id，如果分表的话就不知道去哪张表查询数据。
    option (dao.model_type)      = TYPE_ENTERPRISE_CUSTOMER_USER;

    // @inject_tag: gorm:"PRIMARY_KEY"
    uint64 customer_user_id = 1; // 主键
    uint64 create_time      = 4; // 创建时间
    uint64 update_time      = 5; // 修改时间
    uint64 delete_time      = 6; // 删除时间，非0表示已删除

    uint64 group_id    = 10;
    uint64 customer_id = 11; // 用户所属的 customer
    uint64 account_id  = 12;

    string name = 20;

    // 以下是冗余 account 当中的字段，由后台维护，对于前端来说是只读的
    string username = 40;
    string phone    = 41;
    string email    = 42;
}

// Customer 和 ServicePeriod 之间的多对多关系
message CustomerServicePeriodRelation {
    option (dao.partition_count) = 100;
    option (dao.primary_key)     = "relation_id";

    // @inject_tag: gorm:"PRIMARY_KEY"
    uint64 relation_id = 1;
    uint64 create_time = 4; // 创建时间
    uint64 update_time = 5; // 修改时间
    uint64 delete_time = 6; // 删除时间，非0表示已删除

    uint64 group_id          = 12;
    uint64 customer_id       = 10;
    uint64 service_period_id = 11;
}

// 邀请码
message InvitationCode {
    option (dao.partition_count) = 100;
    option (dao.model_type)      = TYPE_ENTERPRISE_INVITATION_CODE;

    enum Type {
        TYPE_UNSPECIFIED = 0;
        TEMPORARY        = 1; // 临时邀请码，只能使用一次
        FIXED            = 2; // 固定邀请码，可以使用多次
        EDUCATION_FIXED  = 3; // 学生餐邀请码，可以使用多次
    }

    // @inject_tag: gorm:"PRIMARY_KEY"
    uint64 invitation_code_id = 1;
    uint64 create_time        = 4;
    uint64 update_time        = 5;
    uint64 delete_time        = 6; // 删除时间，非0表示已删除

    uint64 group_id          = 10;
    uint64 service_period_id = 11;
    uint64 quotation_id      = 12;

    // 类型
    Type type = 21 [ (validate.rules).message = {required: true} ];

    // 是否已被使用。类型为 FIXED 的邀请码的这个字段没有意义
    bool used = 20;

    // 如果 root_customer_id 不为空值，那么通过这个邀请码注册的 customer 的根节点必须是 root_customer_id 对应的 customer。
    // 这个字段用于在 学生餐 场景中，在注册学生时，根据 邀请码 找到学校。
    uint64 root_customer_id = 22;

    // 用于展示给终端用户看的七位随机字符串，比如 "NHDA9XA"。这个字符串是全网唯一的。
    // @inject_tag: gorm:"unique_index"
    string text = 23;
}

//////////////////////////////////////////////////////////////////////////////

// 用于承载创建 Account 所需要使用的参数
message CreateAccountParams {
    string username        = 30; // 登录用户名
    string password        = 31; // 登录密码, 需要客户端使用 sha256 加密一遍
    string phone           = 32;
    string email           = 33;
    string wechat_openid   = 34;
    string wechat_unionid  = 35;
    string wechat_nickname = 36;
    string wechat_avatar   = 37;
}

// 用于承载更新 Account 所需要使用的参数。一般来说只有管理员有权限使用这个结构。
message UpdateAccountParams {
    string password = 31 [ (validate.rules).string = {min_len : 1} ]; // 新的登录密码。需要客户端使用 sha256 加密一遍
}

// 用于承载更新当前登录的 Account 所需要使用的参数
message UpdateCurrentAccountParams {
    string password        = 31 [ (validate.rules).string = {min_len : 1} ]; // 新的登录密码。需要客户端使用 sha256 加密一遍
    string origin_password = 51 [ (validate.rules).string = {min_len : 1} ]; // 新的登录密码。需要客户端使用 sha256 加密一遍
}

message InitializeRegionRequest {
    bool testing = 1; // 如果为 true，则只会插入少量数据，从而加快处理速度
}
message InitializeRegionResponse {}

message GetGroupRequest {
    uint64 group_id = 1 [ (validate.rules).uint64 = {gt : 0} ];
}
message GetGroupResponse {
    Group group = 1;
}
message ListGroupRequest {
    repeated uint64     group_ids = 1;                                              // 如果不为空，只返回这些 group，否则返回所有 group。
    common.PagingParams paging    = 2 [ (validate.rules).message.required = true ]; // 分页信息
}
message ListGroupResponse {
    repeated Group      groups = 1;
    common.PagingResult paging = 2 [ (validate.rules).message.required = true ];
}
message CreateGroupRequest {
    Group group = 1 [ (validate.rules).message.required = true ];
}
message CreateGroupResponse {
    Group group = 1;
}
message UpdateGroupRequest {
    Group group = 1 [ (validate.rules).message.required = true ];
}
message UpdateGroupResponse {
    Group group = 1;
}

message UpdateGroupExtraInfoRequest {
    GroupExtraInfo group_extra_info = 1 [ (validate.rules).message.required = true ];
}
message UpdateGroupExtraInfoResponse {
    GroupExtraInfo group_extra_info = 1 [ (validate.rules).message.required = true ];
}
message GetGroupExtraInfoRequest {
    uint64 group_id = 1;
}
message GetGroupExtraInfoResponse {
    GroupExtraInfo group_extra_info = 1 [ (validate.rules).message.required = true ];
}

message ListGroupTimeZoneRequest {}
message ListGroupTimeZoneResponse {
    map<uint64, string> time_zones = 1; // Key 是 group id, value 是 group.time_zone
}

message ListPermissionGroupRequest {
    repeated Permission permissions = 1 [ (validate.rules).repeated = {min_items : 1, max_items : 10} ];
}
message ListPermissionGroupResponse {
    map<uint32, common.Uint64Set> permissions = 1; // key 是 Permission，value 是 GroupIds
}

message GetPermissionGroupRequest {
    Permission permission = 1;
}
message GetPermissionGroupResponse {
    repeated uint64 group_ids = 1;
}
message UpdatePermissionGroupRequest {
    Permission      permission = 1;
    repeated uint64 group_ids  = 2;
}
message UpdatePermissionGroupResponse {
}

message GetGroupPermissionRequest {
    uint64 group_id = 1;
}
message GetGroupPermissionResponse {
    repeated Permission permissions = 1;
}
message UpdateGroupPermissionRequest {
    uint64              group_id    = 1;
    repeated Permission permissions = 2;
}
message UpdateGroupPermissionResponse {}

message GetStationRequest {
    uint64 station_id = 1 [ (validate.rules).uint64.gt = 0 ];
}
message GetStationResponse {
    Station station = 1;
}
message ListStationRequest {
    uint64              group_id = 1;                                              // 如果不为空，那么只返回这些 group 的 station;
    common.PagingParams paging   = 2 [ (validate.rules).message.required = true ]; // 分页信息
}
message ListStationResponse {
    repeated Station    stations = 1;
    common.PagingResult paging   = 2 [ (validate.rules).message.required = true ];
}
message CreateStationRequest {
    Station station = 1;
}
message CreateStationResponse {
    Station station = 1;
}
message UpdateStationRequest {
    Station station = 1;
}
message UpdateStationResponse {
    Station station = 1;
}
message UpdateStationAvailableCityRequest {
    uint64          station_id         = 1;
    repeated uint64 available_city_ids = 2;
}
message UpdateStationAvailableCityResponse {
    Station station = 1;
}

message GetSupplierRequest {
    // 以下两个参数传且只传一个
    uint64 supplier_id     = 1;
    string customized_code = 2;
}
message GetSupplierResponse {
    Supplier supplier = 1;
}
message GetManySupplierRequest {
    repeated uint64 supplier_ids = 1;
};
message GetManySupplierResponse {
    map<uint64, Supplier> suppliers = 1;
};
message ListSupplierRequest {
    common.PagingParams paging = 2 [ (validate.rules).message.required = true ]; // 分页信息
    string              q      = 3;                                              // 如果不为空，则按照供应商ID、供应商编号、供应商名称、供应商手机号进行搜索
}
message ListSupplierResponse {
    repeated Supplier   suppliers = 1;
    common.PagingResult paging    = 2 [ (validate.rules).message.required = true ];
}
message CreateSupplierRequest {
    Supplier supplier = 1;
}
message CreateSupplierResponse {
    Supplier supplier = 1;
}
message UpdateSupplierRequest {
    Supplier supplier = 1;
}
message UpdateSupplierResponse {
    Supplier supplier = 1;
}
message DeleteSupplierRequest {
    uint64 supplier_id = 1;
}
message DeleteSupplierResponse {
    Supplier supplier = 1;
}
message CleanSupplierRequest {
}
message CleanSupplierResponse {
}
message BatchExportSupplierRequest {
    // 以下为 Supplier 的筛选条件，和 ListSupplierRequest 保持一致。每个字段的具体含义请参考 ListSupplierRequest。
    string q = 2;
}
message BatchExportSupplierResponse {
    uint64 task_id = 1;
}

message GetGroupUserRequest {
    // 以下三个参数要传且只传一个
    uint64 group_user_id = 1; // 如果不为空，则返回对应的用户。
    uint64 account_id    = 4; // 如果不为空，则返回对应的用户。
    string username      = 3; // 如果不为空，则返回对应的用户。（如果使用这个参数，context 中必须要带有 GroupId）

    bool need_distribution_contractor = 2;  // 是否需要返回配送承包商信息
    bool need_roles                   = 11; // response 中是否需要 roles 字段
    bool need_permissions             = 12; // response 中是否需要 permissions 字段
}
message GetGroupUserResponse {
    GroupUser              group_user              = 1;
    DistributionContractor distribution_contractor = 2; // 可能为 null。
    map<uint64, Role>      roles                   = 4; // key 是 role_id, value 是 role
    repeated Permission    permissions             = 5;
}
message GetManyGroupUserRequest {
    repeated uint64 group_user_ids = 1;
};
message GetManyGroupUserResponse {
    map<uint64, GroupUser> group_users = 1;
};
message ListGroupUserRequest {
    repeated uint64 group_user_ids = 3; // 如果不为空，那么只返回这些 id 对应的所有用户
    repeated uint64 account_ids    = 4; // 如果不为空，那么只返回这些 account 对应的所有用户
    repeated Role.Type  role_types = 5; // 如果不为空，则只返回绑定了这些类型的角色的用户
    string              q          = 6; // 如果不为空，则搜索 GroupUser.name 和 GroupUser.group_user_id
    common.Filters.Bool is_valid   = 7; // 如果不为空，则过滤 GroupUser.is_valid

    bool                need_roles                   = 11;                                              // response 中是否需要 roles 字段
    bool                need_distribution_contractor = 12;                                              // response 中是否需要 distribution_contractors 字段
    common.PagingParams paging                       = 13 [ (validate.rules).message.required = true ]; // 分页信息
}
message ListGroupUserResponse {

    repeated GroupUser                  group_users              = 1;
    map<uint64, common.Uint64Set>       role_relation            = 2; // key 是 group_user_id, value 是 role_ids
    map<uint64, Role>                   roles                    = 4; // key 是 role_id, value 是 role
    map<uint64, DistributionContractor> distribution_contractors = 3; // key 是 group_user_id
    common.PagingResult                 paging                   = 6 [ (validate.rules).message.required = true ];
}
message CreateGroupUserRequest {
    GroupUser           group_user = 1 [ (validate.rules).message.required = true ];
    CreateAccountParams account    = 2 [ (validate.rules).message.required = true ];

    bool            bind_to_driver_role    = 4; // 如果为 true，则将这个用户绑定到 Group 中的内建的 司机 角色中
    bool            bind_to_purchaser_role = 5; // 如果为 true，则将这个用户绑定到 Group 中的内建的 配送员 角色中
    repeated uint64 role_ids               = 6; // 如果不为空，则将这个用户绑定到 Group 中的 roles 中
}
message CreateGroupUserResponse {
    GroupUser group_user = 1 [ (validate.rules).message.required = true ];
}
message UpdateGroupUserRequest {
    GroupUser           group_user = 1 [ (validate.rules).message.required = true ];
    UpdateAccountParams account    = 2; // 如果不为空，则根据这个值修改用户的 account 数据
}
message UpdateGroupUserPasswordRequest {
    UpdateCurrentAccountParams account = 1 [ (validate.rules).message.required = true ];
}
message UpdateGroupUserPasswordResponse {
    // 空响应
}
message UpdateGroupUserResponse {
    GroupUser group_user = 1 [ (validate.rules).message.required = true ];
}
message DeleteGroupUserRequest {
    uint64 group_user_id = 1 [ (validate.rules).uint64 = {gt : 0} ];
}
message DeleteGroupUserResponse {
    GroupUser group_user = 1 [ (validate.rules).message.required = true ];
}
// 更新某个用户绑定的所有角色
message UpdateGroupUserRoleRequest {
    uint64          group_user_id = 1;
    repeated uint64 role_ids      = 2;
}
message UpdateGroupUserRoleResponse {
    // 空响应
}

message GetRoleRequest {
    uint64 role_id          = 1 [ (validate.rules).uint64 = {gt : 0} ];
    bool   need_permissions = 2; // response 中是否需要 permissions
    bool   need_group_users = 3; // response 中是否需要 users
}
message GetRoleResponse {
    Role                role        = 1;
    repeated Permission permissions = 2;
    repeated GroupUser  group_users = 3;
}
message ListRoleRequest {
    reserved 1;

    repeated uint64 station_ids = 2; // 如果不为空，那么返回属于这些 station 的所有角色
    repeated uint64 role_ids    = 3; // 如果不为空，那么返回这些 id 对应的所有角色
    string          q           = 8; // 如果不为空，那么搜索角色名
    repeated Role.Type types    = 6; // 如果不为空，那么返回这些 type 对应的所有角色

    bool                need_group_users = 4;                                              // response 中是否需要 group_users
    bool                need_permissions = 7;                                              // response 中是否需要 permissions
    common.PagingParams paging           = 5 [ (validate.rules).message.required = true ]; // 分页信息
}
message ListRoleResponse {
    message PermissionSet {
        repeated Permission permissions = 1;
    }

    repeated Role roles = 1;

    map<uint64, common.Uint64Set> group_user_relation = 2; // key 是 role_id, value 是 group_user_ids
    map<uint64, GroupUser>        group_users         = 5; // key 是 group_user_id

    map<uint64, PermissionSet> permissions = 4; // key 是 role_id

    common.PagingResult paging = 3 [ (validate.rules).message.required = true ];
}
message CreateRoleRequest {
    Role role = 1 [ (validate.rules).message.required = true ];
}
message CreateRoleResponse {
    Role role = 1;
}
message UpdateRoleRequest {
    Role role = 1 [ (validate.rules).message.required = true ];
}
message UpdateRoleResponse {
    Role role = 1;
}
message DeleteRoleRequest {
    uint64 role_id = 1 [ (validate.rules).uint64 = {gt : 0} ];
}
message DeleteRoleResponse {
    Role role = 1;
}
// 更新某个角色拥有的所有权限
message UpdateRolePermissionRequest {
    uint64              role_id     = 1;
    repeated Permission permissions = 2;
}
message UpdateRolePermissionResponse {
    // 空响应
}
// 更新某个角色绑定的所有用户
message UpdateRoleGroupUserRequest {
    uint64          role_id        = 1;
    repeated uint64 group_user_ids = 2;
}
message UpdateRoleGroupUserResponse {
    // 空响应
}

message GetServicePeriodRequest {
    uint64 service_period_id = 1 [ (validate.rules).uint64 = {gt : 0} ];
    // 如果 revision 为 0，则查找 service_period_id 最新的未删除的版本；
    // 如果不为 0，则查找这个版本的周期，那么这个版本已经被删除也可以查找出来。
    uint64 revision = 2;
}
message GetServicePeriodResponse {
    ServicePeriod service_period = 1;
}
message GetManyServicePeriodRequest {
    repeated uint64 service_period_ids = 1;
}
message GetManyServicePeriodResponse {
    map<uint64, ServicePeriod> service_periods = 1;
}
message ListServicePeriodRequest {
    uint64              group_id            = 1; // 如果不为空，那么只传这些 id 对应的运营周期
    uint64              station_id          = 2; // 如果不为空，那么只传这些 id 对应的运营周期
    repeated uint64     service_period_ids  = 3; // 如果不为空，那么只传这些 id 对应的运营周期
    ServicePeriod.Type  service_period_type = 6 [ (validate.rules).message = {required: true} ];
    common.PagingParams paging              = 5 [ (validate.rules).message.required = true ]; // 分页信息
}
message ListServicePeriodResponse {
    repeated ServicePeriod service_periods = 1;
    common.PagingResult    paging          = 2 [ (validate.rules).message.required = true ];
}

message CreateServicePeriodRequest {
    ServicePeriod service_period = 1 [ (validate.rules).message.required = true ];
}
message CreateServicePeriodResponse {
    ServicePeriod service_period = 1;
}

message UpdateServicePeriodRequest {
    ServicePeriod service_period = 1 [ (validate.rules).message.required = true ];
}
message UpdateServicePeriodResponse {
    ServicePeriod service_period = 1;
}

message DeleteServicePeriodRequest {
    uint64 service_period_id = 1 [ (validate.rules).uint64 = {gt : 0} ];
}
message DeleteServicePeriodResponse {
    ServicePeriod service_period = 1;
}
message CleanServicePeriodRequest {
}
message CleanServicePeriodResponse {
}

// Customer
message GetCustomerRequest {
    // customer_id 和 customer_customized_code 必须传一个
    uint64 customer_id              = 1;
    string customer_customized_code = 5;

    bool need_quotations     = 2;
    bool need_customer_label = 3;
    bool need_service_period = 4;
    bool need_menus          = 6;
};
message GetCustomerResponse {
    Customer customer = 1;

    // customer 和 quotation 是多对多关系
    repeated QuotationCustomerRelation quotation_relations = 2;
    // customer和菜谱的关系
    repeated MenuCustomerRelation menu_relations = 3;

    // customer 和 customer_label 是多对多关系
    map<uint64, CustomerLabel> customer_labels = 21; // Key 是 customer_label_id。仅在 need_customer_label = true 时返回。

    // customer 和 service_period 是多对多关系
    map<uint64, ServicePeriod> service_periods = 22; // Key 是 service_period_id。仅在 need_service_period = true 时返回。
};
message GetManyCustomerRequest {
    repeated uint64 customer_ids = 1;
};
message GetManyCustomerResponse {
    map<uint64, Customer> customers = 1;
};
message ListCustomerRequest {
    common.PagingParams paging = 1 [ (validate.rules).message.required = true ]; // 分页信息

    // 报价单和客户关系
    //
    // 一个报价单可以绑定多个商户。
    // 一个商户可以绑定多个站点中的多个报价单，但是同一个商户不能绑定同一个站点中的多个报价单。
    //
    bool need_quotations      = 2;
    bool need_group_users     = 3;
    bool need_service_periods = 4;
    bool need_deleted         = 5; // 是否返回被删除的数据
    bool need_customer_label  = 6;
    bool need_child_customers = 7;
    bool need_menus           = 8;

    common.Filters.Bool is_frozen                      = 10; // 是否冻结
    common.Filters.Bool is_in_whitelist                = 11; // 是否在白名单中
    repeated CreditType credit_types          = 12; // 如果不为空，则只搜索绑定了这些 结款配置 的商户
    repeated uint64              quotation_ids         = 13; // 如果不为空，则只搜索绑定了这些 报价单 的商户
    repeated uint64              service_period_ids    = 14; // 如果不为空，则只搜索绑定了这些 时间周期 的商户
    repeated uint64              create_group_user_ids = 15; // 如果不为空，则只搜索绑定了这些 开户经理 的商户（开户经理就是 group_user）
    repeated uint64              sales_group_user_ids  = 16; // 如果不为空，则只搜索绑定了这些 销售经理 的商户（销售经理就是 group_user）
    repeated uint64              customer_label_ids    = 26; // 如果不为空，则只搜索绑定了这些 客户标签 的商户
    string                       q                     = 17; // 如果不为空，则按照 Customer.customer_id （精确匹配）, Customer.customized_code （精确匹配）, Customer.name （模糊匹配）, Customer.parent_name （模糊匹配） 进行搜索
    repeated uint64              parent_ids            = 18; // 如果不为空，则只搜索绑定了这些 父级 Customer 的商户。注意 parent_id 可以为 0，为 0 时表示搜索顶级的 Customer。
    uint32                       level                 = 19; // 如果不为空，则只搜索 level 为这个值的商户
    common.Filters.Bool          is_bill_target        = 20; // 如果不为空，则只搜索 IS_BILL_TARGET=true 的商户 // TODO：等待实现
    common.Filters.Bool          is_ship_target        = 21; // 如果不为空，则只搜索 IS_SHIP_TARGET=true 的商户 // TODO：等待实现
    repeated uint64              city_ids              = 22; // 如果不为空，则只搜索 customer.attrs.addresses[0] 中带有这些 city 的商户
    repeated uint64              district_ids          = 23; // 如果不为空，则只搜索 customer.attrs.addresses[0] 中带有这些 district 的商户
    repeated uint64              street_ids            = 25; // 如果不为空，则只搜索 customer.attrs.addresses[0] 中带有这些 street 的商户
    repeated uint64              customer_ids          = 24; // 如果不为空，则只搜索这些 id 对应的 商户
    Customer.Type                type                  = 27; // 如果不为空，则只搜索这些类型的商户
};
message ListCustomerResponse {
    repeated Customer customers = 1 [ (validate.rules).repeated = {min_items : 0} ];

    // customer 和 quotation 是多对多关系
    repeated QuotationCustomerRelation quotation_relations = 3;
    repeated MenuCustomerRelation      menu_relations      = 5;

    // customer 和 service_period 是多对多关系
    map<uint64, common.Uint64Set> service_period_relation = 6; // Key 是 customer id, value 是 service period ids。仅在 need_service_periods = true 时返回。
    map<uint64, ServicePeriod>    service_periods         = 7; // Key 是 service period id。仅在 need_service_periods = true 时返回。

    // customer 和 customer_label 是多对多关系
    map<uint64, common.Uint64Set> customer_label_relation = 20; // Key 是 customer id, value 是 customer_label_ids。仅在 need_customer_labels = true 时返回。
    map<uint64, CustomerLabel>    customer_labels         = 21; // Key 是 customer_label_id。仅在 need_customer_labels = true 时返回。

    map<uint64, GroupUser> group_users = 4; // Key 是 group user id。仅在 need_group_users = true 时返回。

    // 返回直系的子 customer 信息
    map<uint64, common.Uint64Set> child_customer_relation = 22; // Key 是 customer id, value 是子 customer_ids。仅在 need_child_customers = true 时返回。
    map<uint64, Customer>         child_customers         = 23; // Key 是子 customer id, value 是子 customer。仅在 need_child_customers = true 时返回。

    common.PagingResult paging = 8 [ (validate.rules).message.required = true ];
};
message CreateCustomerRequest {
    Customer customer = 1 [ (validate.rules).message.required = true ];
    // 使用的邀请码 ID。如果 invitation_code_id 不为 0，则将这个 customer 绑定到邀请码对应的 quotation 上。如果 invitation_code_id 为 0，则将这个 customer 绑定到默认报价单。
    uint64 invitation_code_id = 2;

    repeated uint64 quotation_ids      = 3; // 如果不为空，则将 Customer 绑定这些 Quotation
    repeated uint64 service_period_ids = 4; // 如果不为空，则将 Customer 绑定这些运营周期
    repeated uint64 customer_label_ids = 5; // 如果不为空，则将 Customer 绑定这些 CustomerLabel
};

message CreateCustomerResponse {
    Customer customer = 1;
};

message UpdateCustomerRequest {
    Customer        customer           = 1 [ (validate.rules).message.required = true ];
    repeated uint64 quotation_ids      = 2; // 如果不为空，则将 Customer 绑定这些 Quotation
    repeated uint64 service_period_ids = 3; // 如果不为空，则将 Customer 绑定这些运营周期
    repeated uint64 customer_label_ids = 4; // 如果不为空，则将 Customer 绑定这些 CustomerLabel
};
message UpdateCustomerResponse {
    Customer customer = 1;
};
message DeleteCustomerRequest {
    uint64 customer_id = 1 [ (validate.rules).uint64 = {gt : 0} ];
};
message DeleteCustomerResponse {
    Customer customer = 1;
};
message CleanCustomerRequest {
};
message CleanCustomerResponse {
};
message BatchExportCustomerRequest {
    Customer.Type customer_type = 2 [ (validate.rules).message = {required: true} ]; // 导出的商户类型。如果不填则默认为 TYPE_SOCIAL
}
message BatchExportCustomerResponse {
    uint64 task_id = 1;
}
message BatchImportCustomerRequest {
    Customer.Type customer_type = 2 [ (validate.rules).message = {required: true} ]; // 导出的商户类型。如果不填则默认为 TYPE_SOCIAL
    string        file_url      = 1 [ (validate.rules).string = {min_len : 1} ];       // Excel 文件的下载链接
}
message BatchImportCustomerResponse {
    uint64 task_id = 1;
}
message GetBatchImportCustomerTemplateRequest {
    Customer.Type customer_type = 2 [ (validate.rules).message = {required: true} ]; // 导出的商户类型。如果不填则默认为 TYPE_SOCIAL
}
message GetBatchImportCustomerTemplateResponse {
    string file_url = 1 [ (validate.rules).string = {min_len : 1} ]; // Excel 文件的下载链接
}
message CountNewCustomerRequest {
    uint64 begin_datetime = 1 [ (validate.rules).uint64 = {gte : 1} ]; // 开始时间的时间戳（闭区间）
    uint64 end_datetime   = 2 [ (validate.rules).uint64 = {gte : 1} ]; // 结束时间的时间戳（开区间）
}
message CountNewCustomerResponse {
    message Range {
        uint64 begin_datetime = 1; // 开始时间的时间戳（闭区间）
        uint64 end_datetime   = 2; // 结束时间的时间戳（开区间）。range.end_datetime 和 range.begin_datetime 之间相隔 24 小时。
        uint32 count          = 3; // 在 [range.begin_datetime, range.end_datetime)，当前 group 新建了多少个 Customer（不包含已经被删除的 Customer）
    }

    // 如果 request 中的时间范围是 [2020-10-01 00:00:00, 2020-10-04 00:00:00) 一共三天（72 小时），那么 response.ranges 中会有三天的数据，分别是 2020-10-01, 2020-10-02, 2020-10-03 的统计数据。
    repeated Range ranges = 1;
}

// customer 和 quotation 是多对多关系，quotation 和 station 是多对一关系。在同一个站点中，一个 customer 只能绑定最多一个 quotation。
// 由于 customer 和 quotation 之间的关系过于复杂，而 proto 又不能够(直接)表达 {customer_id: {station_id: quotation_id}} 的结构，所以这里将所有关系返回，由调用方去拼接字段。
message QuotationCustomerRelation {
    uint64 station_id   = 1;
    uint64 customer_id  = 2;
    uint64 quotation_id = 3;
}

message MenuCustomerRelation {
    uint64        station_id    = 1;
    uint64        customer_id   = 2;
    uint64        menu_id       = 3;
    Customer.Type customer_type = 4;
}

// 三合一接口，用于方便前端在一次请求中创建多条数据
//
// 后台逻辑：
// 1. 在数据库中插入 root_customer，并获取 root_customer.customer_id
// 2. 将 child_customer.parent_id 设置为 root_customer.customer_id，然后在数据中插入 child_customer
// 3. 将 root_customer_user.parent_id 设置为 root_customer.customer_id，然后在数据库中插入 root_customer_user
message CreateCustomerTreeRequest {
    CreateCustomerRequest     root_customer_request      = 1 [ (validate.rules).message.required = true ];
    CreateCustomerRequest     child_customer_request     = 2;
    CreateCustomerUserRequest root_customer_user_request = 3;
}
message CreateCustomerTreeResponse {
    CreateCustomerResponse     root_customer_response      = 1;
    CreateCustomerResponse     child_customer_response     = 2;
    CreateCustomerUserResponse root_customer_user_response = 3;
}

// CustomerUser
message GetCustomerUserRequest {
    uint64 customer_user_id = 1; // 如果不为空，则返回对应的用户。customer_user_id 和 account_id 两者必须有一个不为空。
    uint64 account_id       = 2; // 如果不为空，则返回对应的用户。customer_user_id 和 account_id 两者必须有一个不为空。
    bool   need_account     = 3;
};
message GetCustomerUserResponse {
    CustomerUser    customer_user = 1;
    account.Account account       = 2; // 仅在 need_account 为 true 时提供 // TODO：未实现
};
message InternalGetCustomerUserRequest {
    uint64 account_id = 2 [ (validate.rules).uint64.gt = 0 ];
    uint64 group_id   = 3 [ (validate.rules).uint64.gt = 0 ];
}
message InternalGetCustomerUserResponse {
    CustomerUser customer_user = 1;
}
message GetManyCustomerUserRequest {
    repeated uint64 customer_user_ids = 1;
};
message GetManyCustomerUserResponse {
    map<uint64, CustomerUser> customer_users = 1;
};
message ListCustomerUserRequest {
    uint64              group_id          = 1 [ (validate.rules).uint64 = {gt : 0} ];       // 必传参数
    repeated uint64     customer_ids      = 4;                                              // 如果不为空，那么只返回这些 customer 对应的所有用户
    repeated uint64     account_ids       = 2;                                              // 如果不为空，那么只返回这些 account 对应的所有用户
    repeated uint64     customer_user_ids = 3;                                              // 如果不为空，那么只返回这些 id 对应的所有用户
    string              q                 = 6;                                              // 如果不为空，那么根据 name 模糊搜索
    common.PagingParams paging            = 5 [ (validate.rules).message.required = true ]; // 分页信息
};
message ListCustomerUserResponse {
    repeated CustomerUser customer_users = 1;
    common.PagingResult   paging         = 2 [ (validate.rules).message.required = true ];
};
message CreateCustomerUserRequest {
    CustomerUser        customer_user = 1 [ (validate.rules).message.required = true ];
    CreateAccountParams account       = 2; // 创建 CustomerUser 时，要么传 account，要么确保 customer_user.account_id 不为空
};
message CreateCustomerUserResponse {
    CustomerUser customer_user = 1;
};
message UpdateCustomerUserRequest {
    CustomerUser        customer_user = 1 [ (validate.rules).message.required = true ];
    UpdateAccountParams account       = 2; // 如果不为空，则根据这个值修改用户的 account 数据
};
message UpdateCustomerUserResponse {
    CustomerUser customer_user = 1;
};
message UpdateCustomerUserPasswordRequest {
    UpdateCurrentAccountParams account = 1 [ (validate.rules).message.required = true ];
}
message UpdateCustomerUserPasswordResponse {
    // 空响应
}
message DeleteCustomerUserRequest {
    uint64 customer_user_id = 1 [ (validate.rules).uint64 = {gt : 0} ];
};
message DeleteCustomerUserResponse {
    CustomerUser customer_user = 1;
};
message CleanCustomerUserRequest {
};
message CleanCustomerUserResponse {
};

// CustomerLabel 商户标签
message GetCustomerLabelRequest {
    uint64 customer_label_id = 1;
}
message GetCustomerLabelResponse {
    CustomerLabel customer_label = 1;
}
message ListCustomerLabelRequest {
    string              q      = 1;                                               // 如果不为空，则模糊搜索 CustomerLabel.name
    common.PagingParams paging = 10 [ (validate.rules).message.required = true ]; // 分页信息
}
message ListCustomerLabelResponse {
    repeated CustomerLabel customer_labels = 1;
    common.PagingResult    paging          = 2 [ (validate.rules).message.required = true ];
}
message CreateCustomerLabelRequest {
    CustomerLabel customer_label = 1;
}
message CreateCustomerLabelResponse {
    CustomerLabel customer_label = 1;
}
message UpdateCustomerLabelRequest {
    CustomerLabel customer_label = 1;
}
message UpdateCustomerLabelResponse {
    CustomerLabel customer_label = 1;
}
message DeleteCustomerLabelRequest {
    uint64 customer_label_id = 1;
}
message DeleteCustomerLabelResponse {
    CustomerLabel customer_label = 1;
}

// DistributionContractor 配送承包商
message GetDistributionContractorRequest {
    uint64 distribution_contractor_id = 1 [ (validate.rules).uint64 = {gt : 0} ];
    bool   need_group_user_ids        = 2; // 是否需要返回这个配送承包商绑定的所有用户
};
message GetDistributionContractorResponse {
    DistributionContractor distribution_contractor = 1;
    repeated uint64        group_user_ids          = 2;
};
message ListDistributionContractorRequest {
    uint64 group_id         = 1;
    bool   need_group_users = 2; // 是否需要返回这个配送承包商绑定的所有用户
    string q                = 4; // 如果不为空，则搜索 name

    common.PagingParams paging = 10 [ (validate.rules).message.required = true ]; // 分页信息
};

message ListDistributionContractorResponse {
    repeated DistributionContractor distribution_contractors = 1;
    map<uint64, common.Uint64Set>   group_user_ids           = 2; // key 是 distribution_contractor_id, value 是 group_user_ids; 仅在 need_group_users 为 true 时返回
    map<uint64, GroupUser>          group_users              = 4; // key 是 group_user_id; 仅在 need_group_users 为 true 时返回
    common.PagingResult             paging                   = 3 [ (validate.rules).message.required = true ];
};
message CreateDistributionContractorRequest {
    DistributionContractor distribution_contractor = 1 [ (validate.rules).message.required = true ];
};
message CreateDistributionContractorResponse {
    DistributionContractor distribution_contractor = 1;
};
message UpdateDistributionContractorRequest {
    DistributionContractor distribution_contractor = 1;
    repeated uint64        group_user_ids          = 2; // 如果不为 null，则更新当前配送承包商拥有的用户
};
message UpdateDistributionContractorResponse {
    DistributionContractor distribution_contractor = 1;
};
message DeleteDistributionContractorRequest {
    uint64 distribution_contractor_id = 1 [ (validate.rules).uint64 = {gt : 0} ];
};
message DeleteDistributionContractorResponse {
    DistributionContractor distribution_contractor = 1;
};

// Region
message ListCountryRequest {
    repeated uint64 country_ids = 1; // 如果不为空，则只返回对应的国家；否则返回所有国家
}
message ListCountryResponse {
    repeated Country countries = 1;
}
message ListProvinceRequest {
    // 以下参数传且只传一个
    uint64          country_id   = 1;
    repeated uint64 province_ids = 2;
}
message ListProvinceResponse {
    repeated Province provinces = 1 [ (validate.rules).repeated = {min_items : 0} ];
}
message ListCityRequest {
    // 以下参数传且只传一个
    repeated uint64 province_ids = 1;
    repeated uint64 city_ids     = 2;
}
message ListCityResponse {
    repeated City cities = 1 [ (validate.rules).repeated = {min_items : 0} ];
}
message ListDistrictRequest {
    // 以下参数传且只传一个
    repeated uint64 city_ids     = 1;
    repeated uint64 district_ids = 2;
}
message ListDistrictResponse {
    repeated District districts = 1 [ (validate.rules).repeated = {min_items : 0} ];
}
message ListStreetRequest {
    // 以下参数传且只传一个
    repeated uint64 district_ids = 1;
    repeated uint64 street_ids   = 2;
}
message ListStreetResponse {
    repeated Street streets = 1 [ (validate.rules).repeated = {min_items : 0} ];
}

message ListInvitationCodeRequest {
    common.PagingParams paging                         = 1 [ (validate.rules).message = {required : true} ];
    repeated InvitationCode.Type invitation_code_types = 2; // 如果不为空，则按照类型去过滤
}
message ListInvitationCodeResponse {
    repeated InvitationCode invitation_codes = 1;
    common.PagingResult     paging           = 2 [ (validate.rules).message.required = true ];
}
message GetInvitationCodeRequest {
    uint64 invitation_code_id = 1; // invitation_code_id 和 text 必须传一个
    string text               = 2; // invitation_code_id 和 text 必须传一个
}
message GetInvitationCodeResponse {
    InvitationCode invitation_code = 1;
}
message CreateInvitationCodeRequest {
    InvitationCode invitation_code = 1 [ (validate.rules).message = {required : true} ];
}
message CreateInvitationCodeResponse {
    InvitationCode invitation_code = 1;
}
message DeleteInvitationCodeRequest {
    uint64 invitation_code_id = 1 [ (validate.rules).uint64 = {gt : 0} ];
}
message DeleteInvitationCodeResponse {
    InvitationCode invitation_code = 1;
}
message CleanInvitationCodeRequest {
}
message CleanInvitationCodeResponse {
}

message GetUserInfoRequest {
}
message GetUserInfoResponse {
    // 这个 message 和 oauth.proto 中的 UserInfo 保持一致，只不过由于避免 proto 循环引用的问题，在这里重新定义一遍
    message UserInfo {
        uint64 client_id  = 1;
        uint64 account_id = 2;
        uint64 group_id   = 3;
        uint64 station_id = 4;

        // STATION, TERMINAL, PURCHASE
        Group     group      = 100;
        GroupUser group_user = 101;

        // xSHOP
        Customer     customer      = 200;
        CustomerUser customer_user = 201;
    }

    UserInfo user_info = 1;
}
