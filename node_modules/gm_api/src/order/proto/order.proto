syntax = "proto3";

package ceres.order;
option  java_multiple_files = true;
option  go_package          = "code.guanmai.cn/back_end/ceres/order/proto;proto";
import "./google/api/annotations.proto";
import "./common/proto/common.proto";
import "./enterprise/proto/enterprise.proto";
import "./merchandise/proto/merchandise.proto";
import "./inventory/proto/inventory.proto";
import "./include/protoc-gen-validate/validate.proto";
import "./cmd/protoc-gen-dao/proto/dao.proto";

service OrderService {
    // 订单可能返回报错
    //        ERROR_VERSION = 20480001; // 修改版本失效，需刷新重试
    //        ERROR_CAL_UNIT = 20480002; // 单位转换计算错误
    rpc GetOrder(GetOrderRequest) returns (GetOrderResponse) {
        option (google.api.http) = {
            post : "/ceres/order/OrderService/GetOrder"
        };
    }
    // 查询合单接口
    rpc GetMergeOrder(GetMergeOrderRequest) returns (GetMergeOrderResponse) {
        option (google.api.http) = {
            post : "/ceres/order/OrderService/GetMergeOrder"
        };
    }
    rpc CreateOrder(CreateOrderRequest) returns (CreateOrderResponse) {
        option (google.api.http) = {
            post : "/ceres/order/OrderService/CreateOrder"
        };
    }
    rpc BatchCreateOrder(BatchCreateOrderRequest) returns (BatchCreateOrderResponse) {
        option (google.api.http) = {
            post : "/ceres/order/OrderService/BatchCreateOrder"
        };
    }
    //
    rpc UpdateOrderDetail(UpdateOrderDetailRequest) returns (UpdateOrderDetailResponse) {
        option (google.api.http) = {
            post : "/ceres/order/OrderService/UpdateOrderDetail"
        };
    };
    //
    rpc UpdateOrderDetailByOrderDetail(UpdateOrderDetailByOrderDetailRequest) returns (UpdateOrderDetailByOrderDetailResponse) {
        option (google.api.http) = {
            post : "/ceres/order/OrderService/UpdateOrderDetailByOrderDetail"
        };
    };
    //
    rpc DeleteOrderDetail(DeleteOrderDetailRequest) returns (DeleteOrderDetailResponse) {
        option (google.api.http) = {
            post : "/ceres/order/OrderService/DeleteOrderDetail"
        };
    };

    // 更新订单详情某些字段
    rpc UpdateOrderDetailPartField(UpdateOrderDetailPartFieldRequest) returns (UpdateOrderDetailPartFieldResponse) {
        option (google.api.http) = {
            post : "/ceres/order/OrderService/UpdateOrderDetailPartField"
        };
    };
    // 更新订单详情某些字段
    rpc UpdateOrderPartField(UpdateOrderPartFieldRequest) returns (UpdateOrderPartFieldResponse) {
        option (google.api.http) = {
            post : "/ceres/order/OrderService/UpdateOrderPartField"
        };
    };
    //
    rpc UpdateOrder(UpdateOrderRequest) returns (UpdateOrderResponse) {
        option (google.api.http) = {
            post : "/ceres/order/OrderService/UpdateOrder"
        };
    }
    //注意： 这里的删除订单是清除数据时候用的，修改订单状态为已删除调用UpdateOrder接口
    rpc DeleteOrder(DeleteOrderRequest) returns (DeleteOrderResponse) {
        option (google.api.http) = {
            post : "/ceres/order/OrderService/DeleteOrder"
        };
    }
    rpc ListOrder(ListOrderRequest) returns (ListOrderResponse) {
        option (google.api.http) = {
            post : "/ceres/order/OrderService/ListOrder"
        };
    }
    rpc GetManyOrder(GetManyOrderRequest) returns (GetManyOrderResponse) {
        option (google.api.http) = {
            post : "/ceres/order/OrderService/GetManyOrder"
        };
    }
    rpc ListOrderDetail(ListOrderDetailRequest) returns (ListOrderDetailResponse) {
        option (google.api.http) = {
            post : "/ceres/order/OrderService/ListOrderDetail"
        };
    }

    rpc ListOrderDetailGroupBySsu(ListOrderDetailGroupBySsuRequest) returns (ListOrderDetailGroupBySsuResponse) {
        option (google.api.http) = {
            post : "/ceres/order/OrderService/ListOrderDetailGroupBySsu"
        };
    }
    rpc ListOrderAfterSale(ListOrderAfterSaleRequest) returns (ListOrderAfterSaleResponse) {
        option (google.api.http) = {
            post : "/ceres/order/OrderService/ListOrderAfterSale"
        };
    }

    rpc GetOrderDetail(GetOrderDetailRequest) returns (GetOrderDetailResponse) {
        option (google.api.http) = {
            post : "/ceres/order/OrderService/GetOrderDetail"
        };
    };

    rpc UpdateOrderAfterSale(UpdateOrderAfterSaleRequest) returns (UpdateOrderAfterSaleResponse) {
        option (google.api.http) = {
            post : "/ceres/order/OrderService/UpdateOrderAfterSale"
        };
    };
    //
    // 注意：不对前端，内部接口，行为与UpdateOrderDetail类似，区别是不检查version，只检查sorting_version，非sorting模块最好不要调用
    rpc UpdateOrderSortingDetail(UpdateOrderSortingDetailRequest) returns (UpdateOrderSortingDetailResponse) {
        option (google.api.http) = {
            post : "/ceres/order/OrderService/UpdateOrderSortingDetail"
        };
    };

    // 订单中商品种类的缓存，目前只sorting模块用到，todo方案暂不可行
    rpc GetOrderSkuCacheKey(GetOrderSkuCacheKeyRequest) returns (GetOrderSkuCacheKeyResponse) {
        option (google.api.http) = {
            post : "/ceres/order/OrderService/GetOrderSkuCacheKey"
        };
    };
    rpc GetOrderSkuCache(GetOrderSkuCacheRequest) returns (GetOrderSkuCacheResponse) {
        option (google.api.http) = {
            post : "/ceres/order/OrderService/GetOrderSkuCache"
        };
    };
    rpc CreateOrderSkuCache(CreateOrderSkuCacheRequest) returns (CreateOrderSkuCacheResponse) {
        option (google.api.http) = {
            post : "/ceres/order/OrderService/CreateOrderSkuCache"
        };
    };
    rpc DeleteOrderSkuCache(DeleteOrderSkuCacheRequest) returns (DeleteOrderSkuCacheResponse) {
        option (google.api.http) = {
            post : "/ceres/order/OrderService/DeleteOrderSkuCache"
        };
    };

    // 学生订单
    rpc GetEshopOrder(GetEshopOrderRequest) returns (GetEshopOrderResponse) {
        option (google.api.http) = {
            post : "/ceres/order/OrderService/GetEshopOrder"
        };
    }
    // 注意：不对前端，内部接口
    rpc CreateEshopOrder(CreateEshopOrderRequest) returns (CreateEshopOrderResponse) {
        option (google.api.http) = {
            post : "/ceres/order/OrderService/CreateEshopOrder"
        };
    }
    rpc BatchCreateEshopOrder(BatchCreateEshopOrderRequest) returns (BatchCreateEshopOrderResponse) {
        option (google.api.http) = {
            post : "/ceres/order/OrderService/BatchCreateEshopOrder"
        };
    }
    // 注意：不对前端，内部接口
    rpc UpdateEshopOrder(UpdateEshopOrderRequest) returns (UpdateEshopOrderResponse) {
        option (google.api.http) = {
            post : "/ceres/order/OrderService/UpdateEshopOrder"
        };
    }
    // 注意：不对前端，内部接口
    rpc UpdateEshopOrderDetail(UpdateEshopOrderDetailRequest) returns (UpdateEshopOrderDetailResponse) {
        option (google.api.http) = {
            post : "/ceres/order/OrderService/UpdateEshopOrderDetail"
        };
    }
    rpc ListEshopOrder(ListEshopOrderRequest) returns (ListEshopOrderResponse) {
        option (google.api.http) = {
            post : "/ceres/order/OrderService/ListEshopOrder"
        };
    }
    // eshop合并过来的订单
    rpc CreateOrderFromEshop(CreateOrderFromEshopRequest) returns (CreateOrderFromEshopResponse) {
        option (google.api.http) = {
            post : "/ceres/order/OrderService/CreateOrderFromEshop"
        };
    }

    // 检查customer当前状态，以及是否欠款
    rpc CheckCustomerStatus(CheckCustomerStatusRequest) returns (CheckCustomerStatusResponse) {
        option (google.api.http) = {
            post : "/ceres/order/OrderService/CheckCustomerStatus"
        };
    }

    // 同步全部订单
    rpc SysSyncOrder(SysSyncOrderRequest) returns (SysSyncOrderResponse) {
        option (google.api.http) = {
            post : "/ceres/order/OrderService/SysSyncOrder"
        };
    }
    // 同步全部订单
    rpc SysSyncOrderDetail(SysSyncOrderDetailRequest) returns (SysSyncOrderDetailResponse) {
        option (google.api.http) = {
            post : "/ceres/order/OrderService/SysSyncOrderDetail"
        };
    }

    // CustomerLastUsedDriver 商户的最近使用的司机
    rpc UpdateCustomerLastUsedDriver(UpdateCustomerLastUsedDriverRequest) returns (UpdateCustomerLastUsedDriverResponse) {
        option (google.api.http) = {
            post : "/ceres/order/OrderService/UpdateCustomerLastUsedDriver"
        };
    }
    rpc GetManyCustomerLastUsedDriver(GetManyCustomerLastUsedDriverRequest) returns (GetManyCustomerLastUsedDriverResponse) {
        option (google.api.http) = {
            post : "/ceres/order/OrderService/GetManyCustomerLastUsedDriver"
        };
    }
    // 用户商户结算修改订单的状态
    // 内部接口
    rpc UpdateOrderBySettle(UpdateOrderBySettleRequest) returns (UpdateOrderBySettleResponse) {}
}

// gRPC status code
message Status {
    enum Code {
        // 操作名-数据结构名
        CODE_UNSPECIFIED                            = 0;        // 操作成功
        CODE_FAILURE_VERSION                        = 20480001; // 修改版本失效，请刷新页面，如有问题请联系客服
        CODE_CALCULATE_ERROR_UNIT                   = 20480002; // 单位转换计算错误，请联系客服
        CODE_CLOSED_ORDER                           = 20480003; // 当前订单已关闭，无法修改订单
        CODE_DELETED_ORDER                          = 20480004; // 当前订单已删除，无法修改订单
        CODE_ERROR_STATE_ORDER                      = 20480005; // 订单状态变更失败，请联系客服
        CODE_ERROR_PAYSTATE_ORDER                   = 20480006; // 订单流转的支付状态不对
        CODE_ERROR_TIME_ZONE                        = 20480007; // 时区出现问题，请联系客服
        CODE_ERROR_RECEIVE_TIME                     = 20480008; // 当前收货时间无法进行下单，联系客服完成下单
        CODE_NO_ORDER_DETAIL                        = 20480009; // 无法获取订单详情
        CODE_NOT_REVIEWED_CUSTOMER                  = 20480010; // 当前未审核无法下单，请联系客服审核
        CODE_IS_FROZEN_CUSTOMER                     = 20480011; // 当前已冻结无法下单，结清账款后进行下单
        CODE_ORDER_DUPLICATE_MENU_SSU               = 20480013; // 当前餐次已选择了相同商品，请检查购物车后重新提交
        CODE_OVER_LIMIT_SKU_QUANTITY                = 20480014; // 当前餐次存在商品超过下单数，请检查购物车后重新提交
        CODE_ERROR_SSU_PRICE                        = 20480015; // 当前购物车里价格已更新，请检查购物车后重新提交
        CODE_NO_ORDER                               = 20480016; // 当前未检索到订单
        CODE_CANNOT_ORDER_CUSTOMER                  = 20480017; // 当前商户状态有误，请联系客服
        CODE_DOWNSSU                                = 20480018; // 当前订单存在下架或已删除的商品，请检查后重新提交
        CODE_ERROR_INVENTORY_SSU                    = 20480019; // 当前订单存在库存不足的商品，请检查后重新提交
        CODE_NOT_FOUND_UNIT                         = 20480020; // 计算单位未找到
        CODE_ERROR_SSU                              = 20480021; // ssu不属于同一报价单
        CODE_LEAST_SSU                              = 20480022; // 当前商品存在未满足最小下单数的，请检查后重新提交
        CODE_DEBT_CUSTOMER                          = 20480023; // 当前存在欠款，请检查后重新提交
        CODE_NO_RELATION_CUSTOMER_AND_MENU          = 20480024; // 商户和菜谱无关联关系
        CODE_NO_RELATION_MENU_AND_SSU               = 20480025; // 菜谱和商品不匹配
        CODE_NO_RELATION_CUSTOMER_AND_SERVICEPERIOD = 20480027; // 当前时间配置与商户无关联
        CODE_NO_RELATION_CUSTOMER_AND_MENUPERIOD    = 20480028; // 当前餐次时间配置与商户无关联
        CODE_NOT_STUDENT_SCHOOLSTAFF_TYPE           = 20480029; // 下单用户类型不是学生和教职工
        CODE_ERROR_CUSTOMER_TYPE                    = 20480030; // 当前商户类型有误，无法下单，请联系客服
        CODE_IS_PRODUCTED_ORDER                     = 20480031; // 当前订单已进入生成
        CODE_JOINED_SETTLE_SHEET                    = 20480032; // 订单加入结款单后不允许修改
    }

    message DownssuDetail {
        repeated OrderDetail down_ssus = 1; // 下架或删除商品
    }
    message ErrorInventorySsuDetail {
        repeated inventory.CheckSkuUnit error_inventory_ssus = 1; // 库存不够
    }
    message NotFoundUnitDetail {
        repeated OrderDetail not_found_units = 1; // unitid未找到
    }
    message ErrorSsuDetail {
        repeated OrderDetail error_ssus = 1; // error_ssu,ssu不属于同一报价单
    }
    message LeastSsuDetail {
        repeated merchandise.Ssu least_ssus = 1; // 不满足最小下单数
    }
    message DebtCustomerDetail {
        string debt = 1; // 欠款
    }
    message NoRelationMenuAndSsuDetail {
        repeated OrderDetail ssus = 1;
    }
    message ErrorSsuPriceDetail {
        repeated OrderDetail ssus = 1;
    }
}

message Order {
    option (dao.partition_count) = 100;
    option (dao.model_type)      = TYPE_ORDER_ORDER;
    option (dao.sn_type)         = TYPE_ORDER_ORDER;

    reserved 200, 201, 202;

    enum Type {
        TYPE_UNSPECIFIED               = 0; // 未使用
        TYPE_DELICATESSEN              = 1; // 熟食订单，像学生餐，教职工餐，个人用户下的已经做好的订单
        TYPE_PRODUCT_FROM_DELICATESSEN = 2; // 从熟食订单合并过来的生产订单，用于采购、加工分拣的订单
        TYPE_PRODUCT                   = 3; // 正常下的生产订单，用于采购、加工分拣的订单
        TYPE_PRODUCT_FROM_STATION      = 4; // 从站点订单合并过来的生产订单，在站点与站点之间，流转的订单
    }
    /*
订单状态
*/
    enum State {
        STATE_UNSPECIFIED = 0;
        // 店铺订单、站点订单的状态
        STATE_WAITING_SORT = 1; // 待分拣
        STATE_SORTING      = 2; // 分拣中
        STATE_DELIVERYING  = 3; // 配送中
        STATE_RECEIVABLE   = 4; // 已签收

        // 个人订单的状态
        STATE_NOT_PRODUCE = 5; // 个人订单的未进入生产状态,在eshop展示已下单
        STATE_PRODUCED    = 6; // 个人订单的已进入生产状态
        // 通用状态
        STATE_DELETE = 1024; // 删除状态
    }

    /*
订单支付状态
*/
    enum PayState {
        PAYSTATE_UNSPECIFIED = 0;
        PAYSTATE_NOTPAY      = 1; // 未支付
        PAYSTATE_PARTPAY     = 2; // 部分支付
        PAYSTATE_PAID        = 3; // 支付完成
        PAYSTATE_REFUND      = 4; // 已退款
        PAYSTATE_CLOSED      = 5; // 已关闭
    }

    /*
分拣统计
*/
    message SortingInfo {
        uint32 total_count     = 1; // 总分拣任务数
        uint32 weight_count    = 2; // 已称重任务数
        uint32 out_stock_count = 3; // 缺货任务数
        uint32 unweight_count  = 4; // 未称重任务数
    }

    message Address {
        repeated enterprise.Address addresses = 1;
    }
    message OrderDetails {
        repeated OrderDetail order_details = 1;
    }

    message DeliveryInfo {
        repeated common.Image images = 1; // 签收图片
    }

    enum UserType {
        USERTYPE_UNSPECIFIED   = 0;
        USERTYPE_CUSTOMER_USER = 1; // bshop用户
        USERTYPE_GROUP_USER    = 2; // station，ma用户
    }

    enum OrderOp {
        // 通过什么类型的操作来下的单
        ORDEROP_UNSPECIFIED = 0;
        ORDER_NORMAL        = 1; // 正常下单
        ORDER_AMEND         = 2; // 补录
    }
    enum Status {
        STATUS_UNSPECIFIED           = 0;
        STATUS_IS_FREEZE             = 256;  // 2^8 是否冻结
        STATUS_IS_PRINT              = 512;  // 2^9 是否打印
        STATUS_IS_CREATE_STOCK_SHEET = 1024; // 2^10 是否生成过出库单
        STATUS_SORTING_IS_FINISH     = 2048; // 2^11 是否完成了全部分拣任务
        STATUS_IS_SIGNED             = 4096; // 2^12 扫码回单
    }
    // @inject_tag: gorm:"PRIMARY_KEY"
    uint64 order_id    = 1;
    uint64 status      = 2; // bitmap，一些bool状态
    uint64 revision    = 3; // 版本
    uint64 create_time = 4; // 创建时间
    uint64 update_time = 5; // 修改时间
    uint64 delete_time = 6; // 清理数据的时间，业务状态的删除不会改变这个值

    // 关联相关
    // @inject_tag: gorm:"INDEX:group_id"
    uint64 group_id         = 10;
    uint64 station_id       = 11;
    uint64 creator_id       = 12;                                        // customerUser,groupUser; 根据creator_id_type来判断
    uint64 bill_customer_id = 13 [ (validate.rules).uint64 = {gt : 0} ]; // enterprise.Customer.customer_id，结款人
    // @inject_tag: gorm:"INDEX:receive_customer_id"
    uint64                   receive_customer_id  = 14 [ (validate.rules).uint64 = {gt : 0} ];       // enterprise.Customer.customer_id，收货人，eshop的收货人是孩子或者教职工
    uint64                   driver_id            = 15;                                              // 配送司机id
    uint64                   service_period_id    = 16;                                              // 用于搜索，时间周期id
    uint64                   quotation_id         = 17;                                              // 报价单id,一个客户只属于一个报价单
    enterprise.Customer.Type customer_type        = 18;                                              // 学生餐还是老师餐，冗余出来搜索用的
    Address                  addresses            = 19 [ (validate.rules).message.required = true ]; // 收货信息
    enterprise.ServicePeriod service_period       = 20 [ (validate.rules).message.required = true ]; // enterprise.ServicePeriod，时间配置
    uint64                   menu_id              = 21;                                              // eshop.menu_id 菜谱id
    uint64                   menu_period_group_id = 22;                                              // eshop.menu_period_group_id 餐次组id
    uint64                   updater_id           = 23;                                              // customerUser,groupUser; 根据updater_id_type来判断

    // 订单金额相关
    string order_price         = 40; // 下单金额，订单详情的order_price汇总
    string freight_price       = 41; // 运费金额，正数:补交，非负数
    string aftersale_price     = 42; // 售后金额，正负数，正数:补交，负数：退钱，异常单据的汇总
    string outstock_price      = 43; // 出库金额，
    string coupon_price        = 44; // 优惠券金额，负数
    string manual_adjust_price = 45; // 手动调整金额，正负数
    string sale_price          = 46; // 销售金额(也就是用户应付金额)（outstock_price+aftersale_price+coupon_price+freight_price+manual_adjust_price）

    // 支付相关
    string paid_amount   = 50; // 累计支付金额
    string refund_amount = 51; // 累计退款金额
    string actual_amount = 52; // 实际支付金额（paid_amount-refund_amount）

    // 时间相关
    uint64 receive_time  = 60 [ (validate.rules).uint64 = {gt : 0} ]; // 收货时间
    uint64 outstock_time = 61;                                        // 出库时间
    // @inject_tag: gorm:"INDEX:order_time"
    uint64 order_time = 62; // 下单时间
    // @inject_tag: gorm:"INDEX:received_time"
    uint64 received_time = 63; // 签收时间
    string time_zone     = 64; // 时区，比如 "Asia/Shanghai"

    // @inject_tag: gorm:"INDEX:serial_no"
    string          serial_no       = 70;
    State           state           = 71;
    PayState        pay_state       = 72;
    bool            has_after_sale  = 73; // 是否有异常，用于快速搜索
    string          sorting_remark  = 74; // 分拣备注
    string          sorting_num     = 75; // 分拣序号， 用来指导投框
    DeliveryInfo    delivery_info   = 76;
    Type            order_type      = 77; // 订单类型
    UserType        creator_id_type = 78; // 用户类型
    string          remark          = 79; // 备注
    common.App.Type app_type        = 80; // 下单客户端
    SortingInfo     sorting_info    = 81; // 分拣统计数据
    OrderOp         order_op        = 82; // 通过什么类型的操作来下的单
    UserType        updater_id_type = 83; // 用户类型,

    string return_refund_amount   = 84; // 累计退货退款金额总汇
    string only_refund_amount     = 85; // 累计仅退款金额总汇
    string order_exception_amount = 86; // 订单异常退款金额总汇
    // @inject_tag: gorm:"INDEX:settle_sheet_id"
    uint64 settle_sheet_id = 90; // 结款单据ID
    // 冗余的用于搜索的字段
    //    uint64 customer_id_level_1 = 200; // 用于搜索,receive_customer_id的上一级，eshop的时候，是班级，station的时候，是公司
    //    uint64 customer_id_level_2 = 201; // 用于搜索,customer_id_level_1的上一级，eshop的时候，是学校
    //    uint64 customer_id_level_3 = 202; // 用于搜索,customer_id_level_2的上一级

    uint64 city_id     = 203; // 市级行政区
    uint64 district_id = 204; // 县级行政区
    uint64 street_id   = 205; // 街道级行政区

    uint64 customer_id_l1 = 206; // 客户层级1
    uint64 customer_id_l2 = 207; // 客户层级2
    uint64 customer_id_l3 = 208; // 客户层级3
    uint64 customer_id_l4 = 209; // 客户层级4
    uint64 customer_id_l5 = 210; // 客户层级5

    // @inject_tag: gorm:"-"
    OrderDetails order_details = 99999; // 只有查询的时候才有意义
}

/*
系统单位 - system_unit,
系统基准单位 - system_unit_anchor,
sku基本单位 - sku_base_unit,
sku自定义单位 - sku_unit,
sku自定义基准单位 - sku_unit_anchor

2kg/袋
0.5kg/斤

(名字, 系统基准单位, 比例，类型 )
系统基准 斤
(g，null，1，重量)   1g=1g   unit2(g) 系统基准单位就是自己

系统预定义的单位
(g，null，1，重量)   1g=1g   unit2(g)
(kg，g，1000，重量)  1kg=1000g   unit3(kg)
(斤，g，500，重量)  1斤=500g     unit4(斤)
(磅斤，g，300，重量)  1磅斤=300g     unit5(磅斤)

sku基本单位 从系统预定义的单位里选
(斤，g，500，重量)  1斤=500g     unit4(斤)

sku自定义单位
(袋，kg，2，type)   1袋=2kg     unit1(袋)

sku自定义单位的基准单位
(kg，g，1000，重量)  1kg=1000g   unit3(kg)

比如说
下sku1  2kg/袋

sku snap
(袋，kg，2，type)  1袋=2kg     unit1(袋)

下单数     (10,unit1(袋))
商品价格    4元 每袋 (4，unit1(袋))

下单金额：10*4=40

出库数  1. (30, unit3(kg))
       2. (15, unit1(袋))
       3. (12, unit5(磅斤))，按这个出库，就需要传当时那一刻的转换关系
*/
enum SortingStatus {
    SORTINGSTATUS_UNSPECIFIED = 0; // 未使用
    SORTINGSTATUS_UNWEIGHT    = 1; // 未称重
    SORTINGSTATUS_WEIGHTED    = 2; // 已称重
    SORTINGSTATUS_OUTOFSTOCK  = 3; // 缺货
}

message OrderDetail {
    option (dao.partition_count) = 100;
    option (dao.model_type)      = TYPE_ORDER_ORDER_DETAIL;

    enum Sync {
        SYNC_UNSPECIFIED = 0;
        SYNC_PURCHASE    = 1; // 要同步采购
        SYNC_PRODUCTION  = 2; // 要同步生产
    }
    enum Status {
        STATUS_UNSPECIFIED               = 0;
        STATUS_IS_CREATE_PURCHASE_TASK   = 256;  // 2^8，是否生成采购计划
        STATUS_IS_CREATE_PRODUCTION_TASK = 512;  // 2^9，是否生成生产计划
        STATUS_SORTING_TASK_IS_PRINT     = 1024; // 2^10 分拣任务是否已打印
        STATUS_SORTING_TASK_PART_SORT    = 2048; // 2^11 分拣任务是否部分分拣
    }
    message Units {
        repeated merchandise.Unit unit_lists = 1; // 单位组，系统单位实时拉去，这里只保存，sku基本单位，sku自定义单位，sku自定义基准单位
    }

    message OrderRelations {
        // 上下游合并订单的关联数据
        message Relation {
            uint64 order_id        = 1;
            uint64 order_detail_id = 2;
        }
        repeated Relation relations = 1;
    }

    enum State {
        STATE_UNSPECIFIED = 0;
        // 通用状态
        STATE_DELETE = 1024; // 删除状态
    }

    // @inject_tag: gorm:"PRIMARY_KEY"
    uint64 order_detail_id = 1; // 确定多sku的哪一个sku
    uint64 status          = 2; // bitmap，一些bool状态
    uint64 revision        = 3; // 版本
    uint64 create_time     = 4; // 创建时间
    uint64 update_time     = 5; // 修改时间
    uint64 delete_time     = 6; // 清理数据的时间，业务状态的删除不会改变这个值
    // 关联信息
    uint64 group_id = 10;
    // @inject_tag: gorm:"INDEX:order_id"
    uint64          order_id            = 11; // Order.id
    uint64          sku_id              = 12; // 用于搜索
    uint64          bom_id              = 13; // 包装bomid
    uint64          bom_revision        = 14; // 包装bom快照
    uint64          sorting_operater_id = 15; // 分拣操作员
    uint64          station_id          = 16; //
    merchandise.Ssu ssu                 = 17 [ (validate.rules).message.required = true ];

    // 数量
    merchandise.UnitValueSet order_unit_value    = 30 [ (validate.rules).message.required = true ]; // 下单数量价格数据
    merchandise.UnitValueSet outstock_unit_value = 31;                                              // 出库数量价格数据
    merchandise.UnitValueSet sorting_quantity    = 32;                                              // 分拣数

    // todo wrd 把用哪个字段算出来得到这个字段的写一下
    // 价格
    string order_price         = 40; // 下单金额
    string aftersale_price     = 41; // 售后金额，正负数
    string outstock_price      = 42; // 出库金额
    string manual_adjust_price = 43; // 手动调整金额，正负数
    string sale_price          = 44; // 销售金额(也就是用户应付金额)（outstock_price+aftersale+manual_adjust_price）

    OrderRelations up_relation   = 50; // 上游订单
    OrderRelations down_relation = 51; // 下游订单
    Units          unit_cal_info = 52; // 单位组
    string         remark        = 53; // 备注
    // @inject_tag: gorm:"INDEX:ssu_id"
    string                   ssu_id               = 54;                                        // sku_id_unit_id
    SortingStatus            sorting_status       = 55;                                        // 分拣状态
    uint64                   sorting_version      = 56;                                        // 分拣版本，用来防止分拣冲突
    uint64                   address_num          = 57;                                        // 和订单里的receive_info管理，标志哪一个地址
    uint64                   sort_num             = 58 [ (validate.rules).uint64 = {gt : 0} ]; // 排序字段,前端维护
    Sync                     sync_flag            = 59;
    bool                     ssu_is_weight        = 61; // 是否记重ssu, 用于搜索
    bool                     ssu_is_current_price = 62; // 是否时价ssu, 冗余
    bool                     sku_is_process       = 63; // 是否加工品, 冗余，用于搜索，不是sku里的process
    State                    state                = 64; // 状态
    merchandise.UnitValueSet return_refund_value  = 65; // 退货退款数 (商品数量)
    merchandise.UnitValueSet just_refund_value    = 66; // 仅退款数 (商品数量)
}

message OrderSkuCache {
    uint64   service_period_id             = 11;
    uint64   receive_begin_date            = 12;
    uint64   order_date                    = 13;
    repeated merchandise.Sku unweight_skus = 14;
    repeated merchandise.Sku weight_skus   = 15;
}

// 分拣序号计数器
message SortingNumCounter {
    uint64 group_id   = 10;
    uint64 station_id = 11;

    message Counter {
        uint32              normal_counter = 1; // 按订单生成分拣序号的计数器
        map<uint64, uint32> route_counter  = 2; // 按路线生成分拣序号的计数器
    }
    uint64  service_period_id = 21;
    uint64  order_date        = 22;
    Counter counter           = 23;

    uint64 update_time = 1;
    uint64 create_time = 2;
    uint64 delete_time = 3;
    // @inject_tag: gorm:"PRIMARY_KEY"
    uint64 counter_id = 4;
}

message OrderRelationInfoRequest {
    bool need_customer_info         = 1;
    bool need_quotation_info        = 2;
    bool need_sku_info              = 3;
    bool need_driver_info           = 4; // 司机信息
    bool need_user_info             = 5; // 账户信息
    bool need_sales_group_user_info = 6; // 销售经理信息
}

message OrderRelationInfoResponse {
    map<uint64, enterprise.Customer>                    customers               = 1;
    map<uint64, merchandise.Quotation>                  quotations              = 2;
    map<uint64, merchandise.GetManySkuResponse.SkuInfo> skus                    = 3;
    map<uint64, enterprise.GroupUser>                   group_users             = 4;
    map<uint64, enterprise.CustomerUser>                customer_users          = 5;
    map<uint64, common.Uint64Set>                       customer_label_relation = 6; // key为商户id 值为商户的标签id
    map<uint64, enterprise.CustomerLabel>               customer_label          = 8; // key为标签id 值为商户标签
}

message GetOrderRequest {
    uint64                   order_id          = 1;
    string                   serial_no         = 2;
    OrderRelationInfoRequest relation_info     = 3; // 关联数据是否需要
    bool                     need_delete_order = 4; // 需要删除订单
}

message GetOrderResponse {
    Order                     order         = 1;
    OrderRelationInfoResponse relation_info = 2;
}

message CommonListOrder {
    repeated string serial_nos                     = 1;
    uint64          order_receive_from_time        = 2;
    uint64          order_receive_to_time          = 3;
    repeated uint64 station_ids                    = 5;
    repeated uint64 bill_customer_ids              = 6;
    repeated uint64 receive_customer_ids           = 7;
    repeated Order.State states                    = 8;
    repeated Order.PayState pay_states             = 9;
    uint64                  order_time_from_time   = 10;
    uint64                  order_time_to_time     = 11;
    repeated uint64         quotation_ids          = 12;
    repeated uint64         app_types              = 13;
    common.Filters.Bool     is_out_stock           = 14;
    repeated uint64         driver_ids             = 15;
    uint64                  service_period_id      = 16;
    string                  sorting_remark         = 17;
    common.Filters.Bool     is_remark              = 18;
    repeated uint64         order_ids              = 19;
    string                  customer_search_text   = 20;
    repeated uint64         order_op               = 21;
    common.Filters.Bool     is_print               = 22;
    common.Filters.Bool     is_create_stock_sheet  = 23;
    common.Filters.Bool     sorting_task_is_finish = 24;
    repeated uint64         menu_period_group_ids  = 25;
    repeated uint64         menu_ids               = 26;
    common.Filters.Bool     is_freeze              = 27;
    repeated uint64         customer_ids_l1        = 28; // 公司客户
    common.Filters.Bool     is_scan_receipt        = 29;
}

message ListOrderRequest {
    CommonListOrder          common_list_order = 1 [ (validate.rules).message.required = true ];
    OrderRelationInfoRequest relation_info     = 2;

    bool                      need_total_info         = 3; // 比如：总下单金额，总出库金额
    bool                      need_sorting_count_info = 4; // 比如：完成分拣的订单总数, 未完成分拣的订单总数
    bool                      need_delete_order       = 5; // 需要删除订单
    bool                      need_not_settle         = 6; // 拉取未加入结款单的订单
    ceres.common.PagingParams paging                  = 1000 [ (validate.rules).message.required = true ];
    repeated ceres.common.SortBy sort_by              = 1001;

    enum PagingField {
        UNSPECIFIED  = 0;
        STATE        = 1;
        ORDER_TIME   = 2;
        RECEIVE_TIME = 3;
    }
}

message ListOrderResponse {
    repeated Order            orders                 = 1;
    OrderRelationInfoResponse relation_info          = 2;
    string                    total_order_price      = 3; // 总下单金额
    string                    total_outstock_price   = 4; // 总出库金额
    uint32                    sorting_finish_count   = 5; // 完成分拣的订单总数
    uint32                    sorting_unfinish_count = 6; // 未完成分拣的订单总数
    string                    total_sale_price       = 7; // 总销售金额
    string                    total_actual_amount    = 8; // 总已支付金额
    ceres.common.PagingResult paging                 = 1000;
}

message GetManyOrderRequest {
    repeated uint64 order_ids = 1;
}

message GetManyOrderResponse {
    map<uint64, Order> orders = 1;
}

message ListOrderDetailRequest {
    CommonListOrder          common_list_order           = 1 [ (validate.rules).message.required = true ];
    OrderRelationInfoRequest relation_info               = 2;
    repeated uint64          category_ids_1              = 3;
    repeated uint64          category_ids_2              = 4;
    repeated uint64          spu_ids                     = 5; // 品类
    common.Filters.Bool      ssu_is_weight               = 6; // ssu是否记重商品
    repeated SortingStatus   sorting_status              = 7;
    repeated uint64          sku_ids                     = 8;
    repeated merchandise.SsuId ssu_ids                   = 9;
    repeated uint64            detail_ids                = 10; // 订单详情id
    common.Filters.Bool        is_create_purchase_task   = 11; // 是否生成采购计划
    common.Filters.Bool        is_create_production_task = 12; // 是否生成生成计划
    common.Filters.Bool        sku_is_process            = 13; // 是否加工品
    string                     ssu_q                     = 14; // ssu名或者ssu编码

    ceres.common.PagingParams paging = 1000 [ (validate.rules).message.required = true ];
}

message DetailList {
    OrderDetail detail = 1;
    Order       order  = 2;
}

message ListOrderDetailResponse {
    repeated DetailList       details       = 1;
    OrderRelationInfoResponse relation_info = 2;
    ceres.common.PagingResult paging        = 1000;
}

message ListOrderDetailGroupBySsuRequest {
    ListOrderDetailRequest   filter        = 1;
    bool                     all           = 2; //是否全部
    OrderRelationInfoRequest relation_info = 3;
    //    ceres.common.PagingParams paging        = 1000 [ (validate.rules).message.required = true ];
}

message ListOrderDetailGroupBySsuResponse {
    message Ssu {
        merchandise.Ssu ssu    = 1;
        repeated Order  orders = 2;
    }
    repeated Ssu              ssu_data      = 1;
    OrderRelationInfoResponse relation_info = 2;
    //    ceres.common.PagingResult paging        = 1000;
}

message ListOrderAfterSaleRequest {
    CommonListOrder          common_list_order = 1 [ (validate.rules).message.required = true ];
    OrderRelationInfoRequest relation_info     = 2;
    repeated uint64          category_ids_1    = 3;
    repeated uint64          category_ids_2    = 4;
    repeated uint64          spu_ids           = 5; // 品类
    repeated uint64          sku_ids           = 6;
    repeated merchandise.SsuId ssu_ids         = 7;

    ceres.common.PagingParams paging = 1000 [ (validate.rules).message.required = true ];
}

message ListOrderAfterSaleResponse {
    repeated DetailList       detail        = 1;
    OrderRelationInfoResponse relation_info = 2;
    ceres.common.PagingResult paging        = 1000;
}

message CreateOrderRequest {
    Order  order     = 1;
    string time_zone = 2 [ (validate.rules).string = {min_len : 1} ]; // 时区，比如 "Asia/Shanghai"
}

message CreateOrderResponse {
    Order order = 1;
}

message BatchCreateOrderRequest {
    repeated Order orders    = 1;
    string         time_zone = 2 [ (validate.rules).string = {min_len : 1} ]; // 时区，比如 "Asia/Shanghai"
}

message BatchCreateOrderResponse {
    repeated Order orders = 1;
}

message UpdateOrderRequest {
    Order order          = 1;
    bool  change_version = 2; // 是否修改订单版本
}

message UpdateOrderResponse {
    Order order = 1;
}

message DeleteOrderRequest {
    string serial_no = 1;
    string revision  = 2;
}

message DeleteOrderResponse {
    string serial_no = 1;
}

message GetOrderDetailRequest {
    string                   serial_no     = 1;
    OrderRelationInfoRequest relation_info = 2;
}
message GetOrderDetailResponse {
    repeated DetailList       detail        = 1;
    OrderRelationInfoResponse relation_info = 2;
}

message UpdateOrderDetailRequest {
    Order order = 1;
}
message UpdateOrderDetailResponse {
    Order order = 1;
}

message UpdateOrderDetailByOrderDetailRequest {
    OrderDetail order_detail = 1 [ (validate.rules).message.required = true ];
}

message UpdateOrderDetailByOrderDetailResponse {
    Order order = 1;
}

message DeleteOrderDetailRequest {
    uint64 order_id        = 1;
    uint64 order_detail_id = 2;
}

message DeleteOrderDetailResponse {
    Order order = 1;
}

message UpdateOrderDetailPartFieldRequest {
    // 这里传订单号，是为了给订单表加锁
    message OrderIdDetailId {
        uint64 order_id        = 1;
        uint64 order_detail_id = 2;
    }
    repeated OrderIdDetailId order_id_detail_id = 1;
    // 以下是需要更新的字段，不要涉及到金额相关字段的修改
    bool status_is_create_purchase_task   = 2;
    bool status_is_create_production_task = 3;
}
message UpdateOrderDetailPartFieldResponse {
}

message UpdateOrderPartFieldRequest {
    repeated uint64 order_ids       = 1;
    bool            status_is_print = 2;
}
message UpdateOrderPartFieldResponse {
}

message UpdateOrderSortingDetailRequest {
    Order           order                                 = 1;
    repeated uint64 change_sorting_version_detail_ids     = 2; // 需要修改分拣版本的detail_id
    repeated uint64 change_outstock_uint_value_detail_ids = 3; // 需要覆盖出库数的detail_id
}
message UpdateOrderSortingDetailResponse {
    Order order = 1;
}

message UpdateOrderAfterSaleRequest {
    Order order = 1;
}

message UpdateOrderAfterSaleResponse {
    Order order = 1;
}

message GetOrderSkuCacheKeyRequest {
    uint64 service_period_id  = 1;
    uint64 receive_begin_date = 2;
    uint64 station_id         = 3;
}

message GetOrderSkuCacheKeyResponse {
    string order_sku_cache_key = 1;
}

message GetOrderSkuCacheRequest {
    string order_sku_cache_key = 1;
}

message GetOrderSkuCacheResponse {
    OrderSkuCache order_sku_cache = 1;
}

message CreateOrderSkuCacheRequest {
    string        order_sku_cache_key = 1;
    OrderSkuCache order_sku_cache     = 2;
}

message CreateOrderSkuCacheResponse {
}

message DeleteOrderSkuCacheRequest {
    string order_sku_cache_key = 1;
}

message DeleteOrderSkuCacheResponse {
}

message GetEshopOrderRequest {
    string                   serial_no         = 1;
    OrderRelationInfoRequest relation_info     = 2; // 关联数据是否需要
    bool                     need_delete_order = 3; // 需要删除订单
}
message GetEshopOrderResponse {
    Order                     order         = 1;
    OrderRelationInfoResponse relation_info = 2;
}

message UpdateEshopOrderDetailRequest {
    Order order = 1;
}
message UpdateEshopOrderDetailResponse {
    Order order = 1;
}

message CreateEshopOrderRequest {
    Order  order     = 1;
    string time_zone = 2 [ (validate.rules).string = {min_len : 1} ]; // 时区，比如 "Asia/Shanghai"
}

message CreateEshopOrderResponse {
    Order order = 1;
}

message BatchCreateEshopOrderRequest {
    repeated Order orders    = 1;
    string         time_zone = 2 [ (validate.rules).string = {min_len : 1} ]; // 时区，比如 "Asia/Shanghai"
}

message BatchCreateEshopOrderResponse {
    repeated Order orders = 1;
}

message CreateOrderFromEshopRequest {
    Order  order     = 1;
    string time_zone = 2 [ (validate.rules).string = {min_len : 1} ]; // 时区，比如 "Asia/Shanghai"
}

message CreateOrderFromEshopResponse {
    Order order = 1;
}

message UpdateEshopOrderRequest {
    Order order = 1;
}

message UpdateEshopOrderResponse {
    Order order = 1;
}

message ListEshopOrderRequest {
    CommonListOrder          common_list_order   = 1 [ (validate.rules).message.required = true ];
    string                   student_name        = 2;
    string                   teaching_staff_name = 3;
    string                   parents_name        = 4;
    repeated uint64          school_ids          = 5;
    repeated uint64          class_ids           = 6;
    OrderRelationInfoRequest relation_info       = 7;
    enterprise.Customer.Type customer_type       = 8;

    bool need_total_info   = 9;  // 总下单金额
    bool need_delete_order = 10; // 需要删除订单

    ceres.common.PagingParams paging     = 1000 [ (validate.rules).message.required = true ];
    repeated ceres.common.SortBy sort_by = 1001;

    enum PagingField {
        UNSPECIFIED  = 0;
        RECEIVE_TIME = 1;
        ORDER_TIME   = 2;
    }
}

message ListEshopOrderResponse {
    repeated Order            orders               = 1;
    OrderRelationInfoResponse relation_info        = 2;
    string                    total_order_price    = 3; // 总下单金额
    string                    total_outstock_price = 4; // 总出库金额
    ceres.common.PagingResult paging               = 1000;
}

message CheckCustomerStatusRequest {
    uint64 customer_id = 1;
    string time_zone   = 2 [ (validate.rules).string = {min_len : 1} ]; // 时区，比如 "Asia/Shanghai"
}

message CheckCustomerStatusResponse {
    string debt = 1; // 欠款
}

message SysSyncOrderRequest {
    common.SyncOptions sync_options = 1;
}

message SysSyncOrderResponse {
    repeated Order orders   = 1;
    bool           has_more = 2;
}

message SysSyncOrderDetailRequest {
    common.SyncOptions sync_options = 1;
}

message SysSyncOrderDetailResponse {
    repeated OrderDetail order_details = 1;
    bool                 has_more      = 2;
}

message GetMergeOrderRequest {
    Order order = 1 [ (validate.rules).message.required = true ]; // 待合单订单
}
message GetMergeOrderResponse {
    Order order = 1 [ (validate.rules).message.required = true ]; // 被合单数据
}

enum IdType {
    UNSPECIFIED         = 0;
    CUSTOMER_ID         = 1;
    QUOTATION_ID        = 2;
    SKU_ID              = 3;
    GROUP_USER_ID       = 4;
    CUSTOMER_USER_ID    = 5;
    DRIVER_ID           = 6;
    BOM_SNAPSHOT_ID     = 7;
    SALES_GROUP_USER_ID = 8;
    SERVICE_PERIOD_ID   = 9;
}

message OrderCustomerLastUsedDriver {
    option (dao.partition_count) = 1;
    option (dao.primary_key)     = "order_customer_last_used_driver_id";

    // @inject_tag: gorm:"PRIMARY_KEY"
    uint64 order_customer_last_used_driver_id = 1;
    uint64 create_time                        = 4; // 创建时间
    uint64 update_time                        = 5; // 修改时间
    uint64 delete_time                        = 6; // 删除时间，非0表示已删除

    uint64 group_id    = 10;
    uint64 customer_id = 11;
    uint64 driver_id   = 12; //最后一次分配的司机id
}

message GetManyCustomerLastUsedDriverRequest {
    repeated uint64 customer_ids = 1;
};
message GetManyCustomerLastUsedDriverResponse {
    map<uint64, OrderCustomerLastUsedDriver> customer_last_used_drivers = 1;
};

message UpdateCustomerLastUsedDriverRequest {
    OrderCustomerLastUsedDriver customer_last_used_driver = 1;
}
message UpdateCustomerLastUsedDriverResponse {
    OrderCustomerLastUsedDriver customer_last_used_driver = 1;
}

message UpdateOrderBySettleRequest {
    Order order          = 1;
    bool  change_version = 2; // 是否修改订单版本
}

message UpdateOrderBySettleResponse {
    Order order          = 1;
}