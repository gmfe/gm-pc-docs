syntax = "proto3";

// 修改库存单位结构
// 单据加上字段
// 冻结和在途
option go_package = "code.guanmai.cn/back_end/ceres/inventory/proto;proto";

package ceres.inventory;
option java_multiple_files = true;
// import "./enterprise.proto";
import "./merchandise/proto/merchandise.proto";
// import "./code.guanmai.cn/back_end/ceres/enterprice/enterprice.proto";

// 占位用, 分页规范
message Pagination {}

message SkuUnit {
    uint64 sku_id  = 1;
    uint64 unit_id = 2;
}

service InventoryService {

    // 单据
    rpc CreateStockSheet(CreateStockSheetRequest) returns (CreateStockSheetResponse) {};
    rpc UpdateStockSheet(UpdateStockSheetRequest) returns (UpdateStockSheetResponse) {};
    rpc DeleteStockSheet(DeleteStockSheetRequest) returns (DeleteStockSheetResponse) {};
    rpc GetStockSheet(GetStockSheetRequest) returns (GetStockSheetResponse) {};
    rpc ListStockSheet(ListStockSheetRequest) returns (ListStockSheetResponse) {};

    // 批次库存
    rpc CreateBatch(CreateBatchRequest) returns (CreateBatchResponse) {};

    rpc UpdateBatch(UpdateBatchRequest) returns (UpdateBatchResponse) {};
    rpc DeleteBatch(DeleteBatchRequest) returns (DeleteBatchResponse) {};
    rpc GetBatch(GetBatchRequest) returns (GetBatchResponse) {};
    rpc ListBatch(ListBatchRequest) returns (ListBatchResponse) {};

    // 库存汇总查询
    // sku库存汇总
    rpc CreateSkuStock(CreateSkuStockRequest) returns (CreateSkuStockResponse) {};
    rpc UpdateSkuStock(UpdateSkuStockRequest) returns (UpdateSkuStockResponse) {};
    rpc DeleteSkuStock(DeleteSkuStockRequest) returns (DeleteSkuStockResponse) {};
    rpc ListSkuStock(ListSkuStockRequest) returns (ListSkuStockResponse) {};
    rpc GetSkuStock(GetSkuStockRequest) returns (GetSkuStockResponse) {};

    // ssu库存汇总
    rpc CreateSkuUnitStock(CreateSkuUnitStockRequest) returns (CreateSkuUnitStockResponse) {};
    rpc UpdateSkuUnitStock(UpdateSkuUnitStockRequest) returns (UpdateSkuUnitStockResponse) {};
    rpc DeleteSkuUnitStock(DeleteSkuUnitStockRequest) returns (DeleteSkuUnitStockResponse) {};
    rpc ListSkuUnitStock(ListSkuUnitStockRequest) returns (ListSkuUnitStockResponse) {};
    rpc GetSkuUnitStock(GetSkuUnitStockRequest) returns (GetSkuUnitStockResponse) {};

    // 下单库存限制配置
    rpc CreateSaleStockConfig(CreateSaleStockConfigRequest) returns (CreateSaleStockConfigResponse) {};
    rpc UpdateSaleStockConfig(UpdateSaleStockConfigRequest) returns (UpdateSaleStockConfigResponse) {};
    rpc DeleteSaleStockConfig(DeleteSaleStockConfigRequest) returns (DeleteSaleStockConfigResponse) {};
    rpc ListSaleStockConfig(ListSaleStockConfigRequest) returns (ListSaleStockConfigResponse) {};
    rpc GetSaleStockConfig(GetSaleStockConfigRequest) returns (GetSaleStockConfigResponse) {};

    // 批次流水/变动记录
    rpc CreateBatchLog(CreateBatchLogRequest) returns (CreateBatchLogResponse) {};
    rpc UpdateBatchLog(UpdateBatchLogRequest) returns (UpdateBatchLogResponse) {};
    rpc DeleteBatchLog(DeleteBatchLogRequest) returns (DeleteBatchLogResponse) {};
    rpc GetBatchLog(GetBatchLogRequest) returns (GetBatchLogResponse) {};
    rpc ListBatchLog(ListBatchLogRequest) returns (ListBatchLogResponse) {};

    // 库存记录
    rpc CreateStockLog(CreateStockLogRequest) returns (CreateStockLogResponse) {};

    rpc UpdateStockLog(UpdateStockLogRequest) returns (UpdateStockLogResponse) {};
    rpc DeleteStockLog(DeleteStockLogRequest) returns (DeleteStockLogResponse) {};

    rpc GetStockLog(GetStockLogRequest) returns (GetStockLogResponse) {};
    rpc ListStockLog(ListStockLogRequest) returns (ListStockLogResponse) {};

    // 结款单
    rpc CreateStatement(CreateStatementRequest) returns (CreateStatementResponse) {};
    rpc UpdateStatement(UpdateStatementRequest) returns (UpdateStatementResponse) {};
    rpc DeleteStatement(DeleteStatementRequest) returns (DeleteStatementResponse) {};
    rpc GetStatement(GetStatementRequest) returns (GetStatementResponse) {};
    rpc ListStatement(ListStatementRequest) returns (ListStatementResponse) {};

    // 货位
    rpc CreateShelf(CreateShelfRequest) returns (CreateShelfResponse) {};
    rpc UpdateShelf(UpdateShelfRequest) returns (UpdateShelfResponse) {};
    rpc DeleteShelf(DeleteShelfRequest) returns (DeleteShelfResponse) {};
    rpc GetShelf(GetShelfRequest) returns (GetShelfResponse) {};
    rpc ListShelf(ListShelfRequest) returns (ListShelfResponse) {};

    // 调整
    rpc CreateAdjustSheet(CreateAdjustSheetRequest) returns (CreateAdjustSheetResponse) {};
    rpc UpdateAdjustSheet(UpdateAdjustSheetRequest) returns (UpdateAdjustSheetResponse) {};
    rpc DeleteAdjustSheet(DeleteAdjustSheetRequest) returns (DeleteAdjustSheetResponse) {};
    rpc GetAdjustSheet(GetAdjustSheetRequest) returns (GetAdjustSheetResponse) {};
    rpc ListAdjustSheet(ListAdjustSheetRequest) returns (ListAdjustSheetResponse) {};

    //  调整记录
    rpc CreateAdjustLog(CreateAdjustLogRequest) returns (CreateAdjustLogResponse) {};
    rpc UpdateAdjustLog(UpdateAdjustLogRequest) returns (UpdateAdjustLogResponse) {};
    rpc DeleteAdjustLog(DeleteAdjustLogRequest) returns (DeleteAdjustLogResponse) {};
    rpc GetAdjustLog(GetAdjustLogRequest) returns (GetAdjustLogResponse) {};
    rpc ListAdjustLog(ListAdjustLogRequest) returns (ListAdjustLogResponse) {};

    // 商户周转物记录
    rpc CreateCustomerTurnover(CreateCustomerTurnoverRequest) returns (CreateCustomerTurnoverResponse) {};
    rpc UpdateCustomerTurnover(UpdateCustomerTurnoverRequest) returns (UpdateCustomerTurnoverResponse) {};
    rpc DeleteCustomerTurnover(DeleteCustomerTurnoverRequest) returns (DeleteCustomerTurnoverResponse) {};
    rpc GetCustomerTurnover(GetCustomerTurnoverRequest) returns (GetCustomerTurnoverResponse) {};
    rpc ListCustomerTurnover(ListCustomerTurnoverRequest) returns (ListCustomerTurnoverResponse) {};
}

// 主要的进销存操作类型
enum OperateType {
    OPERATE_TYPE_NIL = 0; // 无效类型
    //入库 100 ~ 500 *出库的反审,也认为是入库
    OPERATE_TYPE_PURCHASE_IN = 100; // 采购入库
    OPERATE_TYPE_PRODUCT_IN  = 101; // 生产入库
    OPERATE_TYPE_MATERIAL_IN = 102; // 退料入库
    OPERATE_TYPE_REFUND_IN   = 103; // 销售退货入库
    OPERATE_TYPE_TRANSFER_IN = 104; // 调拨入库
    OPERATE_TYPE_OTHER_IN    = 105; // 其他入库

    OPERATE_TYPE_SALE_OUT_ROLL_BACK     = 106; // 销售出库反审核
    OPERATE_TYPE_REFUND_OUT_ROLL_BACK   = 111; // 采购退货反审核
    OPERATE_TYPE_OTHER_OUT_ROLL_BACK    = 109; // 其他出库反审核
    OPERATE_TYPE_MATERIAL_OUT_ROLL_BACK = 112; // 领料出库反审核

    //出库 500 ~ 1000 *入库的反审,也认为是出库
    OPERATE_TYPE_SALE_OUT     = 501; // 销售出库
    OPERATE_TYPE_MATERIAL_OUT = 502; // 领料出库
    OPERATE_TYPE_REFUND_OUT   = 503; // 采购退货出库
    OPERATE_TYPE_OTHER_OUT    = 504; // 其他出库

    OPERATE_TYPE_PURCHASE_IN_ROLL_BACK = 505; // 采购入库反审核
    OPERATE_TYPE_PRODUCT_IN_ROLL_BACK  = 507; // 生产入库反审核
    OPERATE_TYPE_MATERIAL_IN_ROLL_BACK = 509; // 退料入库反审核
    OPERATE_TYPE_OTHER_IN_ROLL_BACK    = 511; // 其他入库反审核

    //盘点 1000~1500
    OPERATE_TYPE_LOSS     = 1000; // 报损
    OPERATE_TYPE_INCREASE = 1001; // 报溢
    OPERATE_TYPE_CHECK    = 1003; // 未确定盘点(确定是盘点操作时,并不确定是报损还是报溢)
}

message Quantity {
    string original_unit     = 1; // 基本单位数 原始数据
    string original_sku_unit = 2; // 包装单位数 原始数据
    string base_unit         = 3; // 基本单位数
    string sku_unit          = 4; // 包装单位数
}

message Price {
    string base_unit          = 1; // 基本单位金额(调整后)
    string original_base_unit = 2; // 基本单位原始金额(调整/分摊前)
    string sku_unit           = 3; // 包装单位金额(调整后)
    string original_sku_unit  = 4; // 包装单位金
}

message Stock {
    Quantity quantity    = 1; // 库存变动数
    Price    unit_price  = 2; // 库存变动单价
    Price    total_price = 3; // 库存变动总价
}

message UnitStocks {
    map<uint64, Stock> unit_stocks = 1; // key : unitid , value:Stock
}

// 货位 每一条数据都是货位树的一个节点
message Shelf {
    // @inject_tag: gorm:"PRIMARY_KEY"
    uint64 shelf_id    = 1; // 主键
    uint64 create_time = 2;
    uint64 update_time = 3;
    uint64 delete_time = 4;

    uint64 group_id   = 10;
    uint64 station_id = 11;
    uint64 parent_id  = 12; // 所属上层货位的主键id, 无上层货位为0

    string name   = 20; // 货位名
    string remark = 21; // 备注
}

// 不建表 货位链,主要用于记录中存储货位快照
message ShelfChain {
    repeated Shelf shelf_chain = 1; // 从最高层到最底层的货位的有序列表
}

// 不建表
message ProcessIds {
    repeated uint64 production_task_id = 1; // 已完成的工序
}

// 批次库存  一个ssu的一个批次
message Batch {
    // @inject_tag: gorm:"PRIMARY_KEY"
    uint64 batch_id      = 1; // 批次库存主键id
    uint64 create_time   = 2; // 批次创建时间(物理时间)
    uint64 in_stock_time = 3; // 入库时间(业务时间)
    uint64 update_time   = 4; //最后修改时间(物理时间)
    uint64 delete_time   = 5; //删除时间(物理时间)

    uint64 group_id          = 10;
    uint64 station_id        = 11;
    uint64 spu_id            = 12;
    uint64 sku_id            = 13;
    uint64 base_unit_id      = 14; //
    uint64 sku_unit_id       = 15; // 包装单位
    uint64 in_stock_sheet_id = 17; //入库单id

    string batch_customized_code = 20; // 站点内唯一的批次号(客户用)
    Stock  stock                 = 21;
    string base_unit_quantity    = 22; // 基本单位库存,冗余出来查询用

    uint64 production_time = 24; // 生产日期
    uint64 expiry_time     = 25; // 保质期

    ProcessIds production_task_ids = 26; // 已完成工序的id
    uint64     supplier_id         = 27; //供应商id
    uint64     shelf_id            = 28; // 所属货位

    string remark = 30; //备注
}

// 批次流水
message BatchLog {
    // @inject_tag: gorm:"PRIMARY_KEY"
    uint64 batch_log_id = 1; // 主键
    uint64 create_time  = 2;
    uint64 update_time  = 3;
    uint64 delete_time  = 4;
    uint64 status       = 5;

    uint64 group_id     = 10;
    uint64 station_id   = 11;
    uint64 spu_id       = 12;
    uint64 sku_id       = 13;
    uint64 base_unit_id = 14;
    uint64 sku_unit_id  = 15;
    uint64 batch_id     = 16; // 批次id
    uint64 stock_log_id = 17; // 库存记录id

    uint32 operate_type = 20; // 操作类型
    Stock  old_stock    = 21; //  变动前单位单位库存
    Stock  new_stock    = 22; //  变动后单位库存
}

// sku某一个unit单独的库存汇总
message SkuUnitStock {
    // 待操作库存,包括冻结库存和在途库存
    message PendingStock {
        message PendingStockDetail {
            enum Type {
                PENDING_STOCK_TYPE_NIL          = 0;
                PENDING_STOCK_TYPE_PRODUCT_IN   = 1; // 生产入库 在途库存
                PENDING_STOCK_TYPE_MATERIAL_OUT = 2; // 领料出库 冻结库存
                PENDING_STOCK_TYPE_MATERIAL_IN  = 3; // 退料入库 在途库存
                PENDING_STOCK_TYPE_PURCHASE_IN  = 4; // 采购 在途库存
                PENDING_STOCK_TYPE_ORDER        = 5; // 订单 冻结库存
            }
            uint32 pending_type = 1;
            Stock  stock        = 2;
            uint64 sku_id       = 3;
            uint64 base_unit_id = 4;
            uint64 sku_unit_id  = 5;
        }

        map<uint64, PendingStockDetail> pending_stocks = 2; // key : order_id/purchase_sheet_id/production_task_id , value:Stock
    }
    // @inject_tag: gorm:"PRIMARY_KEY"
    uint64 sku_unit_stock_id = 1; //主键
    uint64 update_time       = 3; //最后修改时间(物理时间)
    uint64 delete_time       = 4;

    uint64 group_id     = 10;
    uint64 station_id   = 11;
    uint64 spu_id       = 12;
    uint64 sku_id       = 13;
    uint64 base_unit_id = 14;
    uint64 sku_unit_id  = 15;

    Stock stock = 21; //  单位库存

    PendingStock frozen_stock_detail     = 22;
    PendingStock in_transit_stock_detail = 23;
    string       base_unit_quantity      = 24; // 基本单位库存,冗余出来查询用

    // 冻结库存和销售限制库存都用基本单位,如果不直接是基本单位,也转换成基本单位
    // 客户经常会想到底哪些单 冻结库存, 所以还是要存下来
    Stock frozen_stock     = 33; // 冻结库存 是  frozen_details 的累加汇总
    Stock in_transit_stock = 34; // 在途库存 是 in_transit_details 的累加汇总
}

// TODO 在哪设置 冻结库存和下单库存限制
message SaleStockConfig {

    enum ConfigType {
        CONFIG_TYPE_NIL           = 0;
        CONFIG_TYPE_NO_CONFIG     = 1; // 下单无限制
        CONFIG_TYPE_REAL_STOCK    = 2; // 当前库存+冻结库存数限制
        CONFIG_TYPE_VIRTUAL_STOCK = 3; // 手动设置销售库存
    }
    // @inject_tag: gorm:"PRIMARY_KEY"
    uint64 sale_stock_config_id = 1;

    uint64 create_time = 2;
    uint64 update_time = 3;
    uint64 delete_time = 4;
    uint64 status      = 5;

    uint64 group_id     = 10;
    uint64 station_id   = 11;
    uint64 spu_id       = 12;
    uint64 sku_id       = 13;
    uint64 base_unit_id = 14; //  基本单位id
    uint64 sku_unit_id  = 15; //

    Quantity quantity    = 23; // 下单库存数限制
    uint64   config_type = 24; // enum ConfigType
}

// Sku的总库存汇总
message SkuStock {
    // @inject_tag: gorm:"PRIMARY_KEY"
    uint64 sku_stock_id = 1; // 主键
    uint64 update_time  = 3; //最后修改时间(物理时间)
    uint64 delete_time  = 4;

    uint64 group_id     = 10;
    uint64 station_id   = 11;
    uint64 spu_id       = 12;
    uint64 sku_id       = 13;
    uint64 base_unit_id = 14;

    Stock  stock              = 20; // 基本单位库存
    string base_unit_quantity = 21; // 基本单位库存,冗余出来查询用
}

// TODO 预设原因和记录原因 分摊或折让
message CostAllocation {
    repeated Detail details = 1;

    message Detail {
        enum CostAllocationType {
            Ssu_PRICE    = 0; //根据商品金额分摊
            Ssu_quantity = 1; //根据商品数量分摊
            SHEET        = 2; //折让
        }

        // TODO 补上reason
        //        enum CostAllocationReason {
        //        }

        CostAllocationType cost_allocation_type = 1; // 折让类型
        Quantity           quantity             = 2; // 折让数量
        uint64             reason               = 3; // 折让原因
        Price              price                = 4; // 折让金额
    }
}

// 库存单据,入库单,出库单,盘点单等修改库存的单据
message StockSheet {

    message UpdateBatch {
        uint64 batch_id              = 1;
        Stock  stock                 = 2;
        bool   update_price          = 3; // true:用stock.Price里的价格计算 false:用提交时的均价计算(价格不变)
        string batch_customized_code = 4; // 批次号
    }
    // 单据详情, 内嵌, 每一条对应一个ssu的库存操作
    message Detail {
        uint64               detail_id           = 3; // 单据中唯一
        repeated Batch       create_batches      = 4; // 创建的批次
        repeated UpdateBatch update_batches      = 5; // 修改的批次
        ProcessIds           production_task_ids = 6; // 关联的加工计划id
        int64                rank                = 7; // 手动排序用

        Stock stock = 31; // 变动库存

        uint64 spu_id       = 10;
        uint64 sku_id       = 11;
        uint64 base_unit_id = 12; // 基本单位id
        uint64 sku_unit_id  = 13; // 自定义单位id
        uint64 remark       = 14;
    }
    message Details {
        repeated Detail details = 1; // 商品详情
        //        repeated Detail turnover_details = 2; // 周转物详情
    }

    // 单据类型
    enum SheetType {
        SHEET_TYPE_NIL_TYPE = 0; // 无效类型
        //入库
        SHEET_TYPE_PURCHASE_IN = 100; // 采购入库
        SHEET_TYPE_PRODUCT_IN  = 110; // 生产入库
        SHEET_TYPE_MATERIAL_IN = 120; // 退料入库
        SHEET_TYPE_REFUND_IN   = 130; // 销售退货入库
        SHEET_TYPE_TRANSFER_IN = 140; // 调拨入库 第一期不做
        SHEET_TYPE_OTHER_IN    = 150; // 其他入库
        //出库
        SHEET_TYPE_SALE_OUT     = 300; // 销售出库
        SHEET_TYPE_MATERIAL_OUT = 310; // 领料出库
        SHEET_TYPE_REFUND_OUT   = 320; // 采购退货出库
        SHEET_TYPE_OTHER_OUT    = 330; // 其他出库
        //盘点
        SHEET_TYPE_INVENTORY = 600; // 盘点单
        //调拨
        SHEET_TYPE_TRANSFER = 400; // 调拨单(移库单) 第一期不做
        //周转物类型
        SHEET_TYPE_TURNOVER_LOAN   = 700; // 借出单(客户端表现成记录)
        SHEET_TYPE_TURNOVER_REVERT = 800; // 归还单(客户端表现成记录)
    }

    // 单据状态
    enum StockSheetStatus {
        // 实体单据用,如入库单,出库单
        SHEET_STATUS_NIL_STATUS      = 0; // 无效状态
        SHEET_STATUS_NOT_SUBMITTED   = 1; // 未提交(草稿)
        SHEET_STATUS_SUBMITTED       = 2; // 已提交(待审核)
        SHEET_STATUS_NOT_APPROVED    = 3; // 审核不通过
        SHEET_STATUS_APPROVED        = 4; // 审核通过 (修改库存)
        SHEET_STATUS_CANCEL_APPROVAL = 5; // 反审核 (修改库存)

        SHEET_STATUS_DELETED = 6; // 冲销/删除
        SHEET_STATUS_PAID    = 7; // 已结款
    }
    // enum Status {
    //     STOCK_SHEET_STATUS_NIL      = 0;
    //     STOCK_SHEET_STATUS_ADJUSTING = 256;  // 2^8 是否调整中
    //     STOCK_SHEET_STATUS_PRINTED   = 512;  // 2^9 是否已打印
    //     STOCK_SHEET_STATUS_ADJUSTED  = 1024; // 2^10 是否被调整过
    // }

    enum RelatedSheetType {
        RELATED_SHEET_TYPE_NIL            = 0;
        RELATED_SHEET_TYPE_ORDER          = 2; // 订单
        RELATED_SHEET_TYPE_PURCHASE_SHEET = 3; // 采购单
        RELATED_SHEET_TYPE_STOCK_SHEET    = 4; // 库存单据
    }
    // @inject_tag: gorm:"PRIMARY_KEY"
    uint64 stock_sheet_id = 1; // 单据号(主键)
    uint64 create_time    = 3; // 建单时间(物理)
    uint64 update_time    = 4; // 最后修改时间(物理)
    uint64 delete_time    = 5; // 删除时间(物理)
    int32  sheet_type     = 6; // 单据类型
    // uint64 status         = 9; // enum Status

    uint64 group_id         = 10; // groupid
    uint64 station_id       = 11; //  站点id
    uint64 target_id        = 12; // 商户,或供应商的id, 和target_type 一起使用
    uint64 statement_id     = 14; // 结款单id
    uint64 sku_id           = 15; // 产品定义的一些表面上是非单据业务操作,需要查询商品
    uint64 related_sheet_id = 16; // 关联单据

    uint64 sheet_status     = 20; // 单据状态 enum StockSheetStatus
    uint64 stock_time       = 21; // 最近一次库存操作时间
    uint64 submit_time      = 25; // 提交时间(业务时间,客户可自己指定)
    uint64 commit_time      = 26; // 提交时间(物理时间)
    uint64 creator_id       = 22; // 创建人id
    string remark           = 28; // 备注
    string target_type      = 44; // 商户,或供应商的id, 和target_id 一起使用
    uint64 last_adjust_time = 45; // 这个单据发起的调整的最后调整时间,避免反复调整

    CostAllocation discounts            = 29; // 折让
    CostAllocation cost_allocations     = 30; // 分摊
    string         original_total_price = 31; // 原始单据总金额(不受调整影响)
    string         total_price          = 32; // 当前单据总金额
    Details        details              = 33; // 单据详情
    uint64         related_sheet_type   = 34; // 关联单据类型 RelatedSheetType

    string customized_id = 99; // 业务单号,展示,唯一
}

// 记录单据和加工计划的关联, 搜索用
message StockSheetProcess {
    // @inject_tag: gorm:"PRIMARY_KEY"
    uint64 stock_sheet_production_task_id = 1; // 主键
    uint64 create_time                    = 4; // 创建时间
    uint64 update_time                    = 5; // 修改时间
    uint64 delete_time                    = 6; // 删除时间，非0表示已删除

    uint64 group_id           = 10;
    uint64 station_id         = 11;
    uint64 stock_sheet_id     = 12;
    uint64 production_task_id = 13;
}

// 库存变动记录
message StockLog {
    // @inject_tag: gorm:"PRIMARY_KEY"
    uint64 stock_log_id = 1; // 主键
    uint64 submit_time  = 2; // 业务时间
    uint64 create_time  = 3; // 物理时间
    uint64 update_time  = 4;
    uint64 delete_time  = 5;

    uint64 group_id       = 10;
    uint64 station_id     = 11;
    uint64 spu_id         = 12;
    uint64 sku_id         = 13;
    uint64 base_unit_id   = 14;
    uint64 sku_unit_id    = 15;
    uint64 operator_id    = 16; // 操作人id
    uint64 stock_sheet_id = 17; // 库存单据id
    uint64 cancel_log_id  = 18; // 反审这条log的log
    uint64 target_id      = 19; // 单据对象id

    StockSheet.Detail detail = 20; // 直接记录单据详情快照作为变动记录

    Stock old_stock = 21;
    Stock new_stock = 22;

    uint32 operate_type = 23; // enum OperateType
}

// 结款单
message Statement {
    message StatementDetails {
        message StatementDetail {
            uint64 stock_sheet_id          = 1; // 被结款库存单据id
            uint64 stock_sheet_type        = 2; // 库存单据类型
            uint64 stock_sheet_submit_time = 3; // 库存单据提交时间
            string stock_sheet_total_price = 4; // 库存单据总金额
            string stock_sheet_serial_no      = 5; // 被结款库存单据号
        }
        repeated StatementDetail statement_details = 1;
    }

    // 结款单状态
    enum StatementStatus {
        STATEMENT_STATUS_NIL       = 0;
        SHEET_STATUS_NOT_SUBMITTED = 1; // 未提交(草稿)
        SHEET_STATUS_NOT_PASSED    = 2; // 审核不通过 ()
        SHEET_STATUS_PASSED        = 3; // 审核通过 (修改库存)
        SHEET_STATUS_PART_PAID     = 5; // 部分结款
        SHEET_STATUS_PAID          = 6; // 已结款
        SHEET_STATUS_DELETED       = 7; // 冲红
    }
    // @inject_tag: gorm:"PRIMARY_KEY"
    uint64 statement_id = 1; // 主键
    uint64 create_time  = 2;
    uint64 update_time  = 3;
    uint64 delete_time  = 4;
    uint64 submit_time  = 5; // 结款日期,业务时间

    uint64 supplier_id = 10; // 供应商id

    StatementDetails statement_details = 20; // 结款单详情
    CostAllocation   discount_details  = 29; // 折让
    string           total_price       = 30; // 结款总额
    uint64           statement_status  = 31; // enum StatementStatus
    string           running_number    = 32; // 流水号
    string           remark            = 33; // 备注
    string           paid_money        = 34; // 支付金额
}

// 调整相关
// 调整单详情 single

// 调整单
message AdjustSheet {
    enum AdjustSheetStatus {
        ADJUST_SHEET_STATUS_NIL           = 0;
        ADJUST_SHEET_STATUS_NOT_SUBMITTED = 1;
        ADJUST_SHEET_STATUS_ADJUSTING     = 2; // 调整中
        ADJUST_SHEET_STATUS_DONE          = 3; // 调整已完成
        ADJUST_SHEET_STATUS_FAIL          = 4; // 调整失败
    }
    message Detail {
        uint64 stock_sheet_id = 1;
        uint64 batch_id       = 2;
        Price  original_price = 3; // 调整/分摊前价格
        Price  adjust_price   = 4; // 调整的价格
    }
    message Details {
        repeated Detail details = 1; // 调整单详情
    }
    // @inject_tag: gorm:"PRIMARY_KEY"
    uint64 adjust_sheet_id = 1; // 主键
    uint64 create_time     = 3;
    uint64 update_time     = 4;

    uint64 station_id = 10;
    uint64 group_id   = 11;

    string serial_no = 20;

    Details details      = 21; // 单据详情
    uint64  sheet_status = 22; // 单据状态
}

message AdjustLog {

    message AdjustBatchLogs {
        message AdjustBatchLogPrice {
            uint64 batch_log_id = 1;
            string old_price    = 2;
            string new_price    = 3;
        }
        repeated AdjustBatchLogPrice adjust_batch = 7;
    }

    // @inject_tag: gorm:"PRIMARY_KEY"
    uint64 adjust_log_id = 1; // 主键
    uint64 create_time   = 4;
    uint64 update_time   = 5;

    uint64 group_id        = 10;
    uint64 station_id      = 11;
    uint64 adjust_sheet_id = 12;
    uint64 stock_log_id    = 13;

    AdjustSheet.Detail adjust_sheet_detail = 20;

    string          stock_log_old_price = 2;
    string          stock_log_new_price = 3;
    AdjustBatchLogs adjust_batch_logs   = 23;
}

// 商家关联的所有周转物的库存数
message CustomerTurnover {

    // 只存了skuid, 单位直接查sku的基本单位,总要查sku的

    message SkuStocks {
        map<uint64, Stock> unit_stocks = 1; // key : sku_id , value:Stock
    }
    // @inject_tag: gorm:"PRIMARY_KEY"
    uint64 customer_turnover_id = 1; // 主键
    uint64 update_time          = 4; // 最后修改时间(物理)
    uint64 delete_time          = 5; // 删除时间(物理)

    uint64 group_id     = 10;
    uint64 station_id   = 11;
    uint64 customer_id  = 12;
    uint64 base_unit_id = 13;
}

// 进销存查询时间维度
enum TimeType {
    TIME_TYPE_NIL           = 0;
    TIME_TYPE_CREATE        = 1;  // 物理创建时间
    TIME_TYPE_SUBMIT        = 2;  // 业务提交时间
    TIME_TYPE_COMMIT        = 3;  // 物理提交时间
    TIME_TYPE_ORDER_RECEIVE = 11; // 订单收货时间
}

message CheckSkuUnit {
    SkuUnit sku_unit         = 1;
    string  request_quantity = 2; // 请求的下单数
    bool    pass             = 3; // 库存是否充足,请求时默认为False, 返回时为根据配置
    string  real_quantity    = 4; // 剩余库存, 请求时不填
}

//     STOCK_SHEET_STATUS_NIL      = 0;
//     STOCK_SHEET_STATUS_ADJUSTING = 256;  // 2^8 是否调整中
//     STOCK_SHEET_STATUS_PRINTED   = 512;  // 2^9 是否已打印
//     STOCK_SHEET_STATUS_ADJUSTED  = 1024; // 2^10 是否被调整过

enum RequestDetail {
    REQUEST_DETAIL_NIL     = 0;
    REQUEST_DETAIL_SKUS    = 256; // 2^8 是否需要返回skus详情字典
    REQUEST_DETAIL_SHELVES = 512; // 2^9 是否需要返回货位详情字典
}

// 返回给前端的商品详情
message SkuMap {
    message SkuDetail {
        merchandise.Sku               detail   = 1;
        map<uint64, merchandise.Ssu>  ssu_map  = 2; // key:unit_id
        map<uint64, merchandise.Unit> unit_map = 3; // key:unit_id
    }
    map<uint64, SkuDetail> sku_map = 1; // key:sku_id
}

// 其他模块调用的api
// 判断库存是否足够下单
message UpdateOrderStockRequest {
    repeated CheckSkuUnit check_data = 1;
}
message UpdateOrderStockResponse {
    repeated CheckSkuUnit check_data = 1;
}

// 库存单据, 出库单,入库单,盘点单, 调拨单
message CreateStockSheetRequest {
    StockSheet stock_sheet = 1;
}
message CreateStockSheetResponse {
    StockSheet stock_sheet = 1;
}

message UpdateStockSheetRequest {
    uint64     stock_sheet_id = 1;
    StockSheet stock_sheet    = 2;
}

message UpdateStockSheetResponse {
    StockSheet stock_sheet = 1;
}
message DeleteStockSheetRequest {
    uint64 stock_sheet_id = 1;
}
message DeleteStockSheetResponse {

    StockSheet stock_sheet = 1;
}
message GetStockSheetRequest {
    uint64 stock_sheet_id = 1;
    uint32 request_detail = 2; // enum RequestDetail
}
message GetStockSheetResponse {
    StockSheet                   stock_sheet = 1;
    map<uint64, merchandise.Sku> skus        = 3; // key:sku_id
    map<uint64, Shelf>           shelves     = 4; // key:shelf_id
}
message ListStockSheetRequest {
    Pagination pagination         = 1;
    uint64     time_type          = 2; // enum TimeType
    uint64     begin_time         = 3;
    uint64     end_time           = 4;
    uint64     stock_sheet_type   = 5;
    uint64     target_id          = 6; // 对象id 供应商或商户id
    string     search_text        = 7; // 模糊搜索条件 对象名称,或单据号
    bool       has_been_print     = 8; //  是否已打印
    uint64     stock_sheet_status = 9; //  单据状态 enum StockSheet.StockSheetStatus
}
message ListStockSheetResponse {
    Pagination          pagination   = 1;
    repeated StockSheet stock_sheets = 2;
}

// sku//库存汇总
message CreateSkuStockRequest {

    SkuStock sku_stock = 1;
}
message CreateSkuStockResponse {

    SkuStock sku_stock = 1;
}
message UpdateSkuStockRequest {
    uint64   sku_stock_id = 1;
    SkuStock sku_stock    = 2;
}
message UpdateSkuStockResponse {

    SkuStock sku_stock = 1;
}
message DeleteSkuStockRequest {

    uint64 sku_stock_id = 1;
}
message DeleteSkuStockResponse {
    SkuStock sku_stock = 1;
}
message ListSkuStockRequest {
    Pagination      pagination  = 1;
    repeated uint64 Sku_id      = 2;
    uint64          search_text = 7; // 模糊查询
}
message ListSkuStockResponse {
    Pagination        pagination = 1;
    repeated SkuStock sku_stocks = 2;
}

message GetSkuStockRequest {
    uint64 sku_stock_id = 1;
    uint64 sku_id       = 2;
}
message GetSkuStockResponse {
    SkuStock sku_stock = 1;
}

// ssu库存汇总

message CreateSkuUnitStockRequest {

    SkuUnitStock ssu_stock = 1;
}
message CreateSkuUnitStockResponse {

    SkuUnitStock ssu_stock = 1;
}

message UpdateSkuUnitStockRequest {
    uint64       ssu_stock_id = 1;
    SkuUnitStock ssu_stock    = 2;
}
message UpdateSkuUnitStockResponse {
    SkuUnitStock ssu_stock = 1;
}

message DeleteSkuUnitStockRequest {

    uint64 ssu_stock_id = 1;
}
message DeleteSkuUnitStockResponse {

    SkuUnitStock ssu_stock = 1;
}

message ListSkuUnitStockRequest {
    Pagination      pagination  = 1;
    repeated uint64 Ssu_id      = 2;
    uint64          search_text = 7; // 模糊查询
}
message ListSkuUnitStockResponse {
    Pagination            pagination = 1;
    repeated SkuUnitStock ssu_stocks = 2;
}

message GetSkuUnitStockRequest {
    uint64 ssu_stock_id = 1;
    uint64 ssu_id       = 2;
}
message GetSkuUnitStockResponse {
    SkuUnitStock ssu_stock = 1;
}

// 下单库存配置
message CreateSaleStockConfigRequest {
    SaleStockConfig sale_stock_config_id = 1;
}
message CreateSaleStockConfigResponse {
    SaleStockConfig sale_stock_config_id = 1;
}

message UpdateSaleStockConfigRequest {
    uint64          sale_stock_config_id = 1;
    SaleStockConfig sale_stock_config    = 2;
}
message UpdateSaleStockConfigResponse {
    SaleStockConfig sale_stock_config = 1;
}

message DeleteSaleStockConfigRequest {
    uint64 sale_stock_config_id = 1;
}
message DeleteSaleStockConfigResponse {
    SaleStockConfig sale_stock_config = 1;
}

message ListSaleStockConfigRequest {
    Pagination      pagination = 1;
    repeated uint64 Ssu_id     = 2;
}
message ListSaleStockConfigResponse {
    Pagination               pagination        = 1;
    repeated SaleStockConfig sale_stock_config = 2;
}

message GetSaleStockConfigRequest {
    uint64 sale_stock_config_id_id = 1;
    uint64 ssu_id                  = 2;
}
message GetSaleStockConfigResponse {
    SaleStockConfig sale_stock_config = 1;
}

// 冻结库存
message UpdateFrozenStockRequest {
    uint64 ssu_id       = 1;
    uint64 order_id     = 2;
    Stock  frozen_stock = 3;
}

// 冻结库存
message UpdateFrozenStockResponse {
    uint64 ssu_id       = 1;
    uint64 order_id     = 2;
    Stock  frozen_stock = 3;
}

// 批次
message CreateBatchRequest {
    Batch batch = 1;
}
message CreateBatchResponse {
    Batch batch = 1;
}

message UpdateBatchRequest {
    uint64 batch_id = 1;
    Batch  batch    = 2;
}
message UpdateBatchResponse {
    Batch batch = 1;
}
message DeleteBatchRequest {
    uint64 batch_id = 1;
}
message DeleteBatchResponse {
    Batch batch = 1;
}
message ListBatchRequest {
    Pagination      pagination   = 1;
    repeated uint64 batches_ids  = 2;
    uint64          supplier_id  = 4;  // 供应商id
    uint64          search_text  = 7;  // 模糊查询
    uint64          begin_time   = 8;  // 创建时间 开始
    uint64          end_time     = 9;  // 创建时间 结束
    bool            order_desc   = 10; // true 倒序 false 正序
    uint64          sku_id       = 11; //
    uint64          base_unit_id = 12; //
    uint64          sku_unit_id  = 13; //
}
message ListBatchResponse {
    Pagination     pagination = 1;
    repeated Batch batches    = 2;

    // map<uint64, merchandise.proto.Sku> skus = 3; // key:sku_id
}

message GetBatchRequest {
    uint64 batch_id = 1;
}
message GetBatchResponse {
    Batch batch = 1;
}

// 库存记录
message CreateStockLogRequest {
    StockLog stock_log = 1;
}
message CreateStockLogResponse {
    StockLog stock_log = 1;
}
message UpdateStockLogRequest {
    uint64   stock_log_id = 1;
    StockLog stock_log    = 2;
}
message UpdateStockLogResponse {
    StockLog stock_log = 1;
}
message DeleteStockLogRequest {
    uint64 stock_log_id = 1;
}
message DeleteStockLogResponse {
    StockLog stock_log = 1;
}
message ListStockLogRequest {
    Pagination pagination = 1;
    // uint64 time_type = 2; // enum TimeType
    uint32 operate_type   = 2; // enum StockOperateType
    uint64 stock_sheet_id = 3; // 单据id
    uint64 target_id      = 4; // 单据对象id 供应商或商户id
    uint64 ssu_id         = 5; // ssu_id
    uint64 category_id_2  = 6; // 二级分类id
    string search_text    = 7; // 模糊搜索条件
    uint64 begin_time     = 8;
    uint64 end_time       = 9;
    bool   order_desc     = 10; // true 倒序 false 正序
}

message ListStockLogResponse {
    Pagination        pagination = 1;
    repeated StockLog stock_logs = 2;
}

message GetStockLogRequest {
    uint64 stock_log_id = 1;
}
message GetStockLogResponse {
    StockLog stock_log = 1;
}

// 批次流水
message CreateBatchLogRequest {
    BatchLog batch_log = 1;
}
message CreateBatchLogResponse {
    BatchLog batch_log = 1;
}
message UpdateBatchLogRequest {
    uint64   batch_log_id = 1;
    BatchLog batch_log    = 2;
}
message UpdateBatchLogResponse {
    BatchLog batch_log = 1;
}
message DeleteBatchLogRequest {
    uint64 batch_log_id = 1;
}
message DeleteBatchLogResponse {
    BatchLog batch_log = 1;
}
message ListBatchLogRequest {
    Pagination pagination            = 1;
    uint64     batch_id              = 2; // 批次id
    string     batch_customized_code = 3; // 批次号
    // repeated uint64 batch_ids = 4;      // 多个批次id
    // repeated string batch_customized_codes = 5; // 多个批次号

    string search_text = 7; // 模糊搜索条件
    uint64 begin_time  = 8;
    uint64 end_time    = 9;
    bool   order_desc  = 10; // true 倒序 false 正序
}

message ListBatchLogResponse {
    Pagination        pagination = 1;
    repeated BatchLog batch_logs = 2;
}

message GetBatchLogRequest {
    uint64 batch_log_id = 1;
}
message GetBatchLogResponse {
    BatchLog batch_log = 1;
}

// 货位
message CreateShelfRequest {
    Shelf shelf = 1;
}
message CreateShelfResponse {
    Shelf shelf = 1;
}
message UpdateShelfRequest {
    uint64 shelf_id = 1;
    Shelf  shelf    = 2;
}
message UpdateShelfResponse {
    uint64 shelf_id = 1;
    Shelf  shelf    = 2;
}
message DeleteShelfRequest {
    uint64 shelf_id = 1;
}
message DeleteShelfResponse {
    uint64 shelf_id = 1;
    Shelf  shelf    = 2;
}

// 货位列表 是否需要分页?
message ListShelfRequest {
    Pagination pagination = 1;
}
message ListShelfResponse {
    Pagination     pagination = 1;
    repeated Shelf shelves    = 2;
}

message GetShelfRequest {
    uint64 shelf_id = 1;
}
message GetShelfResponse {
    Shelf shelf = 1;
}

// 结款单
message CreateStatementRequest {
    Statement statement = 1;
}
message CreateStatementResponse {
    Statement statement = 1;
}

message UpdateStatementRequest {
    uint64    statement_id = 1;
    Statement statement    = 2;
}
message UpdateStatementResponse {
    uint64    statement_id = 1;
    Statement statement    = 2;
}

message DeleteStatementRequest {
    uint64 statement_id = 1;
}
message DeleteStatementResponse {
    uint64    statement_id = 1;
    Statement statement    = 2;
}

message ListStatementRequest {
    enum StatementTimeType {
        STATEMENT_TIME_TYPE_NIL    = 0;
        STATEMENT_TIME_TYPE_CREATE = 1;
        STATEMENT_TIME_TYPE_SUBMIT = 2;
    }
    Pagination pagination = 1;

    uint64 supplier_id    = 2; // 供应商id
    uint64 stateme_status = 3; // 结款单状态

    uint64 time_type   = 6; // enum StatementTimeType
    string search_text = 7; // 模糊搜索条件
    uint64 begin_time  = 8;
    uint64 end_time    = 9;
    bool   order_desc  = 10; // true 倒序 false 正序
}
message ListStatementResponse {
    Pagination         pagination = 1;
    repeated Statement statements = 2;
}

message GetStatementRequest {
    uint64 statement_id = 1;
}
message GetStatementResponse {
    Statement statement = 1;
}

message CreateAdjustSheetRequest {
    AdjustSheet adjust_sheet = 1;
}
message CreateAdjustSheetResponse {
    AdjustSheet adjust_sheet = 1;
}
message UpdateAdjustSheetRequest {
    uint64      adjust_sheet_id = 1;
    AdjustSheet adjust_sheet    = 2;
}

// 调整单
message UpdateAdjustSheetResponse {
    AdjustSheet adjust_sheet = 1;
}
message DeleteAdjustSheetRequest {
    uint64 adjust_sheet_id = 1;
}
message DeleteAdjustSheetResponse {
    AdjustSheet adjust_sheet = 1;
}
message ListAdjustSheetRequest {
    Pagination pagination          = 1;
    uint64     adjust_sheet_id     = 2;
    uint64     adjust_serial_no = 3;

    string search_text = 7; // 模糊搜索条件
    uint64 begin_time  = 8;
    uint64 end_time    = 9;
    bool   order_desc  = 10; // true 倒序 false 正序
}

message ListAdjustSheetResponse {
    Pagination           pagination   = 1;
    repeated AdjustSheet adjust_sheet = 2;
}

message GetAdjustSheetRequest {
    uint64 batch_log_id = 1;
}
message GetAdjustSheetResponse {
    AdjustSheet adjust_sheet = 1;
}

message CreateAdjustLogRequest {
    AdjustLog adjust_log = 1;
}
message CreateAdjustLogResponse {
    AdjustLog adjust_log = 1;
}
message UpdateAdjustLogRequest {
    uint64    adjust_log_id = 1;
    AdjustLog adjust_log    = 2;
}
message UpdateAdjustLogResponse {
    AdjustLog adjust_log = 1;
}
message DeleteAdjustLogRequest {
    uint64 adjust_log_id = 1;
}
message DeleteAdjustLogResponse {
    AdjustLog adjust_log = 1;
}
message ListAdjustLogRequest {
    Pagination pagination        = 1;
    uint64     adjust_log_id     = 2;
    uint64     adjust_log_number = 3;

    string search_text = 7; // 模糊搜索条件
    uint64 begin_time  = 8;
    uint64 end_time    = 9;
    bool   order_desc  = 10; // true 倒序 false 正序
}

message ListAdjustLogResponse {
    Pagination         pagination = 1;
    repeated AdjustLog adjust_log = 2;
}

message GetAdjustLogRequest {
    uint64 adjust_log_id = 1;
}
message GetAdjustLogResponse {
    AdjustLog adjust_log = 1;
}

// // 商户周转物库存统计
message CreateCustomerTurnoverRequest {
    CustomerTurnover customer_turnover = 1;
}
message CreateCustomerTurnoverResponse {
    CustomerTurnover customer_turnover = 1;
}
message UpdateCustomerTurnoverRequest {
    uint64           customer_turnover_id = 1;
    CustomerTurnover customer_turnover    = 2;
}
message UpdateCustomerTurnoverResponse {
    CustomerTurnover customer_turnover = 1;
}
message DeleteCustomerTurnoverRequest {
    uint64 customer_turnover_id = 1;
}
message DeleteCustomerTurnoverResponse {
    CustomerTurnover customer_turnover = 1;
}
message ListCustomerTurnoverRequest {
    Pagination pagination = 1;

    repeated uint64 customer_turnover_ids = 2; //
    repeated uint64 customer_ids          = 3; // 根据商户id的列表来获取关联周转物信息
    repeated uint64 turnover_ids          = 4; // 根据周转物的列表来获取关联周转物信息

    bool order_desc = 10; // true 倒序 false 正序
}

message ListCustomerTurnoverResponse {
    Pagination                pagination        = 1;
    repeated CustomerTurnover customer_turnover = 2;
}

message GetCustomerTurnoverRequest {
    uint64 customer_turnover_id = 1;
}
message GetCustomerTurnoverResponse {
    CustomerTurnover customer_turnover = 1;
}
