syntax = "proto3";

// 修改库存单位结构
// 单据加上字段
// 冻结和在途

package ceres.inventory;
option java_multiple_files = true;
option go_package          = "code.guanmai.cn/back_end/ceres/inventory/proto;proto";
import "./asynctask/proto/asynctask.proto";

// import "./enterprise.proto";
import "./common/proto/common.proto";
// import "./account/proto/account.proto";
import "./merchandise/proto/merchandise.proto";
import "./enterprise/proto/enterprise.proto";
import "./preference/proto/preference.proto";
import "./common/proto/options.proto";
import "./google/api/annotations.proto";
// import "./production/proto/production.proto";

import "./include/protoc-gen-validate/validate.proto";
import "./cmd/protoc-gen-dao/proto/dao.proto";

// 占位用, 分页规范
//message Pagination {}

message SkuUnit {
    uint64 sku_id  = 1 [(validate.rules).uint64.gt = 0];
    uint64 unit_id = 2 [(validate.rules).uint64.gt = 0];
}

// message UnitValue {
//     uint64 unit_id = 1 [ (validate.rules).uint64.gt = 0 ]; // 公斤的id
//     string quantity = 2 [ (validate.rules).string.pattern = "^(-?\\d+)(\\.\\d+)?$" ]; // 多少公斤
//     string price = 3 [ (validate.rules).string.pattern = "^(-?\\d+)(\\.\\d+)?$" ];  // 多少钱
// }
// message UnitValueSet {
//     UnitValue input = 1; // 用户输入，前端填写 // 基准单位 公斤
//     UnitValue input2 = 2;// 用户输入2，目前只有订单中的出库数据和库存单据才会用到 // 袋
//     UnitValue calculate = 3; // 计价逻辑，后台维护 // 斤
// }

// message OrderSsuValue {
//     UnitValueSet order = 1; // 下单数据
//     UnitValueSet outstock = 2; // 出库数据
// }

// 实际计算用和存储的库存
// message Stock {
//     // 如, 某商品的基本单位是斤 而入库规格是 3公斤/袋, 则
//     merchandise.UnitValue base_unit = 1;  // 基本单位,如例中的 斤 应该能和 sku_anchor 强关联换算,由 sku_anchor 换算而来,是会变动的库存,价格有效
//     merchandise.UnitValue sku_unit = 2;  // sku自定义单位 如例中的 袋 // 客户填写, 价格暂时无效,
// }

// 客户填写的库存
// message InputStock{
//     // 如, 某商品的基本单位是斤 而入库规格是 3公斤/袋, 则
//     merchandise.UnitValue sku_anchor = 1;  // 公斤, 客户填写的可强转换的规格,价格和数量都有效
//     merchandise.UnitValue sku_unit = 2;  // sku自定义单位 如例中的 袋 // 客户填写, 价格暂时无效,
// }

service InventoryService {
    // 单据
    rpc CreateStockSheet(CreateStockSheetRequest) returns (CreateStockSheetResponse) {
        option (google.api.http) = {
            post : "/ceres/inventory/InventoryService/CreateStockSheet"
        };
        option (common.options.annotation) = {
            codes : "SHEET_STATUS_INVALID,CROSS_UPDATE,LACK_OF_STOCK,FAIL_GET_ID,MERCHANDISE_NOT_FOUND,REVERT_TURNOVER_RESULT_LESS_THTAN_ZERO,REDISLOCK_BUSY,COST_ALLOCATION_MONEY_ZERO,CANCEL_USED_BATCH,STOCK_SHEET_TOTAL_PRICE_NEGATIVE,STOCK_DATA_ERROR,PARENT_SHELF_STOCK_OPERATE,UPDATE_FUTURE_BATCH,CHECK_STOCK_DISTINCT_SIGN,VIRTUAL_BATCH_HAD_BEEN_REPLACED"
        };
    }
    rpc UpdateStockSheet(UpdateStockSheetRequest) returns (UpdateStockSheetResponse) {
        option (google.api.http) = {
            post : "/ceres/inventory/InventoryService/UpdateStockSheet"
        };
        option (common.options.annotation) = {
            codes : "SHEET_STATUS_INVALID,CROSS_UPDATE,LACK_OF_STOCK,FAIL_GET_ID,MERCHANDISE_NOT_FOUND,REVERT_TURNOVER_RESULT_LESS_THTAN_ZERO,REDISLOCK_BUSY,COST_ALLOCATION_MONEY_ZERO,STOCK_DATA_ERROR,STOCK_SHEET_TOTAL_PRICE_NEGATIVE,CANCEL_USED_BATCH,PARENT_SHELF_STOCK_OPERATE,UPDATE_FUTURE_BATCH,CHECK_STOCK_DISTINCT_SIGN,VIRTUAL_BATCH_HAD_BEEN_REPLACED"
        };
    }
    rpc CreateReplaceStockSheet(CreateReplaceStockSheetRequest) returns (CreateReplaceStockSheetResponse) {
        option (google.api.http) = {
            post : "/ceres/inventory/InventoryService/CreateReplaceStockSheet"
        };
    }
    rpc DeleteStockSheet(DeleteStockSheetRequest) returns (DeleteStockSheetResponse) {
        option (google.api.http) = {
            post : "/ceres/inventory/InventoryService/DeleteStockSheet"
        };
    }
    rpc GetStockSheet(GetStockSheetRequest) returns (GetStockSheetResponse) {
        option (google.api.http) = {
            post : "/ceres/inventory/InventoryService/GetStockSheet"
        };
    }
    rpc ListStockSheet(ListStockSheetRequest) returns (ListStockSheetResponse) {
        option (google.api.http) = {
            post : "/ceres/inventory/InventoryService/ListStockSheet"
        };
    }
    rpc BatchUpdateStockSheetPayStatus(BatchUpdateStockSheetPayStatusRequest) returns (BatchUpdateStockSheetPayStatusResponse) {
        option (google.api.http) = {
            post : "/ceres/inventory/InventoryService/BatchUpdateStockSheetPayStatus"
        };
    }
    rpc CleanStockSheet(CleanStockSheetRequest) returns (CleanStockSheetResponse) {}
    rpc BatchSyncTurnoverLoans(BatchSyncTurnoverLoansRequest) returns (BatchSyncTurnoverLoansResponse) {
        option (google.api.http) = {
            post : "/ceres/inventory/InventoryService/BatchSyncTurnoverLoans"
        };
    }

    rpc GetManyStockSheet(GetManyStockSheetRequest) returns (GetManyStockSheetResponse) {
        option (google.api.http) = {
            post : "/ceres/inventory/InventoryService/GetManyStockSheet"
        };
    }

    rpc BatchUpdateStockSheet(BatchUpdateStockSheetRequest) returns (BatchUpdateStockSheetResponse) {
        option (google.api.http) = {
            post : "/ceres/inventory/InventoryService/BatchUpdateStockSheet"
        };
    }
    rpc SyncStockSheet(SyncStockSheetRequest) returns (SyncStockSheetResponse) {
        option (google.api.http) = {
            post : "/ceres/inventory/InventoryService/SyncStockSheet"
        };
    }
    rpc CreateZeroCheckSheet(CreateZeroCheckSheetRequest) returns (CreateZeroCheckSheetResponse) {
        option (google.api.http) = {
            post : "/ceres/inventory/InventoryService/CreateZeroCheckSheet"
        };
    }

    // 批次库存
    rpc CreateBatch(CreateBatchRequest) returns (CreateBatchResponse) {
        option (google.api.http) = {
            post : "/ceres/inventory/InventoryService/CreateBatch"
        };
    }
    rpc UpdateBatch(UpdateBatchRequest) returns (UpdateBatchResponse) {
        option (google.api.http) = {
            post : "/ceres/inventory/InventoryService/UpdateBatch"
        };
    }
    rpc DeleteBatch(DeleteBatchRequest) returns (DeleteBatchResponse) {
        option (google.api.http) = {
            post : "/ceres/inventory/InventoryService/DeleteBatch"
        };
    }
    rpc GetBatch(GetBatchRequest) returns (GetBatchResponse) {
        option (google.api.http) = {
            post : "/ceres/inventory/InventoryService/GetBatch"
        };
    }
    rpc ListBatch(ListBatchRequest) returns (ListBatchResponse) {
        option (google.api.http) = {
            post : "/ceres/inventory/InventoryService/ListBatch"
        };
    }
    rpc CleanBatch(CleanBatchRequest) returns (CleanBatchResponse) {}

    // 货位
    rpc CreateShelf(CreateShelfRequest) returns (CreateShelfResponse) {
        option (google.api.http) = {
            post : "/ceres/inventory/InventoryService/CreateShelf"
        };
        option (common.options.annotation) = {
            codes : "DUPLICATE_SHELF_NAME"
        };
    }
    rpc UpdateShelf(UpdateShelfRequest) returns (UpdateShelfResponse) {
        option (google.api.http) = {
            post : "/ceres/inventory/InventoryService/UpdateShelf"
        };
        option (common.options.annotation) = {
            codes : "DUPLICATE_SHELF_NAME"
        };
    }
    rpc DeleteShelf(DeleteShelfRequest) returns (DeleteShelfResponse) {
        option (google.api.http) = {
            post : "/ceres/inventory/InventoryService/DeleteShelf"
        };
    }
    rpc GetShelf(GetShelfRequest) returns (GetShelfResponse) {
        option (google.api.http) = {
            post : "/ceres/inventory/InventoryService/GetShelf"
        };
    }
    rpc ListShelf(ListShelfRequest) returns (ListShelfResponse) {
        option (google.api.http) = {
            post : "/ceres/inventory/InventoryService/ListShelf"
        };
    }
    rpc CleanShelf(CleanShelfRequest) returns (CleanShelfResponse) {}

    // 批次流水/变动记录
    rpc CreateBatchLog(CreateBatchLogRequest) returns (CreateBatchLogResponse) {
        option (google.api.http) = {
            post : "/ceres/inventory/InventoryService/CreateBatchLog"
        };
    }
    rpc UpdateBatchLog(UpdateBatchLogRequest) returns (UpdateBatchLogResponse) {
        option (google.api.http) = {
            post : "/ceres/inventory/InventoryService/UpdateBatchLog"
        };
    }
    rpc DeleteBatchLog(DeleteBatchLogRequest) returns (DeleteBatchLogResponse) {
        option (google.api.http) = {
            post : "/ceres/inventory/InventoryService/DeleteBatchLog"
        };
    }
    rpc GetBatchLog(GetBatchLogRequest) returns (GetBatchLogResponse) {
        option (google.api.http) = {
            post : "/ceres/inventory/InventoryService/GetBatchLog"
        };
    }
    rpc ListBatchLog(ListBatchLogRequest) returns (ListBatchLogResponse) {
        option (google.api.http) = {
            post : "/ceres/inventory/InventoryService/ListBatchLog"
        };
    }
    rpc CleanBatchLog(CleanBatchLogRequest) returns (CleanBatchLogResponse) {}

    // 库存记录
    rpc CreateStockLog(CreateStockLogRequest) returns (CreateStockLogResponse) {
        option (google.api.http) = {
            post : "/ceres/inventory/InventoryService/CreateStockLog"
        };
    }

    rpc UpdateStockLog(UpdateStockLogRequest) returns (UpdateStockLogResponse) {
        option (google.api.http) = {
            post : "/ceres/inventory/InventoryService/UpdateStockLog"
        };
    }
    rpc DeleteStockLog(DeleteStockLogRequest) returns (DeleteStockLogResponse) {
        option (google.api.http) = {
            post : "/ceres/inventory/InventoryService/DeleteStockLog"
        };
    }
    rpc CleanStockLog(CleanStockLogRequest) returns (CleanStockLogResponse) {}

    rpc GetStockLog(GetStockLogRequest) returns (GetStockLogResponse) {
        option (google.api.http) = {
            post : "/ceres/inventory/InventoryService/GetStockLog"
        };
    }
    rpc ListStockLog(ListStockLogRequest) returns (ListStockLogResponse) {
        option (google.api.http) = {
            post : "/ceres/inventory/InventoryService/ListStockLog"
        };
    }
    rpc ExportStockLog(ExportStockLogRequest) returns (ExportStockLogResponse) {
        option (google.api.http) = {
            post : "/ceres/inventory/InventoryService/ExportStockLog"
        };
    }

    rpc ExportStockSheet(ExportStockSheetRequest) returns (ExportStockSheetResponse) {
        option (google.api.http) = {
            post : "/ceres/inventory/InventoryService/ExportStockSheet"
        };
    }

    // 库存汇总查询
    // sku库存汇总
    rpc CreateSkuStock(CreateSkuStockRequest) returns (CreateSkuStockResponse) {
        option (google.api.http) = {
            post : "/ceres/inventory/InventoryService/CreateSkuStock"
        };
    }
    rpc UpdateSkuStock(UpdateSkuStockRequest) returns (UpdateSkuStockResponse) {
        option (google.api.http) = {
            post : "/ceres/inventory/InventoryService/UpdateSkuStock"
        };
    }
    rpc DeleteSkuStock(DeleteSkuStockRequest) returns (DeleteSkuStockResponse) {
        option (google.api.http) = {
            post : "/ceres/inventory/InventoryService/DeleteSkuStock"
        };
    }
    rpc ListSkuStock(ListSkuStockRequest) returns (ListSkuStockResponse) {
        option (google.api.http) = {
            post : "/ceres/inventory/InventoryService/ListSkuStock"
        };
    }

    rpc ListVirtualStock(ListVirtualStockRequest) returns (ListVirtualStockResponse) {
        option (google.api.http) = {
            post : "/ceres/inventory/InventoryService/ListVirtualStock"
        };
    }

    rpc GetSkuStock(GetSkuStockRequest) returns (GetSkuStockResponse) {
        option (google.api.http) = {
            post : "/ceres/inventory/InventoryService/GetSkuStock"
        };
    }
    rpc ExportSkuStock(ExportSkuStockRequest) returns (ExportSkuStockResponse) {
        option (google.api.http) = {
            post : "/ceres/inventory/InventoryService/ExportSkuStock"
        };
    }
    rpc GetManySkuStock(GetManySkuStockRequest) returns (GetManySkuStockResponse) {
        option (google.api.http) = {
            post : "/ceres/inventory/InventoryService/GetManySkuStock"
        };
    }
    rpc CleanSkuStock(CleanSkuStockRequest) returns (CleanSkuStockResponse) {}

    // sku某具体单位库存汇总
    rpc CreateSkuUnitStock(CreateSkuUnitStockRequest) returns (CreateSkuUnitStockResponse) {
        option (google.api.http) = {
            post : "/ceres/inventory/InventoryService/CreateSkuUnitStock"
        };
    }
    rpc UpdateSkuUnitStock(UpdateSkuUnitStockRequest) returns (UpdateSkuUnitStockResponse) {
        option (google.api.http) = {
            post : "/ceres/inventory/InventoryService/UpdateSkuUnitStock"
        };
    }
    rpc DeleteSkuUnitStock(DeleteSkuUnitStockRequest) returns (DeleteSkuUnitStockResponse) {
        option (google.api.http) = {
            post : "/ceres/inventory/InventoryService/DeleteSkuUnitStock"
        };
    }
    rpc ListSkuUnitStock(ListSkuUnitStockRequest) returns (ListSkuUnitStockResponse) {
        option (google.api.http) = {
            post : "/ceres/inventory/InventoryService/ListSkuUnitStock"
        };
    }
    rpc GetSkuUnitStock(GetSkuUnitStockRequest) returns (GetSkuUnitStockResponse) {
        option (google.api.http) = {
            post : "/ceres/inventory/InventoryService/GetSkuUnitStock"
        };
    }
    rpc CleanSkuUnitStock(CleanSkuUnitStockRequest) returns (CleanSkuUnitStockResponse) {}

    // 冻结库存的创建及其释放
    rpc UpdatePendingStock(UpdatePendingStockRequest) returns (UpdatePendingStockResponse) {
        option (google.api.http) = {
            post : "/ceres/inventory/InventoryService/UpdatePendingStock"
        };
    }
    // 查询冻结库存和在途库存
    rpc ListPendingStock(ListPendingStockRequest) returns (ListPendingStockResponse) {
        option (google.api.http) = {
            post : "/ceres/inventory/InventoryService/ListPendingStock"
        };
    }

    // 商户周转物记录
    rpc CreateCustomerTurnover(CreateCustomerTurnoverRequest) returns (CreateCustomerTurnoverResponse) {
        option (google.api.http) = {
            post : "/ceres/inventory/InventoryService/CreateCustomerTurnover"
        };
    }
    rpc UpdateCustomerTurnover(UpdateCustomerTurnoverRequest) returns (UpdateCustomerTurnoverResponse) {
        option (google.api.http) = {
            post : "/ceres/inventory/InventoryService/UpdateCustomerTurnover"
        };
    }
    rpc DeleteCustomerTurnover(DeleteCustomerTurnoverRequest) returns (DeleteCustomerTurnoverResponse) {
        option (google.api.http) = {
            post : "/ceres/inventory/InventoryService/DeleteCustomerTurnover"
        };
    }
    rpc GetCustomerTurnover(GetCustomerTurnoverRequest) returns (GetCustomerTurnoverResponse) {
        option (google.api.http) = {
            post : "/ceres/inventory/InventoryService/GetCustomerTurnover"
        };
    }
    rpc ListCustomerTurnover(ListCustomerTurnoverRequest) returns (ListCustomerTurnoverResponse) {
        option (google.api.http) = {
            post : "/ceres/inventory/InventoryService/ListCustomerTurnover"
        };
    }
    rpc ExportCustomerTurnover(ExportCustomerTurnoverRequest) returns (ExportCustomerTurnoverResponse) {
        option (google.api.http) = {
            post : "/ceres/inventory/InventoryService/ExportCustomerTurnover"
        };
    }
    rpc CleanCustomerTurnover(CleanCustomerTurnoverRequest) returns (CleanCustomerTurnoverResponse) {}

    rpc UpdateOrderStock(UpdateOrderStockRequest) returns (UpdateOrderStockResponse) {
        option (google.api.http) = {
            post : "/ceres/inventory/InventoryService/UpdateOrderStock"
        };
    }

    rpc UpdateSkuUnitStockConfig(UpdateSkuUnitStockConfigRequest) returns (UpdateSkuUnitStockConfigResponse) {
        option (google.api.http) = {
            post : "/ceres/inventory/InventoryService/UpdateSkuUnitStockConfig"
        };
    }

    rpc CreateAdjustSheet(CreateAdjustSheetRequest) returns (CreateAdjustSheetResponse) {
        option (google.api.http) = {
            post : "/ceres/inventory/InventoryService/CreateAdjustSheet"
        };
    }
    rpc UpdateAdjustSheet(UpdateAdjustSheetRequest) returns (UpdateAdjustSheetResponse) {
        option (google.api.http) = {
            post : "/ceres/inventory/InventoryService/UpdateAdjustSheet"
        };
    }
    rpc ListAdjustSheet(ListAdjustSheetRequest) returns (ListAdjustSheetResponse) {
        option (google.api.http) = {
            post : "/ceres/inventory/InventoryService/ListAdjustSheet"
        };
    }
    rpc DeleteAdjustSheet(DeleteAdjustSheetRequest) returns (DeleteAdjustSheetResponse) {
        option (google.api.http) = {
            post : "/ceres/inventory/InventoryService/DeleteAdjustSheet"
        };
    }
    rpc GetAdjustSheet(GetAdjustSheetRequest) returns (GetAdjustSheetResponse) {
        option (google.api.http) = {
            post : "/ceres/inventory/InventoryService/GetAdjustSheet"
        };
    }
    rpc CleanAdjustSheet(CleanAdjustSheetRequest) returns (CleanAdjustSheetResponse) {};

    rpc AsyncCommitAdjustSheet(AsyncCommitAdjustSheetRequest) returns (AsyncCommitAdjustSheetResponse) {
        option (google.api.http) = {
            post : "/ceres/inventory/InventoryService/AsyncCommitAdjustSheet"
        };
    }
    rpc CheckOutStock(CheckOutStockRequest) returns (CheckOutStockResponse) {
        option (google.api.http) = {
            post : "/ceres/inventory/InventoryService/CheckOutStock"
        };
    }
    rpc CreateReplaceBatch(CreateReplaceBatchRequest) returns (CreateReplaceBatchResponse) {
        option (google.api.http) = {
            post : "/ceres/inventory/InventoryService/CreateReplaceBatch"
        };
    }
    rpc ListProductionTaskCost(ListProductionTaskCostRequest) returns (ListProductionTaskCostResponse) {
        option (google.api.http) = {
            post : "/ceres/inventory/InventoryService/ListProductionTaskCost"
        };
    }
}

enum ChangeType {
    CHANGE_UNSPECIFIED = 0;
    CHANGE_TYPE_ADD    = 1;
    CHANGE_TYPE_SUB    = 2;
    CHANGE_TYPE_SET    = 3;
}

// 主要的进销存操作类型
enum OperateType {
    OPERATE_TYPE_UNSPECIFIED = 0;  // 无效类型
    //入库 100 ~ 500 *出库的反审,也认为是入库
    OPERATE_TYPE_PURCHASE_IN = 100;  // 采购入库
    OPERATE_TYPE_PRODUCT_IN  = 101;  // 生产入库
    OPERATE_TYPE_MATERIAL_IN = 102;  // 退料入库
    OPERATE_TYPE_REFUND_IN   = 103;  // 销售退货入库
    OPERATE_TYPE_TRANSFER_IN = 104;  // 调拨入库
    OPERATE_TYPE_OTHER_IN    = 105;  // 其他入库

    OPERATE_TYPE_SALE_OUT_ROLL_BACK     = 106;  // 销售出库反审核
    OPERATE_TYPE_REFUND_OUT_ROLL_BACK   = 111;  // 采购退货反审核
    OPERATE_TYPE_OTHER_OUT_ROLL_BACK    = 109;  // 其他出库反审核
    OPERATE_TYPE_MATERIAL_OUT_ROLL_BACK = 112;  // 领料出库反审核

    OPERATE_TYPE_TURNOVER_LOAN   = 113;  // 周转物借出(客户端表现成记录)
    OPERATE_TYPE_TURNOVER_REVERT = 114;  // 周转物归还(客户端表现成记录)

    //出库 500 ~ 1000 *入库的反审,也认为是出库
    OPERATE_TYPE_SALE_OUT     = 501;  // 销售出库
    OPERATE_TYPE_MATERIAL_OUT = 502;  // 领料出库
    OPERATE_TYPE_REFUND_OUT   = 503;  // 采购退货出库
    OPERATE_TYPE_OTHER_OUT    = 504;  // 其他出库

    OPERATE_TYPE_PURCHASE_IN_ROLL_BACK = 505;  // 采购入库反审核
    OPERATE_TYPE_PRODUCT_IN_ROLL_BACK  = 507;  // 生产入库反审核
    OPERATE_TYPE_MATERIAL_IN_ROLL_BACK = 509;  // 退料入库反审核
    OPERATE_TYPE_OTHER_IN_ROLL_BACK    = 511;  // 其他入库反审核

    //盘点 1000~1500
    OPERATE_TYPE_LOSS     = 1000;  // 盘亏出库
    OPERATE_TYPE_INCREASE = 1001;  // 盘盈入库
    OPERATE_TYPE_CHECK    = 1003;  // 未确定盘点(确定是盘点操作时,并不确定是报损还是报溢)

    // 常规批次填充虚拟批次, 库存减操作,无反审
    OPERATE_TYPE_REPLACE_OUT          = 900;   // 常规批次减少库存填充虚拟批次
    OPERATE_TYPE_REPLACE_IN           = 901;   // 虚拟批次被填充数
    OPERATE_TYPE_VIRTUAL_IN           = 1100;  // 超值入库
    OPERATE_TYPE_VIRTUAL_IN_ROLL_BACK = 1101;  // 超支入库审核不通过

    OPERATE_TYPE_ALL = 1;  // 所有类型
    BASE_UPDATE      = 2;  // 保存草稿
}

// gRPC status code
message Status {
    enum Code {
        CODE_UNSPECIFIED                       = 0;
        STOCK_ERROR_STATUS_UNKNOWN             = 20770001;  //
        SHEET_STATUS_INVALID                   = 20770002;  // 单据状态不对,提示客户刷新
        CROSS_UPDATE                           = 20770003;  // 数据提交时,已有其他操作修改过数据,需要提示客户刷新
        AUTHENTICATION_ERROR                   = 20770004;  // 跨station/group 请求
        DUPLICATE_SHELF_NAME                   = 20770005;  // 同层级下有重复名称货位存在
        LACK_OF_STOCK                          = 20770006;  // 库存不足
        FAIL_GET_ID                            = 20770007;  // 获取新全局主键失败
        MERCHANDISE_NOT_FOUND                  = 20770008;  // 未找到指定的商品或单位
        REVERT_TURNOVER_RESULT_LESS_THTAN_ZERO = 20770009;  // 周转物归还数多余借出数
        REDISLOCK_BUSY                         = 20770010;  // 有其他正在执行的进销存操作
        REDISLOCK_ERROR                        = 20770011;  // 未正常加锁或解锁redis锁
        COST_ALLOCATION_MONEY_ZERO             = 20770012;  // 分摊对象的总金额是0,无法分摊
        CANCEL_USED_BATCH                      = 20770013;  // 试图反审已经被使用过的批次
        STOCK_DATA_ERROR                       = 20770014;  // 库存或均价变成负数, 联系售后和技术人员解决
        STOCK_SHEET_TOTAL_PRICE_NEGATIVE       = 20770015;  // 单据金额不能为0
        PARENT_SHELF_STOCK_OPERATE             = 20770016;  // 往不是节点货位的货位做库存操作
        SHELF_DELETED_OR_NOT_EXISTS            = 20770017;  // 货位不存在或已删除
        BATCH_DELETED_OR_NOT_EXISTS            = 20770018;  // 批次不存在或已被删除
        UPDATE_FUTURE_BATCH                    = 20770019;  // 单据的提交时间晚于待修改的批次的入库时间
        FUTURE_OPERATE_ERROR                   = 20770020;  // 不能往未来操作单据
        CHECK_STOCK_DISTINCT_SIGN              = 20770021;  // 盘点批次的 基本单位 和 包装单位 不能一增一减
        VIRTUAL_BATCH_HAD_BEEN_REPLACED        = 20770022;  // 入库单中试图替换的虚拟批次已经被其他入库单替换过了,当前单据已经无法提交了,建议删除重新生成替换用的入库单
        REPLECE_STOCK_SUBMIT_TIME_TOO_LATE     = 20770023;  // 入库单的入库时间比单据中待替换的批次还晚
        REVERT_NO_BATCH_MATCH                  = 20770024;  // 归还周转物时,无批次可以用于归还
        CANCEL_PAID_SHEET                      = 20770025;  // 无法修改 已加入结款单/已结款 的单据
    }

    message DuplicateShelfNameDetail {
        string name = 1;
    }
    message LackOfStockDetail {
        message Detail {
            uint64 sku_id               = 1;  // 如果是库存不足,则只有skuid
            uint64 unit_id              = 2;
            uint64 batch_id             = 3;  // 如果是批次库存不足,返回批次id和批次号
            string batch_serial_no      = 4;
            merchandise.UnitStock stock = 5;  // 当前库存数
        }
        repeated Detail details = 1;
    }

    message UpdateFutureBatchDetail {
        string batch_serial_no = 1;  // 批次号
        uint64 detail_index    = 2;  // 详情序号 (从0开始)
    }

    message CheckStockDistinctSignDetail {
        uint64 detail_index       = 1;
        uint64 update_batch_index = 2;
    }

    message CancelUsedBatchDetail {
        string batch_serial_no = 1;  // 批次号
        uint64 batch_id        = 2;  // 批次id
        uint64 sku_id          = 3;  // 商品id
    }

    message BatchDeleteOrNotExistsDetail {
        message Detail {
            uint64 batch_id        = 1;
            string batch_serial_no = 2;
            uint64 delete_time     = 3;
        }
        repeated Detail details = 3;
    }
}

message Price {
    string base_unit = 1 [(validate.rules).string.pattern = "^(-?\\d+)(\\.\\d+)?$"];  // 基本单位金额(调整后)
    string sku_unit  = 2 [(validate.rules).string.pattern = "^(-?\\d+)(\\.\\d+)?$"];  // 包装单位金额(调整后)
}

// message Stock {
//     merchandise.UnitStock quantity    = 1 [ (validate.rules).message.required = true ]; // 库存变动数
//     Price    unit_price  = 2 [ (validate.rules).message.required = true ]; // 库存变动单价
//     Price    total_price = 3 [ (validate.rules).message.required = true ]; // 库存变动总价
// }

message UnitStocks {
    map<uint64, merchandise.UnitStock> unit_stocks = 1;  // key : unitid , value:Stock
}

// 货位 每一条数据都是货位树的一个节点
message Shelf {
    option (dao.partition_count) = 10;

    // @inject_tag: gorm:"PRIMARY_KEY"
    uint64 shelf_id    = 1;  // 主键
    uint64 create_time = 2;
    uint64 update_time = 3;
    uint64 delete_time = 4;

    uint64 group_id   = 10;
    uint64 station_id = 11;
    uint64 parent_id  = 12;  // 所属上层货位的主键id, 无上层货位为0

    string name   = 20;  // 货位名
    string remark = 21;  // 备注
    bool is_leaf  = 22;  // 是否是最底货位,如果是,则可以用来存储批次,且无法创建子货位
}

// 批次库存  一个sku的一个具体单位的一个批次库存
message Batch {
    option (dao.partition_count) = 100;

    enum BatchType {
        BATCH_TYPE_UNSPECIFIED = 0;
        BATCH_TYPE_CONST       = 1;  // 常驻批次 根据入库单提交的批次
        BATCH_TYPE_TMP         = 2;  // 临时批次 出库单创建的临时批次
    }

    // 批量自动匹配时添加 驳回 和 审核通过时减少
    message MatchFrozen {
        merchandise.UnitStock stock                = 1;  // 总的冻结数量
        map<uint64, merchandise.UnitStock> details = 2;  // 冻结详情 key:sheet_id
    }

    // @inject_tag: gorm:"PRIMARY_KEY"
    uint64 batch_id      = 1;  // 批次库存主键id
    uint64 create_time   = 2;  // 批次创建时间(物理时间) 后端补充
    uint64 in_stock_time = 3;  // 入库时间(业务时间) // 后端加上subimt_time
    uint64 update_time   = 4;  //最后修改时间(物理时间) 后端补充
    uint64 delete_time   = 5;  //删除时间(物理时间)

    uint64 group_id          = 10;
    uint64 station_id        = 11;
    uint64 spu_id            = 12 [(validate.rules).uint64.gt = 0];  // 客户端必填
    uint64 sku_id            = 13 [(validate.rules).uint64.gt = 0];  // 客户端必填
    uint64 base_unit_id      = 14 [(validate.rules).uint64.gt = 0];  // 斤 客户端必填
    uint64 sku_unit_id       = 15 [(validate.rules).uint64.gt = 0];  // 包装单位 袋 客户端必填
    uint64 in_stock_sheet_id = 17;                                   //入库单id

    string batch_serial_no               = 20;                                             // 站点内唯一的批次号(客户用)
    merchandise.UnitStock stock          = 21;                                             // 计算的库存
    merchandise.UnitValueSet input_stock = 31 [(validate.rules).message.required = true];  // 客户填写的库存 不会变动 // 客户端必填 正常情况下跟StockSheet
    string base_unit_quantity            = 22;                                             // 基本单位库存,冗余出来查询用

    uint64 production_time = 24;  // 生产日期
    uint64 expiry_time     = 25;  // 保质期

    uint64 production_task_id = 26;  // 已完成工序的id // 加工
    uint64 supplier_id        = 27;  // 供应商id
    uint64 shelf_id           = 28;  // 所属货位
    BatchType type            = 29 [ (validate.rules).message = {required: true} ];  // 大部分时候都是1, 除了虚拟批次的情况

    string remark = 30;  // 备注

    merchandise.UnitStock origin_stock     = 33;  // 原始基本库存数,不会修改,仅记录
    StockSheet.SheetType source_sheet_type = 34;  // 来源单据类型
    string stock_sheet_serial_no           = 35;  // 来源单号
    string production_task_serial_no       = 36;  // 已完成生产计划编号
    bool is_remaining                      = 37;  // 是否还有余量
    MatchFrozen match_frozen               = 38;
    uint64 target_customer_id              = 42;
    //    uint64                bom_id                    = 39;
    //    uint64                bom_revision              = 40;
    //    string                bom_name                  = 41;
}

// 批次流水
message BatchLog {
    option (dao.partition_count) = 100;

    // @inject_tag: gorm:"PRIMARY_KEY"
    uint64 batch_log_id = 1;  // 主键
    uint64 create_time  = 2;
    uint64 update_time  = 3;
    uint64 delete_time  = 4;
    uint64 status       = 5;

    uint64 group_id       = 10;
    uint64 station_id     = 11;
    uint64 spu_id         = 12 [(validate.rules).uint64.gt = 0];
    uint64 sku_id         = 13 [(validate.rules).uint64.gt = 0];
    uint64 base_unit_id   = 14 [(validate.rules).uint64.gt = 0];
    uint64 sku_unit_id    = 15 [(validate.rules).uint64.gt = 0];
    uint64 batch_id       = 16 [(validate.rules).uint64.gt = 0];  // 批次id
    uint64 stock_log_id   = 17;                                   // 库存记录id
    uint64 stock_sheet_id = 18;                                   // 单据id

    OperateType operate_type                   = 20;  // 操作类型
    merchandise.UnitStock old_stock            = 21;  //  变动前单位单位库存
    StockSheet.UpdateBatch origin_update_stock = 22;  //  客户填写的变动,不受调整影响,保留以修复数据
    StockSheet.UpdateBatch update_stock        = 23;  // 变动库存,和 origin_update_stock 的区别是受调整影响
    merchandise.UnitStock new_stock            = 24;  // 变动后库存
    uint64 submit_time                         = 25;  //  业务操作时间(客户可选择的时间)
    StockSheet.SheetType stock_sheet_type      = 26;  // 单据类型
    string stock_sheet_serial_no               = 29;  // 单号 客户端展示这个
    string batch_serial_no                     = 30;  // 单号 客户端展示这个
    uint64 production_task_id                  = 33;  // 已完成生产计划编号
    Batch.BatchType batch_type                 = 34;  // 批次type
}

// sku某一个unit单独的库存汇总
enum PendingType {
    PENDING_TYPE_UNSPECIFIED  = 0;
    PENDING_TYPE_PRODUCT_IN   = 1;  // 生产入库 在途库存
    PENDING_TYPE_MATERIAL_OUT = 2;  // 领料出库 冻结库存
    PENDING_TYPE_MATERIAL_IN  = 3;  // 退料入库 在途库存
    PENDING_TYPE_PURCHASE_IN  = 4;  // 采购 在途库存
    PENDING_TYPE_ORDER        = 5;  // 订单 冻结库存
    PENDING_TYPE_VIRTUAL      = 6;  // 商品限制虚拟库存
}

message SkuUnitStock {
    option (dao.partition_count) = 50;

    enum Config {
        SALE_STOCK_UNSPECIFIED     = 0;
        SALE_STOCK_NO_CONFIG       = 1;  // 无
        SALE_STOCK_AVAILABLE_STOCK = 2;  // 可用库存
        SALE_STOCK_VIRTUAL_STOCK   = 3;  // 自定义数值
    }
    // 待操作库存,包括冻结库存和在途库存
    message PendingStock {
        message PendingStockDetail {
            PendingType pending_type       = 1;  // PendingType 冻结或在途的类型
            merchandise.UnitStock quantity = 2;  // 冻结库存和在途库存第一期仅有基本单位的情况
            uint64 sku_id                  = 3;
            uint64 base_unit_id            = 4;
            uint64 sku_unit_id             = 5;  // 包装单位id
            uint64 spu_id                  = 6;  //
            uint64 time                    = 7;  // 请求的业务的时间
            string serial_no               = 8;  // 单据号
            uint64 sheet_id                = 9;  // 单据id
        }
        map<uint64, PendingStockDetail> pending_stocks = 2;  // key : order_id/purchase_sheet_id/production_task_id , value:Stock
    }
    // @inject_tag: gorm:"PRIMARY_KEY"
    uint64 sku_unit_stock_id = 1;  //主键
    uint64 create_time       = 2;
    uint64 update_time       = 3;  //最后修改时间(物理时间)
    uint64 delete_time       = 4;

    uint64 group_id     = 10;
    uint64 station_id   = 11;
    uint64 spu_id       = 12;
    uint64 sku_id       = 13;
    uint64 base_unit_id = 14;
    uint64 sku_unit_id  = 15;
    uint64 time         = 16;

    merchandise.UnitStock stock = 21;  //  单位库存

    PendingStock frozen_stock_detail     = 22;  // 冻结库存详情
    PendingStock in_transit_stock_detail = 23;  // 在途库存详情
    string base_unit_quantity            = 25;  // 基本单位库存,冗余出来查询用

    // 冻结库存和销售限制库存都用基本单位,如果不直接是基本单位,也转换成基本单位
    // 客户经常会想到底哪些单 冻结库存, 所以还是要存下来
    merchandise.UnitStock frozen_stock     = 33;  // 冻结库存 是  frozen_details 的累加汇总
    merchandise.UnitStock in_transit_stock = 34;  // 在途库存 是 in_transit_details 的累加汇总
    merchandise.UnitStock virtual_stock    = 35;  // 虚拟库存 是商品的自定虚拟库存

    Config config = 36;  // 商品下单限制类型

    // @inject_tag: gorm:"-"
    merchandise.UnitStock available_stock = 37;  // 可用库存
    // merchandise.UnitStock producting_Stock = 38; // 生产中库存
    bool is_remaining = 38;  // 仅查询库存数大于0的批次
}

// Sku的总库存汇总
message SkuStock {
    enum Status {
        STATUS_UNSPECIFIED      = 0;
        STATUS_IS_REMAINING     = 256;  // 2^8 是否有库存
        STATUS_IS_VIRTUAL_STOCK = 512;  // 2^9 是否有超支库存
    }
    option (dao.partition_count) = 50;

    // @inject_tag: gorm:"PRIMARY_KEY"
    uint64 sku_stock_id = 1;  // 主键
    uint64 status       = 2;  // bitmap，一些bool状态
    uint64 update_time  = 3;  //最后修改时间(物理时间)
    uint64 delete_time  = 4;

    uint64 group_id     = 10;
    uint64 station_id   = 11;
    uint64 spu_id       = 12 [(validate.rules).uint64.gt = 0];
    uint64 sku_id       = 13 [(validate.rules).uint64.gt = 0];
    uint64 base_unit_id = 14 [(validate.rules).uint64.gt = 0];

    merchandise.UnitStock stock            = 20;                                                             // 基本单位库存 账面
    string base_unit_quantity              = 21 [(validate.rules).string.pattern = "^(-?\\d+)(\\.\\d+)?$"];  // 基本单位库存,冗余出来查询用
    merchandise.UnitStock frozen_stock     = 33;                                                             // 冻结库存 是  sku_unit_stock的frozen_stock累加
    merchandise.UnitStock in_transit_stock = 34;                                                             // 在途库存 是 sku_unit_stock的in_transit_stock累加
    // 更详细的各个规格的库存数
    // @inject_tag: gorm:"-"
    map<uint64, SkuUnitStock> unit_stocks = 35;  // key : unit_stock , value:Stock
    // @inject_tag: gorm:"-"
    merchandise.UnitStock available_stock = 36;  // 可用库存
    // @inject_tag: gorm:"-"
    repeated SkuUnitStock unit_stock_list = 37;  // key : unit_stock , value:Stock
    bool is_remaining                     = 38;  // 仅查询库存数大于0的批次

    merchandise.UnitStock virtual_stock = 39;  // 超支库存数
    // @inject_tag: gorm:"-"
    repeated Batch batches = 40;  // key : skuId
}

message CostAllocation {
    enum Type {
        TYPE_UNSPECIFIED = 0;
        TYPE_PRICE       = 1;  //根据商品金额分摊
        TYPE_QUANTITY    = 2;  //根据商品数量分摊
    }
    enum Reason {
        REASON_UNSPECIFIED = 0;
        REASON_TRANSPORT   = 1;  // 运输费用
        REASON_OTHER       = 2;  // 其他
    }
    enum MoneyType {
        MONEY_UNSPECIFIED = 0;
        MONEY_ADD         = 1;  //加钱
        MONEY_SUB         = 2;  //扣钱
    }

    Type type = 1;  // 折让类型
    //        merchandise.UnitStock quantity             = 2; // 分摊/折让数量
    Reason reason = 3;                                                             // 分摊/折让原因
    string money  = 4 [(validate.rules).string.pattern = "^(-?\\d+)(\\.\\d+)?$"];  // 折让/分摊金额

    MoneyType money_type       = 5;   // 折让/分摊金额
    repeated SkuUnit sku_units = 6;   // 分摊商品
    string remark              = 7;   // 备注
    bool effected              = 8;   // 是否已处理
    uint64 creator_id          = 9;   // 操作人 后端给 具体数据在additional
    uint64 create_time         = 10;  // 创建时间
}

message CostAllocations {
    repeated CostAllocation details = 1;
}

// 库存单据,入库单,出库单,盘点单,周转物借出/归还记录,
/*
客户端或者其他模块需要创建单据,需注意:
1.会入库和创建批次的单据,需要在Details.Details.CreateBatch中添加一条批次,用于入库, 具体
*/
message StockSheet {
    option (dao.partition_count) = 100;

    message UpdateBatch {
        //TODO 虚拟批次如何匹配
        uint64 batch_id                      = 1 [(validate.rules).uint64.gt = 0];            // 修改批次的id,前端填写,后端用该字段对应到唯一的批次
        merchandise.UnitStock stock          = 2;                                             // 后端填写
        bool update_price                    = 3;                                             // true:用stock.Price里的价格计算 false:用提交时的均价计算(价格不变)
        string batch_serial_no               = 4;                                             // 批次号 客户端查询批次后填写,后端不使用,仅做展示
        merchandise.UnitStock origin_stock   = 5;                                             // 记录客户输入的最原始的数据
        OperateType operate_type             = 6;                                             // 操作类型 客户端想要执行的操作传过来即可, 比如,是采购入库就传采购入库,是采购入库反审核就传采购入库反审核,不变动库存的操作无需修改
        merchandise.UnitValueSet input_stock = 7 [(validate.rules).message.required = true];  // 客户填写的库存 不会变动 // 前端给
        merchandise.UnitStock old_stock      = 8;                                             // 记录客户输入的最原始的数据
    }
    // 单据详情, 内嵌, 每一条对应一个sku单位的库存操作
    message Detail {
        enum DetailType {
            DETAIL_TYPE_UNSPECIFIED = 0;
            DETAIL_TYPE_SKU         = 1;
            DETAIL_TYPE_TURNOVER    = 2;
        }
        uint64 detail_id                    = 3;  // 单据中唯一, 后端加
        repeated Batch create_batches       = 4;  // 创建的批次
        repeated UpdateBatch update_batches = 5;  // 修改的批次
        uint64 production_task_id           = 6;  // 关联的加工计划id, 仅仅生产相关单据需要填写
        // int64                rank           = 7; // 手动排序用

        uint64 spu_id       = 10;
        uint64 sku_id       = 11 [(validate.rules).uint64.gt = 0];
        uint64 base_unit_id = 12;                                   // 基本单位id
        uint64 sku_unit_id  = 13 [(validate.rules).uint64.gt = 0];  // 自定义单位id
        string remark       = 14;

        // 基本单位 斤   2公斤/袋   [10]公斤 [5]袋
        // 特殊地, 单据详情中客户可以填写 单价 和 总价任意一个, 前端会自动算出另一个.
        // 如果客户填写的是单价,则前端直接传客户填写的单价到 input_stock.input.Price ,
        // 如果客户填写的是总价,则前端传  总价/数量  的结果 四舍五入保留八位小数的值到  input_stock.input.Price
        // 仍然以 2公斤/袋 为例
        // 如果客户填写   [3]公斤   [1.5]袋
        // A:填写单价算总价的情况,假设客户填写 单价3.33, 则 单价为 3.33 以客户填写为准
        // B:填写总价算单价的情况, 假设客户填写总价为10, 则页面上展示为3.33 , 实际传给后端的为3.33333333
        merchandise.UnitValueSet input_stock = 31 [(validate.rules).message.required = true];                  // 客户填写的库存变动数 [10]公斤 [5]袋 // 前端必填
        string amount                        = 32 [(validate.rules).string.pattern = "^(-?\\d+)(\\.\\d+)?$"];  // 详情总金额,前端填写,仅记录客户填写,不参与计算逻辑
        merchandise.UnitStock origin_stock   = 33;                                                             // 分摊/折让/调整前的详情 后端拼
        merchandise.UnitStock stock          = 34;                                                             // 变动库存 // 分摊后的详情 后端拼
        uint64 operator_id                   = 35;                                                             // 操作人
        merchandise.UnitStock old_stock      = 36;                                                             // 变动前的账面库存 仅盘点单有有效值

        merchandise.UnitValueSet original_input_stock = 37;  // 分摊前的输入数据
        string sku_unit_rate                          = 38;  // 把比例记下来,  调整的时候用
        uint64 replace_batch_id                       = 39;  // 替换批次id
        string production_task_serial_no              = 40;  // 已完成生产计划编号
        uint64 creator_id                             = 41;  // 创建人id
        DetailType detail_type                        = 42;  // 商品类型 用于区分 是普通商品详情还是周转物/包材详情
        uint64 related_detail_id                      = 43;  // 在关联单据中关联的详情id,如订单的详情id
        //        uint64                   bom_id                    = 44;
        //        uint64                   bom_revision              = 45;
        uint64 target_customer_id = 46;
        // @inject_tag: gorm:"-"
        string production_cost = 47;  // 生产成本

        bool is_by_product = 48;  // 是否是副产品
    }

    message Details {
        repeated Detail details = 1 [(validate.rules).repeated.min_items = 1];  // 商品详情
    }

    // 单据类型
    enum SheetType {
        SHEET_TYPE_UNSPECIFIED = 0;  // 无效类型
        // 入库
        SHEET_TYPE_PURCHASE_IN = 100;  // 采购入库
        SHEET_TYPE_PRODUCT_IN  = 110;  // 生产入库
        SHEET_TYPE_MATERIAL_IN = 120;  // 退料入库
        SHEET_TYPE_REFUND_IN   = 130;  // 销售退货入库
        SHEET_TYPE_TRANSFER_IN = 140;  // 调拨入库 第一期不做
        SHEET_TYPE_OTHER_IN    = 150;  // 其他入库
        // 出库
        SHEET_TYPE_SALE_OUT     = 300;  // 销售出库
        SHEET_TYPE_MATERIAL_OUT = 310;  // 领料出库
        SHEET_TYPE_REFUND_OUT   = 320;  // 采购退货出库
        SHEET_TYPE_OTHER_OUT    = 330;  // 其他出库
        // 盘点
        SHEET_TYPE_INVENTORY = 600;  // 盘点单
        // 调拨
        SHEET_TYPE_TRANSFER = 400;  // 调拨单(移库单) 第一期不做
        // 周转物类型
        SHEET_TYPE_TURNOVER_LOAN   = 700;  // 借出单(客户端表现成记录)
        SHEET_TYPE_TURNOVER_REVERT = 800;  // 归还单(客户端表现成记录)

        // 填充单(常规批次填充替代虚拟批次) // 后台隐藏单据
        SHEET_TYPE_REPLACE = 900;
    }

    // 单据状态
    enum SheetStatus {
        // 实体单据用,如入库单,出库单
        SHEET_STATUS_UNSPECIFIED     = 0;  // 无效状态
        SHEET_STATUS_NOT_SUBMITTED   = 1;  // 未提交(草稿)
        SHEET_STATUS_SUBMITTED       = 2;  // 已提交(待审核) 已借出/已归还/退货入库提交 所有记录型的单据的提交状态 (修改库存)
        SHEET_STATUS_NOT_APPROVED    = 3;  // 审核不通过
        SHEET_STATUS_APPROVED        = 4;  // 审核通过/
        SHEET_STATUS_CANCEL_APPROVAL = 5;  // 反审核 (修改库存)

        SHEET_STATUS_DELETED = 6;  // 冲销/删除
        SHEET_STATUS_PAID    = 7;  // 已结款 已废弃
    }

    enum TargetType {
        SHEET_TARGET_TYPE_UNSPECIFIED = 0;
        SHEET_TARGET_TYPE_CUSTOMER    = 1;  // 商户
        SHEET_TARGET_TYPE_SUPPLIER    = 2;  // 供应商 // 入库单 //
        SHEET_TARGET_TYPE_OTHER       = 3;  // 其他
    }
    enum Status {
        STATUS_UNSPECIFIED = 0;
        STATUS_REPLACE     = 256;  // 2^8 该单据是否有替换批次的功能,如果有, 则审核通过后不能再反审!!

        // STOCK_SHEET_STATUS_ADJUSTING = 256;  // 2^8 是否调整中
        STATUS_PRINTED = 512;  // 2^9 是否已打印
        // STOCK_SHEET_STATUS_ADJUSTED  = 1024; // 2^10 是否被调整过
    }

    enum PayStatus {
        PAY_STATUS_UNSPECIFIED  = 0;
        PAY_STATUS_NOT_PAID     = 1;  // 未结款
        PAY_STATUS_READY_TO_PAY = 2;  // 已加入结款单,准备结款
        PAY_STATUS_PAID         = 3;  // 已结款
    }

    enum RelatedSheetType {
        RELATED_SHEET_TYPE_UNSPECIFIED    = 0;
        RELATED_SHEET_TYPE_ORDER          = 2;  // 订单
        RELATED_SHEET_TYPE_PURCHASE_SHEET = 3;  // 采购单
        RELATED_SHEET_TYPE_STOCK_SHEET    = 4;  // 库存单据
        RELATED_SHEET_TYPE_PRODUCTION     = 5;  // 生产计划
    }

    // @inject_tag: gorm:"PRIMARY_KEY"
    uint64 stock_sheet_id = 1;  // 单据号(主键) 后端提供,前端查询指定单据时用该Id
    uint64 create_time    = 3;  // 建单时间(物理) 后端提供
    uint64 update_time    = 4;  // 最后修改时间(物理) 后端提供
    uint64 delete_time    = 5;  // 删除时间(物理) 后端提供 默认0
    SheetType sheet_type  = 6 [ (validate.rules).message = {required: true} ];  // 单据类型 客户端须指定
    uint64 status         = 9;                                              // bitmap

    uint64 group_id                = 10;  // group_id 后端补充
    uint64 station_id              = 11;  //  站点id 后端补充
    uint64 target_id               = 12;  // 商户,或供应商的id, 和target_type 一起使用
    uint64 statement_id            = 14;  // 结款单id 后端补充 废弃
    uint64 sku_id                  = 15;  // 产品定义的一些表面上是非单据业务操作,需要查询商品的时候才需要填写,比如借出记录需要填写借出的周转物ID在这里
    uint64 related_sheet_id        = 16;  // 关联单据 配合related_sheet_type 使用, 采购入库单可能关联采购单,  销售出库单可能关联订单
    string related_sheet_serial_no = 17;  // 关联单据的单号

    SheetStatus sheet_status            = 20 [ (validate.rules).message = {required: true} ];  // 单据状态 enum SheetStatus
    uint64 submit_time                  = 25;                                              // 提交时间(业务时间,客户可自己指定) 客户端可指定,若客户没有填写,则默认为0,后端会补上当前实际时间作为提交时间
    uint64 commit_time                  = 26;                                              // 提交时间(物理时间) 后端提供
    uint64 creator_id                   = 22;                                              // 创建人id 后端提供
    string remark                       = 28;                                              // 备注
    CostAllocations discounts           = 29;                                              // 折让
    CostAllocations cost_allocation     = 30;                                              // 分摊
    string total_price                  = 32;                                              // 当前单据总金额 后端计算
    Details details                     = 33 [(validate.rules).message.required = true];   // 单据详情
    RelatedSheetType related_sheet_type = 34;                                              // 关联单据类型 RelatedSheetType 配合 related_sheet_id 使用

    TargetType target_type  = 44;  // 商户,或供应商的id, 和target_id 一起使用
    string target_name      = 45;  // 手动输入单据对象的情况,如手动创建销售出库单
    uint64 last_adjust_time = 46;  // 这个单据发起的调整的最后调整时间,避免反复调整
    uint64 batch_index      = 47;  // 批次号id, 每次反审都会重新
    uint64 driver_id        = 48;  // 关联的司机id 主要是周转物

    uint64 settle_sheet_id        = 49;  // 结款单据id
    string settle_sheet_serial_no = 50;  // 结款单编号
    PayStatus pay_status          = 51;  // 结款状态

    string stock_sheet_serial_no = 99;  // 业务单号,展示,唯一 T1234-jHD-2020-..
    // @inject_tag: gorm:"-"
    uint64 response_time = 100;  // 请求时间 前端把这个字段原封不动传回即可 后端用这个字段判断请求单据是否已经被其他请求修改过
}

// 库存变动记录
// 所有的单据记录,都是一个 入库单,出库单,盘点单,商品台账,等等
// 如果需要展示操作时的基准单位, 需要从Detail中获取
message StockLog {
    option (dao.partition_count) = 100;

    // @inject_tag: gorm:"PRIMARY_KEY"
    uint64 stock_log_id = 1;  // 主键 唯一Id
    uint64 submit_time  = 2;  // 业务时间 如,出库时间/入库时间/盘点时间
    uint64 create_time  = 3;  // 物理时间
    uint64 update_time  = 4;  // 最后修改时间
    uint64 delete_time  = 5;

    uint64 group_id       = 10;
    uint64 station_id     = 11;
    uint64 spu_id         = 12;
    uint64 sku_id         = 13;
    uint64 base_unit_id   = 14;  // 基本单位id, 如斤
    uint64 sku_unit_id    = 15;  // 包装单位,如 袋
    uint64 operator_id    = 16;  // 操作人id
    uint64 stock_sheet_id = 17;  // 库存单据id
    //    uint64 cancel_log_id      = 18; // 反审这条log的log
    uint64 production_task_id = 18;  // 关联的加工计划id

    uint64 target_id = 19;  // 单据对象id
    uint64 detail_id = 20;  // 单据内的detail_id

    // StockSheet.Detail detail = 20; // 直接记录单据详情快照作为变动记录 去掉了,好像用不到,信息从BatchLog中获取足够了

    merchandise.UnitStock old_stock = 21;  // 修改前库存 商品台账会用到
    merchandise.UnitStock new_stock = 22;  // 修改后的库存 商品台账会用到
    // merchandise.UnitStock update_stock = 23; // 库存变动 入库记录和出库记录等普通记录可以用这个展示库存变动

    OperateType operate_type          = 24 [ (validate.rules).message = {required: true} ];  // enum OperateType
    uint64 cancel_time                = 25;                                              // 被反审时间 客户端用不到的字段
    StockSheet.SheetType sheet_type   = 26 [ (validate.rules).message = {required: true} ];
    StockSheet.TargetType target_type = 27;  // 和target_id一起使用
    string target_name                = 28;  // tartget_type 为 other的情况
    string stock_sheet_serial_no      = 29;  // 单号 客户端展示这个
    string production_task_serial_no  = 36;  // 已完成生产计划编号
    uint64 target_customer_id         = 37;
    string related_sheet_serial_no    = 38;  // 订单号
    uint64 driver_id                  = 39;  // 司机Id
}

// 调整相关
// 调整单详情 single

// 调整单
message AdjustSheet {
    option (dao.partition_count) = 100;

    enum AdjustSheetStatus {
        ADJUST_SHEET_STATUS_UNSPECIFIED   = 0;
        ADJUST_SHEET_STATUS_NOT_SUBMITTED = 1;
        ADJUST_SHEET_STATUS_ADJUSTING     = 2;  // 调整中
        ADJUST_SHEET_STATUS_DONE          = 3;  // 调整已完成
        ADJUST_SHEET_STATUS_FAIL          = 4;  // 调整失败
    }
    message Detail {
        // uint64 stock_sheet_id = 1  [ (validate.rules).uint64.gt = 0 ];
        uint64 batch_id         = 2 [(validate.rules).uint64.gt = 0];                            // 被调整批次
        string original_price   = 3 [(validate.rules).string.pattern = "^(-?\\d+)(\\.\\d+)?$"];  // 调整/分摊前价格
        string adjust_price     = 4 [(validate.rules).string.pattern = "^(-?\\d+)(\\.\\d+)?$"];  // 调整的价格
        uint64 replace_batch_id = 5;                                                             // 替换原批次的新批次,目前只在虚拟批次库存有
        uint64 sku_id           = 6 [(validate.rules).uint64.gt = 0];                            // 商品id
        string stock_amount     = 7 [(validate.rules).string.pattern = "^(-?\\d+)(\\.\\d+)?$"];  // 库存数 or 入库数(基本单位)
        uint64 unit_id          = 8 [(validate.rules).uint64.gt = 0];                            // 单位id
        uint64 adjust_time      = 9;                                                             // 调整时间执行时间
        uint64 submit_time      = 10;                                                            // 调整在进销存时间线上开始的时间(主要用于确定stockLog从哪里开始调整)
    }
    message Details {
        repeated Detail details = 1;  // 调整单详情
    }
    // @inject_tag: gorm:"PRIMARY_KEY"
    uint64 adjust_sheet_id = 1;  // 主键
    uint64 create_time     = 3;
    uint64 update_time     = 4;
    uint64 delete_time     = 5;

    uint64 station_id = 10;
    uint64 group_id   = 11;

    string adjust_sheet_serial_no = 20;

    Details details                       = 21;  // 单据详情
    AdjustSheetStatus adjust_sheet_status = 22;  // 单据状态
    uint64 stock_sheet_id                 = 23;  // 进销存单据id
    string stock_sheet_serial_no          = 24;  // 进销存单号
    StockSheet.SheetType stock_sheet_type = 25;  // 进销存单据类型
    uint64 async_task_id                  = 26;  // 对应的异步任务id
    uint64 creator_id                     = 27;  // 创建人id
}

// 替换批次用的数据结构

// 商家关联的所有周转物的库存数
message CustomerTurnover {
    option (dao.partition_count) = 100;

    // 只存了skuid, 单位直接查sku的基本单位,总要查sku的

    // 下面存储了哪个周转物待归还的数量,即"欠"多少, quantity为0时说明没有待归还数, 待归还数不会小于零
    message Stocks {
        map<uint64, merchandise.UnitStock> unit_stocks = 1;  // key : sku_id , value:Stock
    }
    // @inject_tag: gorm:"PRIMARY_KEY"
    uint64 customer_turnover_id = 1;  // 主键
    uint64 update_time          = 4;  // 最后修改时间(物理)
    uint64 delete_time          = 5;  // 删除时间(物理)

    uint64 group_id     = 10;
    uint64 station_id   = 11;
    uint64 customer_id  = 12;
    uint64 base_unit_id = 13;
    Stocks stocks       = 14;
    // @inject_tag: gorm:"-"
    repeated merchandise.UnitStock stock_list = 15;  // 返回给前端的列表,按照未归还数倒序排序
}

// 进销存查询时间维度
enum TimeType {
    TIME_TYPE_UNSPECIFIED   = 0;
    TIME_TYPE_CREATE        = 1;   // 物理创建时间
    TIME_TYPE_SUBMIT        = 2;   // 业务提交时间
    TIME_TYPE_COMMIT        = 3;   // 物理提交时间
    TIME_TYPE_ORDER_RECEIVE = 11;  // 订单收货时间
}

message CheckSkuUnit {
    SkuUnit sku_unit                       = 1;
    merchandise.UnitStock request_quantity = 2;  // 请求的下单数,单位须跟sku_unit中一致
    bool pass                              = 3;  // 库存是否充足,请求时默认为False, 返回时为根据配置
    merchandise.UnitStock real_quantity    = 4;  // 剩余库存, 请求时不填,response时会填上,用于提示
    // ChangeType change_type      = 5; // 操作类型,目前只支持增减 ADD or SUB
}

//     STOCK_SHEET_STATUS_UNSPECIFIED     = 0;
//     STOCK_SHEET_STATUS_ADJUSTING = 256;  // 2^8 是否调整中
//     STOCK_SHEET_STATUS_PRINTED   = 512;  // 2^9 是否已打印
//     STOCK_SHEET_STATUS_ADJUSTED  = 1024; // 2^10 是否被调整过

message ReplaceBatch {
    message ReplaceDetail {
        uint64 const_batch_id          = 1;  // 常规批次id // 必填
        merchandise.UnitStock stock    = 2;  // 替换的数量  // 必填
        bool all                       = 3;  // true:严格按照quantity来替换,如果批次库存不够还会报错 false:以批次实际库存来替换,不管常规批次够不够,都将尽可能的把常规批次的库存用来替换出库 // 前端给false
        string result_replace_quantity = 4;  // 实际替换数
        string const_batch_serial_no   = 5;  // 实际批次号
        uint64 sku_unit_id             = 6;  // 实际批次规格
    }

    // uint64 replace_batch_id = 1; // 替换批次记录
    uint64 create_time = 2;  // 批次创建时间(物理时间) 后端补充
    uint64 update_time = 3;  //最后修改时间(物理时间) 后端补充
    uint64 delete_time = 4;  //删除时间(物理时间)

    uint64 group_id     = 10;
    uint64 station_id   = 11;
    uint64 sku_id       = 12;
    uint64 base_unit_id = 13;

    uint64 virtual_batch_id        = 20;  // 超支批次id
    repeated ReplaceDetail details = 21;  // 替换的详细信息
}

enum RequestDetail {
    REQUEST_DETAIL_UNSPECIFIED = 0;
    REQUEST_DETAIL_SKUS        = 256;  // 2^8 是否需要商品信息
    REQUEST_DETAIL_SHELVES     = 512;  // 2^9 是否需要返回货位信息字典
}

// 不存储,仅用于前后端交互
// 货值成本和出入库汇总
message StockSummary {
    // 记录某个操作的库存数, 如果取不到,则是0
    // 特殊的,出入库汇总也用这个数据结构,只是下面的map不会有所有类型的operate_type,仅返回指定的operate
    // uint64 stock_summary_id = 1; // 主键
    uint64 group_id   = 10;
    uint64 station_id = 11;
    uint64 target_id  = 12;

    StockSheet.TargetType target_type = 13;  // 商户,或供应商的id, 和target_id 一起使用
    uint64 base_unit_id               = 14;
    uint64 sku_unit_id                = 15;

    uint64 date_time = 21;

    merchandise.UnitStock beigin_stock = 22;
    merchandise.UnitStock end_stock    = 23;

    map<uint64, merchandise.UnitStock> operate_stock = 24;  // key : OperateType , value:Stock
}

// 接口返回额外数据,主要用于前端展示
message Additional {
    map<uint64, merchandise.GetManySkuResponse.SkuInfo> skuinfos = 10;  // key : sku_id sku信息
    map<uint64, merchandise.Unit> units                          = 11;  // key : unit_id
    map<uint64, enterprise.Supplier> suppliers                   = 12;  // key : supplier_id // 供应商
    map<uint64, enterprise.CustomerUser> customer_users          = 13;  // key : customer_user_id // 商户账号信息
    map<uint64, Shelf> shelfs                                    = 14;  // key : shelf_id
    map<uint64, enterprise.GroupUser> group_users                = 15;  // key group_user_id
    map<uint64, Batch> batches                                   = 16;  // key group_user_id
    map<uint64, enterprise.Customer> customers                   = 17;  // key group_user_id
    map<uint64, SkuStock> sku_stocks                             = 18;  // key group_user_id
    // map<uint64, production.Task>                            production_tasks  = 19; // key task_id
}

message ListStockSummaryRequest {
    ceres.common.PagingParams paging = 1;
    repeated uint64 category_ids     = 2;  // 分类id, 不管是一级分类还是二级分类,都放这里
    uint64 sku_id                    = 3;
    string q                         = 4;                                   // 搜索商品名
    uint64 begin_time                = 5 [(validate.rules).uint64.gt = 0];  // 开始时间
    uint64 end_time                  = 6 [(validate.rules).uint64.gt = 0];  // 结束时间
    OperateType operate_type         = 7;                                   // 仅出入库汇总时需要传
}

message ListStockSummaryResponse {
    // 等待ClickHouse,具体结构
    ceres.common.PagingResult paging      = 1 [(validate.rules).message.required = true];
    repeated StockSummary stock_summaries = 2;
}

// 其他模块调用的api
// 判断库存是否足够下单
message UpdateOrderStockRequest {
    repeated CheckSkuUnit check_data = 1 [(validate.rules).repeated.min_items = 1];
}
message UpdateOrderStockResponse {
    repeated CheckSkuUnit check_data = 1;
    uint64 code                      = 2;  // 0 全都可以下单 1:至少有一个商品不能下单
}

// 冻结/在途 库存
/*
UpdatePendingStockRequest
不需要change_type quantity为正则加,为负责减
*/
message UpdatePendingStockRequest {
    uint64 id = 1;  // 单据id或加工计划id
    // ChangeType change_type                                               = 2;                                    // enum ChangeType
    repeated SkuUnitStock.PendingStock.PendingStockDetail pending_stocks = 3;
}

// 冻结/在途 库存
message UpdatePendingStockResponse {
    uint64 id = 1;  // 单据id或加工计划id
}

// 库存总览
//message ListStockOverview{
//    message StockOverView{
//        SkuStock sku_stock = 1;
//        repeated
//    }
//}

// 创建库存单据, 出库单,入库单,盘点单等待那句
message CreateStockSheetRequest {
    StockSheet stock_sheet = 1 [(validate.rules).message.required = true];
    bool recommend_price   = 2;  // 是否给与推荐价格, 目前只有其他模块调用时需要调用,比如生产模块创建生产入库单
}

message CreateStockSheetResponse {
    StockSheet stock_sheet = 1;
    uint64 async_task_id   = 2;
}

message UpdateSkuUnitStockConfigRequest {
    SkuUnit sku_unit                    = 1;
    SkuUnitStock.Config config          = 2;  // 配置类型
    merchandise.UnitStock virtual_stock = 3;  // 如果是自定义库存数,需传库存数来
}

message UpdateSkuUnitStockConfigResponse {
    SkuUnit sku_unit = 1;
}

// 修改某个具体单据,包括单据详情,和状态的变换
message UpdateStockSheetRequest {
    uint64 stock_sheet_id    = 1 [(validate.rules).uint64.gt = 0];
    StockSheet stock_sheet   = 2 [(validate.rules).message.required = true];
    OperateType operate_type = 3;  // 操作类型 enum StockOperateType
}

message UpdateStockSheetResponse {
    StockSheet stock_sheet = 1;
    uint64 async_task_id   = 2;
}

// 实际用不到
message DeleteStockSheetRequest {
    uint64 stock_sheet_id = 1 [(validate.rules).uint64.gt = 0];
}
message DeleteStockSheetResponse {
    StockSheet stock_sheet = 1;
}

// 获取单张单据
message GetStockSheetRequest {
    uint64 stock_sheet_id = 1 [(validate.rules).uint64.gt = 0];
    // RequestDetail request_detail = 2; // enum RequestDetail
    bool with_additional = 20;  // 是否返回如商品,单位供应商等额外信息
}

message GetStockSheetResponse {
    StockSheet stock_sheet = 1 [(validate.rules).message.required = true];
    Additional additional  = 20 [(validate.rules).message.required = true];
}

// 各种库存单据的list接口,比如查询出库单,入库单,盘点单,特殊的,周转物的借出归还记录也是这个接口
message ListStockSheetRequest {
    ceres.common.PagingParams paging      = 1;
    StockSheet.SheetType stock_sheet_type = 2;

    TimeType time_type                              = 3;   // enum TimeType
    uint64 begin_time                               = 4;   // 开始时间
    uint64 end_time                                 = 5;   // 结束时间
    uint64 target_id                                = 6;   // 对象id 供应商或商户id
    string q                                        = 7;   // 单据号查询, 须完整填写
    StockSheet.SheetStatus stock_sheet_status       = 8;   // 单据状态 enum StockSheet.SheetStatus
    repeated uint64 sheet_ids                       = 9;   // 单号
    repeated uint64 customer_tags                   = 10;  // 商户标签
    common.Filters.Bool is_printed                  = 11;  // 是否已打印
    repeated uint64 route_ids                       = 12;  // 线路
    repeated string sheet_nos                       = 13;  // 业务单号 如THCK,JHRK
    bool with_additional                            = 20;  // 是否返回如商品,单位供应商等额外信息
    bool esc                                        = 21;  // 是否正序
    repeated uint64 customer_label_ids              = 22;  // 商户标签
    repeated StockSheet.SheetType stock_sheet_types = 23;  // 如果该值不为空,会无视 stock_sheet_type 的值

    string customer_q = 24;  // 商户查询信息
    string sku_q      = 25;  // 商品信息(只用于查询记录型单据)

    repeated StockSheet.PayStatus pay_status = 26;
}

message ListStockSheetResponse {
    ceres.common.PagingResult paging = 1;
    repeated StockSheet stock_sheets = 2;
    Additional additional            = 3;
    bool find_out_filter             = 4;  // 搜单号时,查到单据不在查询范围内时为true
}

message GetManyStockSheetRequest {
    repeated uint64 ids = 1;
}
message GetManyStockSheetResponse {
    map<uint64, StockSheet> stock_sheets = 1;
}
message CleanStockSheetRequest {}
message CleanStockSheetResponse {}

// sku//库存汇总

message CreateSkuStockRequest {
    SkuStock sku_stock = 1 [(validate.rules).message.required = true];
}

message CreateSkuStockResponse {
    SkuStock sku_stock = 1 [(validate.rules).message.required = true];
}

message UpdateSkuStockRequest {
    uint64 sku_stock_id = 1 [(validate.rules).uint64.gt = 0];
    SkuStock sku_stock  = 2 [(validate.rules).message.required = true];
}

message UpdateSkuStockResponse {
    SkuStock sku_stock = 1;
}
message DeleteSkuStockRequest {
    uint64 sku_stock_id = 1 [(validate.rules).uint64.gt = 0];
}
message DeleteSkuStockResponse {
    SkuStock sku_stock = 1;
}

// 获取sku的某个单位的库存信息
// 库存总览处会用到
message ListSkuStockRequest {
    ceres.common.PagingParams paging = 1;
    repeated uint64 sku_ids          = 2;
    string q                         = 7;  // 模糊查询
    RequestDetail request_detail     = 8;
    repeated uint64 category_ids     = 9;   // 分类id, 不管是一级分类还是二级分类,都放这里
    merchandise.Sku.SkuType sku_type = 10;  // 商品类型

    bool with_additional = 20;  // 是否返回如商品,单位供应商等额外信息
    bool remaining_only  = 22;  // 仅查询库存数大于0的批次
    bool unit_stock_map  = 24;  // false 返回list  , true 返回map
}
message ListSkuStockResponse {
    ceres.common.PagingResult paging = 1;
    repeated SkuStock sku_stocks     = 3;
    Additional additional            = 20;
}

message GetSkuStockRequest {
    uint64 sku_stock_id  = 1;
    uint64 sku_id        = 2;
    bool with_additional = 20;  // 是否返回如商品,单位供应商等额外信息
}
message GetSkuStockResponse {
    SkuStock sku_stock    = 1 [(validate.rules).message.required = true];
    Additional additional = 20 [(validate.rules).message.required = true];
}

message GetManySkuStockRequest {
    repeated uint64 sku_ids = 1;
};
message GetManySkuStockResponse {
    map<uint64, SkuStock> sku_stocks = 1;
};

message CleanSkuStockRequest {}
message CleanSkuStockResponse {}

//// ssu库存汇总
//message SkuUnitId {
//    uint64 sku_id = 1;
//    uint64 unit_id = 2;
//}
message CreateSkuUnitStockRequest {
    SkuUnitStock sku_unit_stock = 1 [(validate.rules).message.required = true];
}
message CreateSkuUnitStockResponse {
    SkuUnitStock sku_unit_stock = 1;
}

message UpdateSkuUnitStockRequest {
    uint64 sku_unit_stock_id    = 1 [(validate.rules).uint64.gt = 0];
    SkuUnitStock sku_unit_stock = 2 [(validate.rules).message.required = true];
}
message UpdateSkuUnitStockResponse {
    SkuUnitStock sku_unit_stock = 1;
}

message DeleteSkuUnitStockRequest {
    uint64 sku_unit_stock_id = 1 [(validate.rules).uint64.gt = 0];
}
message DeleteSkuUnitStockResponse {
    SkuUnitStock sku_unit_stock = 1;
}

message ListSkuUnitStockRequest {
    ceres.common.PagingParams paging = 1;
    uint64 sku_id                    = 2;
    uint64 sku_unit_id               = 3;   // 0 全部
    string q                         = 7;   // 模糊查询
    bool with_additional             = 20;  // 是否返回如商品,单位供应商等额外信息
    bool remaining_only              = 22;  // 仅查询库存数大于0的批次
}

message ListSkuUnitStockResponse {
    ceres.common.PagingResult paging          = 1;
    map<uint64, SkuUnitStock> sku_unit_stocks = 2;  // key : unit_id
    Additional additional                     = 20;
}

message GetSkuUnitStockRequest {
    uint64 sku_unit_stock_id = 1;
    uint64 sku_id            = 2;
    uint64 unit_id           = 3;
}
message GetSkuUnitStockResponse {
    SkuUnitStock sku_unit_stock               = 1 [(validate.rules).message.required = true];
    merchandise.UnitStock sku_available_stock = 4;  // Sku的总的的可用库存
}
message CleanSkuUnitStockRequest {}
message CleanSkuUnitStockResponse {}

// 批次
message CreateBatchRequest {
    Batch batch = 1 [(validate.rules).message.required = true];
}
message CreateBatchResponse {
    Batch batch = 1;
}

message UpdateBatchRequest {
    uint64 batch_id = 1 [(validate.rules).uint64.gt = 0];
    Batch batch     = 2 [(validate.rules).message.required = true];
}
message UpdateBatchResponse {
    Batch batch = 1;
}
message DeleteBatchRequest {
    uint64 batch_id = 1 [(validate.rules).uint64.gt = 0];
}
message DeleteBatchResponse {
    Batch batch = 1;
}

// enum QuantityFilter {
//     QUANTITY_FILTER_UNSPECIFIED = 0;
//     QUANTITY_FILTER_GT_ZERO     = 1;
//     QUANTITY_FILTER_LT_ZERO     = 2;
//     QUANTITY_FILTER_EQUAL_ZERO  = 3;
// }
// 查询批次列表
message ListBatchRequest {
    ceres.common.PagingParams paging = 1;
    repeated uint64 batches_ids      = 2;   // 批次id
    uint64 supplier_id               = 4;   // 供应商id
    string q                         = 7;   // 模糊查询
    uint64 begin_time                = 8;   // 创建时间 开始
    uint64 end_time                  = 9;   // 创建时间 结束
    uint64 sku_id                    = 11;  //
    uint64 base_unit_id              = 12;  //
    uint64 sku_unit_id               = 13;  //
    // QuantityFilter  quantity        = 15; // 仅查询库存数大于零的批次
    repeated uint64 shelf_ids           = 14;  // 货位id
    bool with_additional                = 20;  // 是否返回如商品,单位供应商等额外信息
    Batch.BatchType batch_type          = 21;  // 批次类型
    common.Filters.Bool remaining       = 22;  // 0 不限制,  1 库存数大于零 2 库存数等于0
    uint64 production_task_id           = 23;  // 生产计划编号
    bool need_virual_batch              = 24;  // 是会返回一个虚拟批次模板
    repeated uint64 target_customer_ids = 27;
    //    uint64              bom_id             = 25;
    //    uint64              bom_revision       = 26;
}

message ListBatchResponse {
    ceres.common.PagingResult paging = 1;
    repeated Batch batches           = 2;
    Additional additional            = 20;
}

message GetBatchRequest {
    uint64 batch_id      = 1 [(validate.rules).uint64.gt = 0];
    bool with_additional = 20;  // 是否返回如商品,单位供应商等额外信息
}
message GetBatchResponse {
    Batch batch           = 1 [(validate.rules).message.required = true];
    Additional additional = 20 [(validate.rules).message.required = true];
}
message CleanBatchRequest {}
message CleanBatchResponse {}

// 库存记录
message CreateStockLogRequest {
    StockLog stock_log = 1 [(validate.rules).message.required = true];
}
message CreateStockLogResponse {
    StockLog stock_log = 1;
}
message UpdateStockLogRequest {
    uint64 stock_log_id = 1 [(validate.rules).uint64.gt = 0];
    StockLog stock_log  = 2 [(validate.rules).message.required = true];
}
message UpdateStockLogResponse {
    StockLog stock_log = 1;
}
message DeleteStockLogRequest {
    uint64 stock_log_id = 1 [(validate.rules).uint64.gt = 0];
}
message DeleteStockLogResponse {
    StockLog stock_log = 1;
}
message CleanStockLogRequest {}
message CleanStockLogResponse {}

// 库存记录,包括入库记录,出库记录和商品台账
message ListStockLogRequest {
    ceres.common.PagingParams paging = 1;
    // uint64 time_type = 2; // enum TimeType
    OperateType operate_type     = 2 [ (validate.rules).message = {required: true} ];  // enum StockOperateType
    uint64 stock_sheet_id        = 3;                                                   // 单据id
    uint64 target_id             = 4;                                                   // 单据对象id 供应商或商户id
    repeated uint64 category_ids = 5;                                                   // 分类id, 不管是一级分类还是二级分类,都放这里
    //    repeated uint64 category_id_2  = 7; // 二级分类id
    string q          = 8;  // 模糊搜索条件
    uint64 begin_time = 9;
    uint64 end_time   = 10;

    uint64 sku_id                       = 12;
    uint64 unit_id                      = 13;
    bool show_cancelled                 = 14;  // 是否返回
    merchandise.Sku.SkuType sku_type    = 15;  // 商品类型
    repeated uint64 target_customer_ids = 16;

    bool with_additional = 20;  // 是否返回如商品,单位供应商等额外信息
    bool esc             = 21;  // 是否正序
    // uint64 operator_id = 22; // 操作人
    repeated OperateType operate_types = 23;  // enum StockOperateType
}

message ListStockLogResponse {
    ceres.common.PagingResult paging = 1;
    repeated StockLog stock_logs     = 2;
    Additional additional            = 20;
}

message GetStockLogRequest {
    uint64 stock_log_id = 1 [(validate.rules).uint64.gt = 0];
}
message GetStockLogResponse {
    StockLog stock_log = 1;
}

// 批次流水

message CreateBatchLogRequest {
    BatchLog batch_log = 1 [(validate.rules).message.required = true];
}
message CreateBatchLogResponse {
    BatchLog batch_log = 1;
}
message UpdateBatchLogRequest {
    uint64 batch_log_id = 1 [(validate.rules).uint64.gt = 0];
    BatchLog batch_log  = 2 [(validate.rules).message.required = true];
}
message UpdateBatchLogResponse {
    BatchLog batch_log = 1;
}
message DeleteBatchLogRequest {
    uint64 batch_log_id = 1 [(validate.rules).uint64.gt = 0];
}
message DeleteBatchLogResponse {
    BatchLog batch_log = 1;
}

// 查询批次流水列表
message ListBatchLogRequest {
    ceres.common.PagingParams paging = 1;
    uint64 batch_id                  = 2;  // 批次id
    // string                    serial_no = 3; // 批次号
    // repeated uint64 batch_ids = 4;      // 多个批次id
    // repeated string serial_nos = 5; // 多个批次号
    string q                            = 7;  // 模糊搜索条件
    uint64 begin_time                   = 8;
    uint64 end_time                     = 9;
    bool with_additional                = 20;  // 是否返回如商品,单位供应商等额外信息
    repeated uint64 sku_ids             = 10;  // 商品id  [1]
    repeated uint64 production_task_ids = 21;  // 加工计划的id  [A]
    repeated OperateType operates       = 22;  // 操作 [ll llfs tl tlfs]
}

message ListBatchLogResponse {
    ceres.common.PagingResult paging = 1;
    repeated BatchLog batch_logs     = 2;
    Additional additional            = 20;
}

message GetBatchLogRequest {
    uint64 batch_log_id = 1 [(validate.rules).uint64.gt = 0];
}
message GetBatchLogResponse {
    BatchLog batch_log = 1;
}

message CleanBatchLogRequest {}
message CleanBatchLogResponse {}

// 创建货位
message CreateShelfRequest {
    Shelf shelf = 1 [(validate.rules).message.required = true];
}
message CreateShelfResponse {
    Shelf shelf = 1;
}

// 修改货位
message UpdateShelfRequest {
    uint64 shelf_id = 1 [(validate.rules).uint64.gt = 0];
    Shelf shelf     = 2 [(validate.rules).message.required = true];
}
message UpdateShelfResponse {
    uint64 shelf_id = 1;
    Shelf shelf     = 2;
}

// 删除货位
message DeleteShelfRequest {
    uint64 shelf_id = 1 [(validate.rules).uint64.gt = 0];
}
message DeleteShelfResponse {
    uint64 shelf_id = 1;
    Shelf shelf     = 2;
}

// 货位列表,因为实际数据应该是树型,所以不增加分页功能
message ListShelfRequest {
    repeated uint64 shelf_ids = 1;  // 查询部分货位,用id的列表
    bool with_deleted         = 2;  //  查询包含已删除的货位s
}
message ListShelfResponse {
    repeated Shelf shelves = 2;
}

message GetShelfRequest {
    uint64 shelf_id = 1 [(validate.rules).uint64.gt = 0];
}
message GetShelfResponse {
    Shelf shelf = 1;
}

message CleanShelfRequest {}
message CleanShelfResponse {}

// 前段这期应该用不到
message CreateAdjustSheetRequest {
    AdjustSheet adjust_sheet = 1 [(validate.rules).message.required = true];
}
message CreateAdjustSheetResponse {
    AdjustSheet adjust_sheet = 1;
}
message UpdateAdjustSheetRequest {
    uint64 adjust_sheet_id   = 1 [(validate.rules).uint64.gt = 0];
    AdjustSheet adjust_sheet = 2 [(validate.rules).message.required = true];
}

// 前段这期应该用不到
message UpdateAdjustSheetResponse {
    AdjustSheet adjust_sheet = 1;
}
message DeleteAdjustSheetRequest {
    uint64 adjust_sheet_id = 1 [(validate.rules).uint64.gt = 0];
}
message DeleteAdjustSheetResponse {
    AdjustSheet adjust_sheet = 1;
}

// 调整单据列表,
message ListAdjustSheetRequest {
    ceres.common.PagingParams paging                  = 1;
    uint64 adjust_sheet_id                            = 2;
    uint64 adjust_serial_no                           = 3;
    AdjustSheet.AdjustSheetStatus adjust_sheet_status = 4;  // 单据状态
    string q                                          = 7;  // 模糊搜索条件
    uint64 begin_time                                 = 8;
    uint64 end_time                                   = 9;
    bool with_additional                              = 20;  // 是否返回如商品,单位供应商等额外信息
}

message ListAdjustSheetResponse {
    ceres.common.PagingResult paging   = 1;
    repeated AdjustSheet adjust_sheets = 2;
    Additional additional              = 20;
}

message GetAdjustSheetRequest {
    uint64 adjust_sheet_id = 1 [(validate.rules).uint64.gt = 0];
    bool with_additional   = 20;  // 是否返回如商品,单位供应商等额外信息
}
message GetAdjustSheetResponse {
    AdjustSheet adjust_sheet = 1;
    Additional additional    = 20;
}

message CleanAdjustSheetRequest {}
message CleanAdjustSheetResponse {}

// // 商户周转物库存统计
// 商户周转物详情,展示商户维度的周转物借出归还情况
message ListCustomerTurnoverRequest {
    ceres.common.PagingParams paging = 1;

    repeated uint64 customer_ids = 3;  // 根据商户id的列表来获取关联周转物信息
    string q                     = 4;
    bool with_additional         = 20;  // 是否返回如商品,单位供应商等额外信息
}
message ListCustomerTurnoverResponse {
    ceres.common.PagingResult paging            = 1;
    repeated CustomerTurnover customer_turnover = 2;
    Additional additional                       = 20;
}

message ExportCustomerTurnoverRequest {
    ListCustomerTurnoverRequest list_customer_turnover_request = 1;
}
message ExportCustomerTurnoverResponse {
    uint64 task_id = 1;
}

message CleanCustomerTurnoverRequest {}
message CleanCustomerTurnoverResponse {}

// message ExportCustomerTurnoverRequest {
//     ListCustomerTurnoverRequest list_customer_turnover_request = 1;
// }
// message ListCustomerTurnoverResponse {
//     uint64 task_id = 1;
// }

message CreateCustomerTurnoverRequest {
    CustomerTurnover customer_turnover = 1;
}
message CreateCustomerTurnoverResponse {
    CustomerTurnover customer_turnover = 1;
}
message UpdateCustomerTurnoverRequest {
    uint64 customer_turnover_id        = 1;
    CustomerTurnover customer_turnover = 2;
}
message UpdateCustomerTurnoverResponse {
    CustomerTurnover customer_turnover = 1;
}
message DeleteCustomerTurnoverRequest {
    uint64 customer_turnover_id = 1;
}
message DeleteCustomerTurnoverResponse {
    CustomerTurnover customer_turnover = 1;
}

message GetCustomerTurnoverRequest {
    uint64 customer_turnover_id = 1;
}
message GetCustomerTurnoverResponse {
    CustomerTurnover customer_turnover = 1;
}

message ListPendingStockRequest {
    ceres.common.PagingParams paging = 1;

    uint64 sku_id                     = 2 [(validate.rules).uint64.gt = 0];
    uint64 sku_unit_id                = 3;
    repeated PendingType pending_type = 4;   // 查询的类型
    bool with_additional              = 20;  // 是否返回如商品,单位供应商等额外信息
}

// 专门查看在途/冻结库存的
message ListPendingStockResponse {
    ceres.common.PagingResult paging                                            = 1;
    repeated SkuUnitStock.PendingStock.PendingStockDetail pending_stock_details = 3;  //
    merchandise.UnitStock frozen_stock                                          = 4;
    merchandise.UnitStock in_transit_stock                                      = 5;
    merchandise.UnitStock available_stock                                       = 6;
    Additional additional                                                       = 20;  //额外信息
}

// 异步任务
// 异步调整
message AsyncCommitAdjustSheetRequest {
    uint64 adjust_sheet_id = 1;  // 调整单id
}

message AsyncCommitAdjustSheetResponse {
    ceres.asynctask.Task task = 1;
}

// 导出库存记录
message ExportStockLogRequest {
    ListStockLogRequest list_stock_log_request = 1;
    asynctask.Task.Type task_type              = 2;
    // repeated StockLog export_stock_logs=3;
}

message ExportStockLogResponse {
    // ceres.asynctask.Task task = 1;
    uint64 task_id = 2;
}

// 导出单据记录
message ExportStockSheetRequest {
    ListStockSheetRequest list_stock_sheet_request = 1;
}

message ExportStockSheetResponse {
    uint64 task_id = 2;
}

// 批量创建进销存单据
message BatchSyncStockSheetRequest {
    repeated StockSheet stock_sheets = 1;
}

message BatchSyncStockSheetResponse {
    repeated StockSheet stock_sheets = 1;
}

// 同步进销存单据
message SyncStockSheetRequest {
    StockSheet stock_sheet                         = 1;
    uint64 related_sheet_id                        = 2;  // 关联的单据Id
    StockSheet.RelatedSheetType related_sheet_type = 3;  // 来源
    bool delete                                    = 4;
    StockSheet.SheetType sheet_type                = 5;  // 单据类型
}

message SyncStockSheetResponse {
    StockSheet stock_sheet = 1;
}

message ExportSkuStockRequest {
    ListSkuStockRequest list_sku_stock_request      = 1;
    preference.InventorySettings inventory_settings = 2;  // 后端填写,客户端无需处理
}

message ExportSkuStockResponse {
    uint64 task_id = 1;
}

// 批量修改单据
message BatchUpdateStockSheetRequest {
    ListStockSheetRequest list_stock_sheet_request = 1;  // 全选时
    repeated uint64 stock_sheet_ids                = 2;  // 勾选时

    message Fail {
        string stock_sheet_serial_no = 1;  // 失败的出库单号
        string reason                = 2;  // 失败的原因
    }

    repeated Fail fails                             = 3;  // 失败 根据这个生成 结果excel
    preference.InventorySettings inventory_settings = 4;  // 配置
    StockSheet.SheetStatus target_status            = 5;  // 变更的状态
    StockSheet.SheetType stock_sheet_type           = 6;  // 批量提交的单据类型 必填
}
message BatchUpdateStockSheetResponse {
    uint64 task_id = 1;  // 批量出库
}

message CreateReplaceStockSheetRequest {
    ListBatchRequest list_batch_request = 1;  // 全选时
    repeated uint64 batch_ids           = 2;  // 勾选时, 批次Id
    StockSheet.SheetType sheet_type     = 3 [ (validate.rules).message = {required: true} ];  // 单据类型
}
message CreateReplaceStockSheetResponse {
    StockSheet stock_sheet = 1;  // 单据
}
message CheckOutStockRequest {
    ListStockSheetRequest list_stock_sheet_request = 1;  // 全选所有页的时候
    repeated uint64 stock_sheet_ids                = 2;  // 勾选的时候
}

message CheckOutStockResponse {
    message LackStock {
        // uint64 stock_sheet_id = 1; // 缺少库存的出库单的id
        // string stock_sheet_serial_no=2; // 出库单的单号
        uint64 sku_id   = 1;  // 缺少库存的sku
        string quantity = 2;  // 缺少的数量
    }
    repeated LackStock lack_stock = 1;
    Additional additional         = 2;
}

message CreateReplaceBatchRequest {
    // ReplaceBatch repalce_batch = 1;
    uint64 sku_id = 1;  // 全选sku下所有批次时

    repeated uint64 batch_ids = 2;  // 选择具体批次时

    ListVirtualStockRequest list_virtual_stock_request = 4;  // 全选时

    repeated ReplaceBatch.ReplaceDetail replace_details = 3;  // 替换详情
}

message CreateReplaceBatchResponse {
    repeated ReplaceBatch.ReplaceDetail replace_details = 1;
    uint64 adjust_sheet_id                              = 2;  // 调整单id
    string adjust_sheet_serial_no                       = 3;  // 调整单单号
}

// 查询超支库存
message ListVirtualStockRequest {
    ceres.common.PagingParams paging = 1;
    repeated uint64 category_ids     = 2;
    string q                         = 3;  // 商品信息和单据号

    uint64 begin_time = 4;
    uint64 end_time   = 5;

    bool with_additional = 99;
}
message ListVirtualStockResponse {
    ceres.common.PagingResult paging = 1;
    repeated SkuStock sku_stocks     = 2;
    Additional additional            = 99;
}

message ListProductionTaskCostRequest {
    repeated uint64 production_task_ids = 1;
}

message ListProductionTaskCostResponse {
    map<uint64, string> costs = 1;  // key : production_task_id , value:cost 成本
}

message BatchSyncTurnoverLoansRequest {
    repeated StockSheet sheets                     = 1;  // 借出记录
    uint64 related_sheet_id                        = 2;  // 关联的单据Id
    StockSheet.RelatedSheetType related_sheet_type = 3;  // 来源
}

// 统计借出记录
message BatchSyncTurnoverLoansResponse {
}

message CreateZeroCheckSheetRequest {
    // 优先级  batch_ids > sku_ids > all_batch
    // 三个参数只有一个会生效

    uint64 batch_ids = 1;  // 盘点成0的批次的id
    uint64 sku_ids   = 2;  // 盘点成0的商品的id
    bool all_batch   = 3;  // 盘点所有批次为0
}

message CreateZeroCheckSheetResponse {
    StockSheet stock_sheet = 1;
}

message BatchUpdateStockSheetPayStatusRequest {
    repeated uint64 stock_sheet_ids                = 1;  // 勾选部分时
    ListStockSheetRequest list_stock_sheet_request = 2;  // 勾选全部时

    StockSheet.PayStatus pay_status = 3;  // 想要修改的结款状态结果
    string settle_sheet_serial_no   = 4;  // 借款单号
    uint64 settle_sheet_id          = 5;  // 结款单id
}

message BatchUpdateStockSheetPayStatusResponse {
}
