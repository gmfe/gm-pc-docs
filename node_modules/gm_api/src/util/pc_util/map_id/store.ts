import { action, makeAutoObservable } from 'mobx'
import _ from 'lodash'

/** {  merchandise{ Quotation: { '11111': Data } } } */
interface DataMap {
  [key: string]: {
    [key: string]: {
      [key: string]: object | undefined
    }
  }
}

interface MethodMap {
  /** params 请求参数。返回数据列表 */
  [key: string]: {
    [key: string]: (params: object) => Promise<object[]>
  }
}

class MessageStore {
  constructor() {
    makeAutoObservable(this, undefined, { autoBind: true })
  }

  dataMap: DataMap = {}

  methodMap: MethodMap = {}

  @action
  doFetchData = _.debounce(() => {
    _.forIn(this.dataMap, (messageMap, packageName) => {
      _.forIn(messageMap, (idMap, messageName) => {
        const ids: string[] = []

        _.forIn(idMap, (d, id) => {
          if (!d) {
            ids.push(id)
          }
        })

        const method = this.methodMap[packageName][messageName]

        const snake = _.snakeCase(messageName)

        if (ids.length) {
          method({
            [`${snake}_ids`]: ids,
            paging: {
              offset: 0,
              limit: ids.length,
            },
          }).then((datas: object[]) => {
            _.each(datas, (data) => {
              // @ts-ignore
              this.dataMap[packageName][messageName][data[`${snake}_id`]] = data
            })

            return datas
          })
        }
      })
    })
  }, 500)

  register(
    packageName: string,
    messageName: string,
    id: string,
    fetchDatas: (params: object) => Promise<object[]>,
  ) {
    if (!this.methodMap[packageName]) {
      this.methodMap[packageName] = {}
    }
    this.methodMap[packageName][messageName] = fetchDatas

    if (!this.dataMap[packageName]) {
      this.dataMap[packageName] = {}
    }
    if (!this.dataMap[packageName][messageName]) {
      this.dataMap[packageName][messageName] = {}
    }

    if (!this.dataMap[packageName][messageName][id]) {
      this.dataMap[packageName][messageName][id] = undefined
    }

    this.doFetchData()
  }

  getData(packageName: string, messageName: string, id: string) {
    return (
      this.dataMap[packageName] &&
      this.dataMap[packageName][messageName] &&
      this.dataMap[packageName][messageName][id]
    )
  }
}

export default new MessageStore()
