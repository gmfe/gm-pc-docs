import React, { useEffect } from 'react'
import { observer } from 'mobx-react'
import messageStore from './store'
import { Response } from '@gm-common/x-request'
import _ from 'lodash'

interface MapIdProps<D, R> {
  /** id */
  id: string
  /** params 补充的参数 */
  params?: object
  /** 如果名字非 name 字段，传入此方法。默认 item => item.name */
  getName?(item: D): string | undefined
  /** 如果接口的命名不够规范，传入此方法。默认 (response, messageName) => response[names] */
  getResponseData?(response: R, messageName: string): D[]
}

interface MapIdInnerProps<D, R> extends MapIdProps<D, R> {
  packageName: string
  messageName: string
  fetchList(params: object): any
}

const MapId = observer(
  <D, R>({
    id,
    params,
    getName = (item: D) => {
      // @ts-ignore
      return item.name || ''
    },
    getResponseData = (response: R, messageName: string) => {
      // @ts-ignore
      return response[`${_.snakeCase(messageName)}s`]
    },
    packageName,
    messageName,
    fetchList,
  }: MapIdInnerProps<D, R>) => {
    useEffect(() => {
      messageStore.register(packageName, messageName, id, (_params: object) => {
        return fetchList(
          Object.assign({}, _params, params),
        ).then((res: Response<R>) => getResponseData(res.response, messageName))
      })
    }, [])

    const data = messageStore.getData(packageName, messageName, id)

    const showName = (data && getName(data)) || ''

    return <>{showName}</>
  },
)

export default MapId
export { messageStore }
export type { MapIdProps }
