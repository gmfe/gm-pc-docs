import React, { ReactNode } from 'react'
import { Select, SelectProps } from '@gm-pc/react'
import _ from 'lodash'
import { PagingMax } from '../util'
import { useAsync } from '@gm-common/hooks'

interface SelectListItem<D> {
  value: string
  text: string
  original: D
}

interface SelectListProps<D, R>
  extends Omit<SelectProps<string>, 'data' | 'renderItem'> {
  /** params 补充的参数 */
  params?: object
  /** 如果名字非 name 字段，传入此方法。默认 item => item.name */
  getName?(item: D): string | undefined
  /** 如果接口的命名不够规范，传入此方法。默认 (response, messageName) => response[names] */
  getResponseData?(response: R, messageName: string): D[]
  /** 改写下 item */
  renderItem?(item: D, index: number): ReactNode
}

interface SelectListInnerProps<D, R> extends SelectListProps<D, R> {
  messageName: string
  fetchList(params: object): any
}

function SelectList<D, R>({
  messageName,
  fetchList,
  params,
  getName = (item: D) => {
    // @ts-ignore
    return item.name || ''
  },
  getResponseData = (response: R, messageName: string) => {
    // @ts-ignore
    return response[`${_.snakeCase(messageName)}s`]
  },
  value,
  renderItem,
  ...rest
}: SelectListInnerProps<D, R>) {
  async function fetchData() {
    const res = await fetchList({
      ...params,
      paging: PagingMax,
    })

    const snake = _.snakeCase(messageName)

    return _.map(getResponseData(res.response, messageName), (item: D) => {
      return {
        // @ts-ignore
        value: item[`${snake}_id`],
        text: getName(item) || '',
        original: item,
      }
    })
  }

  const { data } = useAsync<object, SelectListItem<D>[]>(fetchData, {
    manual: false,
  })

  let newRenderItem
  if (renderItem) {
    newRenderItem = (item: SelectListItem<D>, index: number) => {
      return renderItem(item.original, index)
    }
  }

  return (
    <Select
      {...rest}
      data={data || []}
      value={data ? value : undefined}
      renderItem={newRenderItem}
    />
  )
}

export default SelectList
export type { SelectListProps }
