import React, { ReactNode, useState, useRef } from 'react'
import { useAsync } from '@gm-common/hooks'
import { PagingMax } from '../util'
import _ from 'lodash'
import { MoreSelect, MoreSelectProps } from '@gm-pc/react'

interface MoreSelectListItem<D> {
  value: string
  text: string
  original: D
}

interface MoreSelectListProps<D, R>
  extends Omit<
    MoreSelectProps,
    'data' | 'onSearch' | 'renderSelected' | 'renderListItem'
  > {
  /** params 补充的参数 */
  params?: object
  /** 如果名字非 name 字段，传入此方法。默认 item => item.name */
  getName?(item: D): string | undefined
  /** 如果接口的命名不够规范，传入此方法。默认 (response, messageName) => response[names] */
  getResponseData?(response: R, messageName: string): D[]
  /** 开启搜索 */
  isSearch?: boolean
  /** 改写下 */
  renderSelected?(selected: D): ReactNode
  /** 改写下 */
  renderListItem?(item: D, index: number): ReactNode
}

interface MoreSelectListInnerProps<D, R> extends MoreSelectListProps<D, R> {
  messageName: string
  fetchList(params: object): any
}

function MoreSelectList<D, R>({
  messageName,
  fetchList,
  params,
  getName = (item: D) => {
    // @ts-ignore
    return item.name || ''
  },
  getResponseData = (response: R, messageName: string) => {
    // @ts-ignore
    return response[`${_.snakeCase(messageName)}s`]
  },
  isSearch,
  renderSelected,
  renderListItem,
  ...rest
}: MoreSelectListInnerProps<D, R>) {
  const refQ = useRef<string>('')
  const [, setFlag] = useState<number>(0)

  const { data, run } = useAsync<any, MoreSelectListItem<D>[]>(
    async (p) => {
      const res = await fetchList({
        ...p,
        ...params,
        paging: isSearch
          ? {
              offset: 0,
              limit: 30,
            }
          : PagingMax,
      })

      const snake = _.snakeCase(messageName)

      return _.map(getResponseData(res.response, messageName), (item: D) => {
        return {
          // @ts-ignore
          value: item[`${snake}_id`],
          text: getName(item) || '',
          original: item,
        }
      })
    },
    {
      manual: false,
    },
  )

  const handleSearch = (q: string) => {
    refQ.current = q

    if (q) {
      return run({
        q,
        paging: {
          offset: 0,
          limit: 30,
        },
      })
    } else {
      // 没特别含义，为了触发重新渲染
      setFlag((flag) => flag + 1)

      return undefined
    }
  }

  let newData = data || []
  if (isSearch && refQ.current === '') {
    newData = []
  }

  let newRenderSelected
  if (renderSelected) {
    newRenderSelected = (selected: MoreSelectListItem<D>) => {
      return renderSelected(selected.original)
    }
  }
  let newRenderListItem
  if (renderListItem) {
    newRenderListItem = (item: MoreSelectListItem<D>, index: number) => {
      return renderListItem(item.original, index)
    }
  }

  return (
    <MoreSelect
      {...rest}
      data={newData}
      renderSelected={newRenderSelected}
      renderListItem={newRenderListItem}
      // @ts-ignore
      onSearch={isSearch ? handleSearch : undefined}
    />
  )
}

export default MoreSelectList

export type { MoreSelectListProps }
