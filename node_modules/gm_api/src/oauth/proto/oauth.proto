/*
client_id: 目前 client_id 等价于 common.proto 中的 App.Type
*/

syntax = "proto3";

package ceres.oauth;
option  java_multiple_files = true;
option  go_package          = "code.guanmai.cn/back_end/ceres/oauth/proto;proto";

import "./google/api/annotations.proto";
import "./include/protoc-gen-validate/validate.proto";

import "./enterprise/proto/enterprise.proto";

// 参考oauth2设计，以统一内部和开放平台访问控制 https://tools.ietf.org/html/rfc6749
service OAuthService {
    /* 暂不对外暴露
	rpc CreateRefreshToken(CreateRefreshTokenRequest) returns (CreateRefreshTokenResponse);
	rpc UpdateRefreshToken(UpdateRefreshTokenRequest) returns (UpdateRefreshTokenResponse);
	rpc DeleteRefreshToken(DeleteRefreshTokenRequest) returns (DeleteRefreshTokenResponse);
	rpc GetRefreshToken(GetRefreshTokenRequest) returns (GetRefreshTokenResponse);

	rpc CreateSession(CreateSessionRequest) returns (CreateSessionResponse);
	rpc UpdateSession(UpdateSessionRequest) returns (UpdateSessionResponse);
	rpc DeleteSession(DeleteSessionRequest) returns (DeleteSessionResponse);
	rpc GetSession(GetSessionRequest) returns (GetSessionResponse);
	*/

    // 获取当前登录者信息
    rpc GetUserInfo(GetUserInfoRequest) returns (GetUserInfoResponse) {
        option (google.api.http) = {
            post : "/ceres/oauth/OAuthService/GetUserInfo"
        };
    }

    // 切换身份，目前仅用于eshop切换CustomerUser
    rpc UpdateUserInfo(UpdateUserInfoRequest) returns (UpdateUserInfoResponse) {
        option (google.api.http) = {
            post : "/ceres/oauth/OAuthService/UpdateUserInfo"
        };
    }

    // oauth标准接口, https://tools.ietf.org/html/rfc6749#section-4
    rpc Authorize(AuthorizeRequest) returns (AuthorizeResponse) {
        option (google.api.http) = {
            post : "/ceres/oauth/OAuthService/Authorize"
        };
    }

    // oauth标准接口, https://tools.ietf.org/html/rfc6749#section-4
    rpc Token(TokenRequest) returns (TokenResponse) {
        option (google.api.http) = {
            post : "/ceres/oauth/OAuthService/Token"
        };
    }
}

message Status {
    enum Code {
        CODE_UNSPECIFIED = 0;

        CODE_TOKEN_INVALID_CLIENTID             = 2002001; // 客户端错误
        CODE_TOKEN_INVALID_USERNAME_OR_PASSWORD = 2002002; // 账号或密码错误
        CODE_TOKEN_INVALID_VERIFICATION_CODE    = 2002003; // 验证码错误
        CODE_TOKEN_INVALID_REFRESH_TOKEN        = 2002004; // refresh_token无效
    }
}

// 授权码，临时存储
message Code {
    string code_id     = 1;
    uint64 status      = 2;
    uint64 revision    = 3;
    uint64 create_time = 4;
    uint64 update_time = 5;
    uint64 delete_time = 6;

    uint64 client_id  = 10; // 查看文件顶部的注释获取更多关于 client_id 的信息
    uint64 account_id = 11;

    string code  = 20;
    string scope = 21;
    string state = 22;
}

// 票据，表示access_token时临时存储，表示refresh_token时持久存储
message Token {
    // @inject_tag: gorm:"PRIMARY_KEY"
    string token_id    = 1; // token
    uint64 status      = 2;
    uint64 revision    = 3;
    uint64 create_time = 4;
    uint64 update_time = 5;
    uint64 delete_time = 6;
    uint64 expire_time = 7;

    uint64 client_id  = 10; // 查看文件顶部的注释获取更多关于 client_id 的信息
    uint64 account_id = 11;

    string token      = 21;
    string token_type = 22;
}

// 会话，临时存储，access_token和user_info的载体
message Session {
    string session_id  = 1; // token
    uint64 create_time = 2;
    uint64 update_time = 3;
    uint64 expire_time = 4;

    Token    access_token = 20;
    UserInfo user_info    = 21;
}

// 用户信息
message UserInfo {
    uint64 client_id  = 1; // 查看文件顶部的注释获取更多关于 client_id 的信息
    uint64 account_id = 2;
    uint64 group_id   = 3;
    uint64 station_id = 4;

    /*
	权限相关，从enum Permission转换为压缩格式，减少空间占用
	permissioin => permissioins[permissioin / 64] |= (1 << (permissioin % 64))
	*/

    repeated uint64 sys_permissions = 50; // 系统内置权限，用于限制某些系统管理的API，譬如修改Account或Group
    repeated uint64 usr_permissions = 51; // 用户定义权限，参考

    // STATION, TERMINAL, PURCHASE
    enterprise.Group     group      = 100;
    enterprise.GroupUser group_user = 101;

    // xSHOP
    enterprise.Customer     customer      = 200;
    enterprise.CustomerUser customer_user = 201;
}

message CreateRefreshTokenRequest {
    Token token = 1;
}

message CreateRefreshTokenResponse {
    Token token = 1;
}

message UpdateRefreshTokenRequest {
    Token token = 1;
}

message UpdateRefreshTokenResponse {
    Token token = 1;
}

message DeleteRefreshTokenRequest {
    string token_id = 1;
}

message DeleteRefreshTokenResponse {
    Token token = 1;
}

message GetRefreshTokenRequest {
    string token_id = 1;
}

message GetRefreshTokenResponse {
    Token token = 1;
}

message CreateSessionRequest {
    Session session = 1;
}

message CreateSessionResponse {
    Session session = 1;
}

message UpdateSessionRequest {
    Session session = 1;
}

message UpdateSessionResponse {
    Session session = 1;
}

message DeleteSessionRequest {
    string session_id = 1;
}

message DeleteSessionResponse {
    Session session = 1;
}

message GetSessionRequest {
    string session_id = 1;
}

message GetSessionResponse {
    Session session = 1;
}

message GetUserInfoRequest {
}

message GetUserInfoResponse {
    UserInfo user_info = 1;
}

message UpdateUserInfoRequest {
    uint64 station_id = 1; // 切换Station，目前只有STATION用到
    uint64 user_id    = 2; // 切换User，目前只有ESHOP用到
}

message UpdateUserInfoResponse {
    UserInfo user_info = 1;
}

/*
Authorization Code Grant
	response_type: REQUIRED, Value MUST be set to "code"
	client_id:     REQUIRED
	redirect_uri:  OPTIONAL
	scope:         OPTIONAL
	state:         RECOMMENDED

Implicit Grant
	response_type: REQUIRED, Value MUST be set to "token"
	client_id:     REQUIRED
	redirect_uri:  OPTIONAL
	scope:         OPTIONAL
	state:         RECOMMENDED
*/
message AuthorizeRequest {

    string response_type = 1;
    string client_id     = 2; // 按照 oauth2 标准，client_id 使用 string 类型。查看文件顶部的注释获取更多关于 client_id 的信息
    string client_secret = 3;
    string redirect_uri  = 4;
    string scope         = 5;
    string state         = 6;
}

message AuthorizeResponse {
    // response_type code
    string code  = 1;
    string state = 2;

    // response_type token
    string access_token  = 3;
    string token_type    = 4;
    uint32 expires_in    = 5;
    string refresh_token = 6;
}

/*
Authorization Code Grant
	grant_type:   REQUIRED, Value MUST be set to "authorization_code"
	code:         REQUIRED
	redirect_uri: REQUIRED
	client_id:    REQUIRED

Resource Owner Password Credentials Grant
	grant_type: REQUIRED, Value MUST be set to "password"
	username:   REQUIRED
	password:   REQUIRED
	scope:      OPTIONAL
	group_id:   REQUIRED

Client Credentials Grant
	grant_type: REQUIRED, Value MUST be set to "client_credentials"
	scope:      OPTIONAL

Refreshing an Access Token
	grant_type:    REQUIRED, Value MUST be set to "refresh_token"
	refresh_token: REQUIRED
	scope:         OPTIONAL
	group_id:      REQUIRED

自定义模式-微信小程序授权
	grant_type:    REQUIRED, Value MUST be set to "wechat_miniprogram"
	group_id:      REQUIRED
	wechat_app_id: REQUIRED
	wechat_code:   REQUIRED

自定义模式-验证码，验证码发送参考verification.SendCode，CodeType为AUTH
	grant_type: REQUIRED, Value MUST be set to "sms_code"
	group_id:   REQUIRED
	phone:      REQUIRED
	code:       REQUIRED

自定义模式-测试
	grant_type: REQUIRED, Value MUST be set to "testing"

*/
message TokenRequest {
    string grant_type    = 1;
    string redirect_uri  = 2;
    string client_id     = 3; // 按照 oauth2 标准，client_id 使用 string 类型。查看文件顶部的注释获取更多关于 client_id 的信息
    string client_secret = 4;
    string code          = 5;
    string username      = 6;
    string password      = 7;
    string refresh_token = 8;
    string scope         = 9;

    uint64 group_id      = 100; // group系统编码
    string group_sn      = 101; // group序号编码
    string wechat_app_id = 102; // 微信appid，微信环境内使用，可转换为group_id

    // wechat_miniprogram
    string wechat_code           = 200; // 通过wx.login获取
    string wechat_encrypted_data = 201; // 通过wx.getUserInfo获取
    string wechat_iv             = 202; // 通过wx.getUserInfo获取

    // sms_code
    string phone = 210; // 号码
}

message TokenResponse {
    string access_token  = 1;
    string token_type    = 2;
    uint32 expires_in    = 3; // The lifetime in seconds of the access token
    string refresh_token = 4;
}
