syntax = "proto3";

package ceres.finance;

option go_package = "code.guanmai.cn/back_end/ceres/finance/proto;proto";

import "./enterprise/proto/enterprise.proto";
import "./order/proto/order.proto";
import "./google/api/annotations.proto";
import "./asynctask/proto/asynctask.proto";
import "./include/protoc-gen-validate/validate.proto";
import "./common/proto/common.proto";
import "./cmd/protoc-gen-dao/proto/dao.proto";
import "./inventory/proto/inventory.proto";
import "./common/proto/options.proto";

service FinanceService {
    // 供应商结算
    // 拉取结款单据
    rpc ListSettleSheet(ListSettleSheetRequest) returns (ListSettleSheetResponse) {
        option (google.api.http) = {
            post : "/ceres/finance/FinanceService/ListSettleSheet"
        };
        option (common.options.annotation) = {
            codes : "CODE_DIFFERENT_SUBJECT"
        };
    }
    rpc GetManySettleSheet(GetManySettleSheetRequest) returns (GetManySettleSheetResponse) {
        option (google.api.http) = {
            post : "/ceres/finance/FinanceService/GetManySettleSheet"
        };
        option (common.options.annotation) = {
            codes : "CODE_DIFFERENT_SUBJECT"
        };
    }
    // 结款单据明细
    rpc GetSettleSheetDetail(GetSettleSheetDetailRequest) returns (GetSettleSheetDetailResponse) {
        option (google.api.http) = {
            post : "/ceres/finance/FinanceService/GetSettleSheetDetail"
        };
    }
    // 创建结款单据
    rpc CreateSettleSheet(CreateSettleSheetRequest) returns (CreateSettleSheetResponse) {
        option (google.api.http) = {
            post : "/ceres/finance/FinanceService/CreateSettleSheet"
        };
        option (common.options.annotation) = {
            codes : "CODE_OPERATE_BY_OTHER,CODE_ITEM_JOIN_SHEET,CODE_ONLY_ALLOW_APPROVED,CODE_DIFFERENT_SUBJECT,CODE_NOT_PRODUCT_IN_REFUND_OUT,CODE_DATA_EXPIRE,CODE_NOW_ALLOW_OPERATE,CODE_SHEET_SETTLE_AMOUNT_LT_ZERO"
        };
    }
    // 修改结款单据
    rpc UpdateSettleSheet(UpdateSettleSheetRequest) returns (UpdateSettleSheetResponse) {
        option (google.api.http) = {
            post : "/ceres/finance/FinanceService/UpdateSettleSheet"
        };
        option (common.options.annotation) = {
            codes : "CODE_SHEET_SETTLE_AMOUNT_LT_ZERO"
        };
    }
    // 使用余额结款
    rpc PaySettle(PaySettleRequest) returns (PaySettleResponse) {
        option (google.api.http) = {
            post : "/ceres/finance/FinanceService/PaySettle"
        };
        option (common.options.annotation) = {
            codes : "Status_CODE_NOT_ALLOW_OPERATE,CODE_DATA_EXPIRE,CODE_MANY_SETTLE_AMOUNT,CODE_NOT_HAS_ENOUGH_BALANCE,INVALID_ARGUMENT,CODE_ARRIVAL_SERIAL_NO_USED"
        };
    }
    // 批量结款
    rpc BatchPaySettle(BatchPaySettleRequest) returns (BatchPaySettleResponse) {
        option (google.api.http) = {
            post : "/ceres/finance/FinanceService/BatchPaySettle"
        };
        option (common.options.annotation) = {
            codes : "CODE_ARRIVAL_SERIAL_NO_USED"
        };
    }
    // 批量提交结款单
    rpc BatchSubmitSettleSheet(BatchSubmitSettleSheetRequest) returns (BatchSubmitSettleSheetResponse) {
        option (google.api.http) = {
            post : "/ceres/finance/FinanceService/BatchSubmitSettleSheet"
        };
        option (common.options.annotation) = {
            codes : "Status_CODE_NOT_ALLOW_OPERATE"
        };
    }
    // 结算单据导出
    rpc ExportSettleSheet(ExportSettleSheetRequest) returns (ExportSettleSheetResponse) {
        option (google.api.http) = {
            post : "/ceres/finance/FinanceService/ExportSettleSheet"
        };
    }
    // 余额导出
    rpc ExportAccountBalance(ExportAccountBalanceRequest) returns (ExportAccountBalanceResponse) {
        option (google.api.http) = {
            post : "/ceres/finance/FinanceService/ExportAccountBalance"
        };
    }
    // 余额导出
    rpc ExportFlow(ExportFlowRequest) returns (ExportFlowResponse) {
        option (google.api.http) = {
            post : "/ceres/finance/FinanceService/ExportFlow"
        };
    }
    // 账户余额更新
    rpc UpdateAccountBalance(UpdateAccountBalanceRequest) returns (UpdateAccountBalanceResponse) {
        option (google.api.http) = {
            post : "/ceres/finance/FinanceService/UpdateAccountBalance"
        };
        option (common.options.annotation) = {
            codes : "CODE_NOT_ENOUGH_BALANCE,CODE_DATA_EXPIRE"
        };
    }
    rpc ListAccountBalance(ListAccountBalanceRequest) returns (ListAccountBalanceResponse) {
        option (google.api.http) = {
            post : "/ceres/finance/FinanceService/ListAccountBalance"
        };
    }
    // 交易流水
    // 账户余额交易流水
    rpc ListTransactionFlow(ListTransactionFlowRequest) returns (ListTransactionFlowResponse) {
        option (google.api.http) = {
            post : "/ceres/finance/FinanceService/ListTransactionFlow"
        };
    }
}

message Status {
    enum Code {
        CODE_UNSPECIFIED       = 0;
        CODE_DIFFERENT_SUBJECT = 2025001;  // 不是同一个[供应商/公司]，不能加入同一结款单
        CODE_NOW_ALLOW_OPERATE = 2025002;  // 不允许的操作    一般为供应商结算结款单据从一个状态变更另一个状态，状态的变更需要遵循
        // https://app.diagrams.net/?lightbox=1&highlight=0000ff&edit=_blank&layers=1&nav=1&title=%E7%BB%93%E6%AC%BE%E5%8D%95%E6%8D%AE%E7%8A%B6%E6%80%81.drawio#R5Vxbc5s4FP41emwGXRGPEDttM7Mzmc1Ot30kRrWZsY0X48TJr18JBDZCsV0S4wtPRgdxQN%2B5HykB%2BHa2%2FpqGi8lfSSSmADnRGuABQAhCzuSPorwWFOaigjBO40hP2hAe4zehiY6mruJILGsTsySZZvGiThwl87kYZTVamKbJS33a72Raf%2BsiHIsG4XEUTpvUf%2BMomxRUjtwN%2FZuIx5PyzZB5xZ1ZWE7WK1lOwih52SLhIcC3aZJkxdVsfSumCrwSl%2BK5u3fuVh%2BWinl2yANP0d8%2F4zF0f9x%2F%2FzG6f3h%2BG9x%2F%2FaK5PIfTlV7wP2Kd6Q%2FOXksUMkXEwSSbTSUBystwGo%2Fn8nok3y5SSXgWaRZL3Hx9YxZHkXo8SMUyfgufclaOHC%2BSeJ7lUqEBoAPFa5Uly0LyirX%2BJMlPrN9dK6wQlKonkpnI0lc5RT%2BAudYyrXWulsHLRoREkyZb0itFFWqlGVeMN7jKCw3tH8CMGjCDIQXBEHAKhgzwO%2BA5YEhA4AOfNNBPk9U8EpHG72USZ%2BJxEY7U3RdpdXXBfAZ6ZC96nDfRI8dCD9vRc0GALOhtgJUTAuBhNce%2FVcSTA4thDVjImshCaFFMeixoiQVaD3AMfK6AlGKWDvz8gKwA0UBi59RA0l06enb4EXxu%2BLkW%2FCRaDuAuGHLgD0HgHADkpQUqxOqCQLgpCNZlpOJWPVYulinUA6Z8wvXJARsGgSyeuVM5eE05mBiLeeSrDFeBOg2Xy3hk8xMiaiS4e0HZWjTd4QRSMQ2z%2BLnO3oaEfsODEuQW5tDA3DPAXCardCT0U9uZrcnoPSMqGWVhOhZZg1EumGrZ7WVVruOqhUUMjE3NP1RYlZRLRrxjYVly8asTFqc3tIZyFcz%2F2LaarFjHArOl%2F82svxGSVNgaAI9efmwyilmImrGJdxmboKVquDYTIuUiP%2BrviFuXXiPKHdt8bJVJDzJrbMYZeuKMDrLrtxrqfFJKR6iZbtBurcZWj%2FagDmoI8ORWYy9IpdfyofZjAc%2FTAK7CvWpeOcDzlWcL7pSLMyXSdauFGn4IWrqp3bZaYA9qS9N%2FQE5uDA9yqCtqCJB364rKxX%2BaBVyaTyKuIQCLT%2Bo0%2F0V9r0hMiSBL%2B7hbifSgIjH9UAX6h3Mrk9GxHdrOvZJ800n6NOnHPO8cdkOhc24BHPWgksDIQN1rHcAR3Mvq2Br%2FTjXBco2XcZoAn118VEBGixgy0jCUbk9d9CDRhbwOOiEtrcRk1PUmSvm667YRc8%2BLWHLZTm0EW6qLa7MRYtqIGZnb2kiD0bFtBH1cWGIdZz%2BVxt8Qx9PjX%2BrejcP0cLDWFpEPXrcGDyKN5SKUXeW0QyUvvzCHeMfa6Ek1hKGaYLG5KXl4t5%2BeVkMspWl7DcEymJyPhpBTagji2NgHxeY%2B6MH5KGc3tH4QkBC3WzWx1ctsqkLp7yT%2F1o2%2BsP9WSXnjSxENfTkB8sV6c1NejfVvzuWpIqh%2ByBB4QV7i%2BcDLD2h61H6usOqQqHbKQPW45Bzuq3a7ojiAw7INX5xPvM378VTxV9334uUSkifzgyStWFlJvvBEAlG3pkGWPeEqg%2BsmkbBU9deWSJjnd7nXtiaFRq3U8aYw7kEHYR%2FEbUVV9X%2B6klUvmgfQyMAs5y%2B7rYss%2B47tE6laGrUzhzrUqg7Il4qt01OZHzMPZbY9gcZIPe%2BiJqNj218PukiMeLsxPthZwj2Mjiys0kd8yGzn8hsKu0XlcLv%2BUeON8eaj1%2B1R%2BxKoAGfH8tBJq2RYgvlhLTGa%2B41S6thaYumjXF9IxcY%2BHy33jU4VU8knNCfO3ZNis5OEW%2B9bEbSX1bHtxPbngX04O8oazR7YzEc7PQdH7Md4zTMn%2BREg7imZ%2BPn5H1MUnR9%2FM1rmJ988Jz0ofYlZ%2BrY%2F%2FGaIz%2BvYAdlqX6L02hvkh%2BAGeSNwr9ZfmgMibr27Vw4%2F3%2FvI4eZfUBRi2%2FwjDzz8Hw%3D%3D
        CODE_NOT_ENOUGH_BALANCE          = 2025003;  // 余额不足
        CODE_FAILED_CHECK_STOCK_SHEET    = 2025004;  // 检查采购单据失败，请重试
        CODE_ONLY_ALLOW_APPROVED         = 2025005;  // 只允许审核通过的单据
        CODE_DATA_EXPIRE                 = 2025006;  // 数据失效，请重新刷新后提交
        CODE_OPERATE_BY_OTHER            = 2025007;  // 别人正在操作，请稍后操作
        CODE_ITEM_JOIN_SHEET             = 2025008;  // xx单据已经加入结款单
        CODE_NOT_PRODUCT_IN_REFUND_OUT   = 2025009;  // 不是采购入库后者采购出库
        CODE_MANY_SETTLE_AMOUNT          = 2025010;  // 结款余额大于待借款金额
        CODE_ONLY_NOT_PAID               = 2025011;  // 未支付
        CODE_SHEET_NOT_NOT_ALLOW_PAY     = 2025012;  // 单据状态不允许付款
        CODE_SHEET_SETTLE_AMOUNT_LT_ZERO = 2025013;  // 单据金额不允许为小于0
        CODE_ARRIVAL_SERIAL_NO_USED      = 2025014;  // 流水号已经被用
    }
    message SheetJoinedDetail {
        string item_serial_no = 1;  // 已经加入结款单的采购单据编号
    }
}

enum AccountType {
    ACCOUNT_TYPE_UNSPECIFIED = 0;
    ACCOUNT_TYPE_SUPPLIER    = 1;  // 供应商
    ACCOUNT_TYPE_CUSTOMER    = 2;  // 商户
}

enum TimeType {
    TIME_TYPE_UNSPECIFIED = 0;
    TIME_TYPE_CREATE_TIME = 1;  // 创建时间
}

// 结款单据
message SettleSheet {
    option (dao.partition_count) = 100;

    enum SheetStatus {
        SHEET_STATUS_UNSPECIFIED        = 0;
        SHEET_STATUS_NOT_SUBMITTED      = 1;  // 草稿/未提交 保存草稿时
        SHEET_STATUS_SUBMITTED_NOT_PAID = 2;  // 已提交未结款
        SHEET_STATUS_PAID               = 3;  // 已结款
        SHEET_STATUS_PART_PAID          = 4;  // 部分结款
        SHEET_STATUS_NOT_APPROVED       = 5;  // 审核不通过
        //        SHEET_STATUS_STRIKE_BALANCE     = 6; // 冲账
        SHEET_STATUS_DELETED = 6;  // 已删除
    }
    // @inject_tag: gorm:"PRIMARY_KEY"
    uint64 settle_sheet_id = 1;  // 结款单据id
    uint64 rversion        = 2;  // 版本号
    uint64 create_time     = 3;
    uint64 update_time     = 4;
    uint64 delete_time     = 5;
    uint64 settle_time     = 6;  // 结款日期

    uint64 group_id   = 10;  // 前端不需要传
    uint64 station_id = 11;  // 同上
    uint64 creator_id = 12;

    string settle_sheet_serial_no     = 21;  // 结款单据号
    uint64 target_id                  = 22;  // 结款的对象ID 可选[供应商,可结款的一级商户】
    AccountType account_type          = 23;  // 账户类型
    enterprise.CreditType credit_type = 24;  // 结算周期 用于搜索使用 不会随着供应商借款周期变化
    string total_price                = 25;  // 单据总金额
    string delta_amount               = 26;  // 折让总金额 正负
    string should_amount              = 27;  // 应付
    string actual_amount              = 28;  // 实付
    string need_amount                = 29;  // 待付 = 应付-实付
    SheetStatus sheet_status          = 30;  // 结款单据状态
    string abstract                   = 31;  // 摘要
    // 结款单据状态为 '已提交待结款' 的时候可以多选 其余情况禁用
    message AmountDiscount {
        enum DiscountReason {
            DISCOUNT_REASON_UNSPECIFIED = 0;
            DISCOUNT_REASON_REMOVE_ZERO = 1;  // 抹零
            DISCOUNT_REASON_CAL_ERROR   = 2;  // 供应商计算异常
            DISCOUNT_REASON_ALLOWANCE   = 3;  // 供应商折扣
            DISCOUNT_REASON_FINE        = 4;  // 供应商罚款
            DISCOUNT_REASON_OTHER       = 5;  // 其他
        }
        enum DiscountType {
            DISCOUNT_TYPE_UNSPECIFIED  = 0;
            DISCOUNT_TYPE_ADD_AMOUNT   = 1;  // 加钱
            DISCOUNT_TYPE_DELTA_AMOUNT = 2;  // 扣钱
        }

        uint64 create_time = 1;

        uint64 creator_id = 10;  //操作人id

        DiscountReason discount_reason = 21;  // 折让原因
        DiscountType discount_type     = 22 [ (validate.rules).message = {required: true} ];  // 折让类型
        string discount_amount         = 23;                                              // 折让金额 正值 根据折让类型加减
        string remark                  = 24;
    }
    message AmountDiscounts {
        repeated AmountDiscount amount_discounts = 1;
    }
    AmountDiscounts amount_discounts = 32;
    message Uint64Slice {
        repeated uint64 item_ids = 1;
    }
    Uint64Slice item_ids = 33;  // 订单id或者单据ID
    // TODO 最终提交 冲账
    // TODO 一张单据是否属于一个结款单
}

// 对结款单进行批量操作会用到
message SettleSheetSlice {
    string arrival_serial_no           = 1;
    repeated SettleSheet settle_sheets = 2;
}

// 账户余额
message AccountBalance {
    option (dao.partition_count) = 100;
    option (dao.model_type)      = TYPE_FINANCE_ACCOUNT_BALANCE;

    // @inject_tag: gorm:"PRIMARY_KEY"
    uint64 account_balance_id = 1;
    uint64 create_time        = 2;
    uint64 update_time        = 3;

    uint64 group_id   = 10;
    uint64 station_id = 11;

    AccountType account_type = 20;
    uint64 target_id         = 21;  // 对象ID 可选值可结款的[供应商id 商户id]
    string balance           = 22;  // 账户余额
    uint64 rversion          = 23;
    string serial_no         = 24;  // target_id 对应的编码
}

// 账户余额的变动流水
message TransactionFlow {
    option (dao.partition_count) = 100;
    option (dao.model_type)      = TYPE_FINANCE_TRANSACTION_FLOW;

    enum ChangeType {
        CHANGE_TYPE_UNSPECIFIED = 0;
        CHANGE_TYPE_RECHARGE    = 1;  // 充值 商户余额充值 退款
        CHANGE_TYPE_REFUND      = 2;  // 退款/冲账 流水
        CHANGE_TYPE_SETTLE      = 3;  // 结款
        CHANGE_TYPE_DEDUCTION   = 4;  // 扣款
    }

    // @inject_tag: gorm:"PRIMARY_KEY"
    uint64 transaction_flow_id = 1;  // 流水id
    uint64 create_time         = 2;
    uint64 delete_time         = 3;

    uint64 group_id   = 10;
    uint64 creator_id = 11;
    // @inject_tag: gorm:"index"
    uint64 target_id = 12;  // 对象名称 可选[商户id，供应商id] 余额主题
    // @inject_tag: gorm:"index"
    uint64 settle_sheet_id = 13;  // 结款单id

    uint64 item_id = 15;  // 此对象对中的条目的id 例如 商户结款单据的订单id 供应商结款单据的采购出入库单据id

    string change_amount          = 20;  // 变动金额
    ChangeType change_type        = 21;  // 变动类型
    string remark                 = 22;  // 流水备注
    string change_before_amount   = 23;  // 交易前金额
    string change_after_amount    = 24;  // 交易后金额
    string arrival_serial_no      = 25;  // 到账凭证
    string settle_sheet_serial_no = 26;  // 单据编号
    bool used                     = 27;  // 结款流水被冲账后此字段会为true
}

// 拉取结款单据
message ListSettleSheetRequest {
    TimeType time_type                            = 1;                                   //时间类型
    uint64 begin_time                             = 2 [(validate.rules).uint64.gt = 0];  // 建单开始时间
    uint64 end_time                               = 3 [(validate.rules).uint64.gt = 0];
    uint64 target_id                              = 4;  // 供应商/一级商户ID
    repeated SettleSheet.SheetStatus sheet_status = 5;  // 单据状态
    AccountType account_type                      = 6 [ (validate.rules).message = {required: true} ];  // 账户类型
    enterprise.CreditType credit_type             = 7;                                             // 结款周期

    // 以下是勾选全部页的时候，待处理单据/订单的查询条件
    // 会先查单据/订单的供应商/商户是否一致，然后返回满足条件的条目ID
    inventory.ListStockSheetRequest stock_sheet_list_query = 8;  // 查询供应商待处理单据
    order.ListOrderRequest order_list_query                = 9;  // 查询待处理的订单

    common.PagingParams paging = 1000 [(validate.rules).message.required = true];  // 分页信息
}

message ListSettleSheetResponse {
    repeated SettleSheet settle_sheets                      = 1;
    map<uint64, enterprise.Supplier> relation_supplier_info = 2;
    map<uint64, enterprise.Customer> relation_customer_info = 3;
    common.PagingResult paging                              = 1000 [(validate.rules).message.required = true];
}

message GetManySettleSheetRequest {
    repeated uint64 settle_sheet_ids = 1;
}

message GetManySettleSheetResponse {
    repeated SettleSheet settle_sheets = 1;
}

// 供应商结款单明细
message GetSettleSheetDetailRequest {
    uint64 settle_sheet_id = 1;
}

message GetSettleSheetDetailResponse {
    SettleSheet settle_sheet                               = 1;
    repeated TransactionFlow transaction_flows             = 2;
    enterprise.Supplier supplier                           = 3;
    enterprise.Customer customer                           = 4;
    repeated inventory.StockSheet stock_sheets             = 5;
    repeated order.Order orders                            = 6;
    map<uint64, enterprise.GroupUser> relation_group_users = 7;
    map<uint64, enterprise.Customer> relation_customer     = 8;  // 订单客户名称
}

// 创建或加入到供应商结款单据额
message CreateSettleSheetRequest {
    enum OperateType {
        OPERATE_TYPE_UNSPECIFIED  = 0;
        OPERATE_TYPE_JOIN_SHEET   = 1;
        OPERATE_TYPE_CREATE_SHEET = 2;
    }
    OperateType operate_type      = 5 [ (validate.rules).message = {required: true} ];
    SettleSheet join_settle_sheet = 6;  // 加入的结款单据，只有当加入单据时才会传
    AccountType account_type      = 7 [ (validate.rules).message = {required: true} ];  // 账户类型
    // 未全选时传选中的ID
    repeated uint64 item_ids = 8;  // 采购单据ID
    // 全选时传搜索的条件
    inventory.ListStockSheetRequest stock_sheet_list_query = 9;   // 查询供应商待处理单据
    order.ListOrderRequest order_list_query                = 10;  // 查询待处理的订单
}

message CreateSettleSheetResponse {
    SettleSheet settle_sheet = 1;
}

// 结款 使用余额
message PaySettleRequest {
    // TODO 如果需要交易流水号和结款单据相关联，就使用这里的数据 会存在一个使用交易流水号来付款的选项
    //    enum SettleType {
    //        SETTLE_TYPE_UNSPECFIED = 0;
    //        SETTLE_TYPE_BALANCE    = 1;
    //        SETTLE_TYPE_FLOW       = 2;
    //    }
    SettleSheet settle_sheet         = 1;  // 结款的单据
    AccountBalance account_balance   = 2;  // 商户余额信息
    TransactionFlow transaction_flow = 3;  // TODO 如果后续商户需要把流水号和结款单关联起来，使用的交易流水结算
    AccountType account_type         = 4 [ (validate.rules).message = {required: true} ];  // 账户类型
    string settle_amount             = 5;                                             //结款金额
    string recharge_amount           = 6;                                             //充值金额
    string arrival_serial_no         = 7;                                             //到账凭证号
    string remark                    = 9;

    bool batch_op         = 10;  // 批量操作 批量结款时
    uint64 batch_op_index = 11;  // 批量操作的第几个操作
}

message PaySettleResponse {
    TransactionFlow transaction_flow = 1;
    SettleSheet settle_sheet         = 2;
    string actual_paid               = 3;  // 实际支付金额
    string need_paid                 = 4;  // 还需支付金额
}

// 结款 使用余额
// 供应商结算
message BatchPaySettleRequest {
    repeated uint64 settle_sheet_ids = 1;  // 结款的单据
    // 勾选全部的页
    TimeType time_type                            = 2;
    uint64 begin_time                             = 3;  // 建单开始时间
    uint64 end_time                               = 4;
    uint64 target_id                              = 5;  // 供应商/一级商户ID
    repeated SettleSheet.SheetStatus sheet_status = 6;  // 单据状态
    // 账户类型
    AccountType account_type = 7 [ (validate.rules).message = {required: true} ];  // 账户类型

    string arrival_serial_no          = 8 [(validate.rules).string.min_len = 1];
    enterprise.CreditType credit_type = 9;  // 结款周期
}

message BatchPaySettleResponse {
    asynctask.Task task = 1;
}
// 更新供应商结款单据
// 对结款单进行 已提交未结款/审核不通过/已删除/冲账
message UpdateSettleSheetRequest {
    SettleSheet settle_sheet                 = 1;                                                   // 结款的单据
    SettleSheet.SheetStatus new_sheet_status = 2 [ (validate.rules).message = {required: true} ];  // 新的状态
    TransactionFlow transaction_flow         = 3;                                                   // 商户冲账时传需要冲账的流水 流水的类型必须为结款状态CHANGE_TYPE_SETTLE
}

message UpdateSettleSheetResponse {
    SettleSheet settle_sheet = 1;  // 结款的单据
}

// 拉取账户余额信息
message ListAccountBalanceRequest {
    uint64 target_id           = 1;  // 公司名供应商
    bool balance_zero          = 2;  // 过滤余额为0的账户
    common.PagingParams paging = 100;
}

message ListAccountBalanceResponse {
    repeated AccountBalance account_balances                = 1;
    map<uint64, enterprise.Customer> relation_customer_info = 2;  //商户信息
    common.PagingResult paging                              = 100;
}

// 账户余额充值
message UpdateAccountBalanceRequest {
    AccountBalance account_balance         = 1;                                             // 账户余额
    string flow_code                       = 2;                                             // 流水号
    string change_amount                   = 3;                                             // 变动金额
    string remark                          = 4;                                             // 备注
    TransactionFlow.ChangeType change_type = 5 [ (validate.rules).message = {required: true} ];  // 操作类型
    string arrival_serial_no               = 6;                                             // 到账凭证
}

message UpdateAccountBalanceResponse {
    AccountBalance account_balance = 1;
}

//// 流水查询
message ListTransactionFlowRequest {
    TimeType time_type         = 6;
    uint64 begin_time          = 1;
    uint64 end_time            = 2;
    uint64 target_id           = 3;
    uint64 settle_sheet_id     = 4;
    common.PagingParams paging = 5;
}

message ListTransactionFlowResponse {
    repeated TransactionFlow transaction_flows                = 1;
    map<uint64, enterprise.GroupUser> relation_groupuser_info = 2;
    common.PagingResult paging                                = 3;
}

// 导出结款单
message ExportSettleSheetRequest {
    uint64 begin_time                             = 1;  // 建单开始时间
    uint64 end_time                               = 2;
    uint64 target_id                              = 3;  // 供应商/一级商户ID
    repeated SettleSheet.SheetStatus sheet_status = 4;
    AccountType account_type                      = 5 [ (validate.rules).message = {required: true} ];  // 账户类型
    TimeType time_type                            = 6;
    enterprise.CreditType credit_type             = 7;
}
//
message ExportSettleSheetResponse {
    asynctask.Task task = 1;
}

// 导出商户余额
message ExportAccountBalanceRequest {
    uint64 target_id = 1;
}

message ExportAccountBalanceResponse {
    asynctask.Task task = 1;
}

// 导出交易流水
message ExportFlowRequest {
    uint64 target_id   = 1;
    uint64 begin_time  = 2;  // 建单开始时间
    uint64 end_time    = 3;
    TimeType time_type = 6;
}

message ExportFlowResponse {
    asynctask.Task task = 1;
}

// 批量提交结款单
message BatchSubmitSettleSheetRequest {
    repeated uint64 settle_sheet_ids = 1;

    // 勾选所有页时传搜索条件
    TimeType time_type                            = 2;  //时间类型
    uint64 begin_time                             = 3;  // 建单开始时间
    uint64 end_time                               = 4;
    uint64 target_id                              = 5;  // 供应商/一级商户ID
    repeated SettleSheet.SheetStatus sheet_status = 6;  // 单据状态
    AccountType account_type                      = 7 [ (validate.rules).message = {required: true} ];  // 账户类型
    enterprise.CreditType credit_type             = 8;                                             // 结款周期
}

message BatchSubmitSettleSheetResponse {
    asynctask.Task task = 1;
}